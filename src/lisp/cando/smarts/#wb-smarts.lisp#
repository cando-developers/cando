
;;;
;;; Initialize everything
;;;
(progn
  (require :asdf)
  (let ((central-registry (find-symbol "*CENTRAL-REGISTRY*" :asdf))
        (load-system (find-symbol "LOAD-SYSTEM" :asdf)))
    (setf (symbol-value central-registry)
          (cons (translate-logical-pathname "cando:cando;")
                (symbol-value central-registry)))
    (funcall load-system "cando"))
  (format t "Done initialization pid = ~a~%" (getpid))
  (setq *print-array* t)
  (setq *default-pathname-defaults*
        #P"~/Development/Clasp/projects/cando/work/molecules/")
  (format t "Done with initialization~%"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Work with a molecule
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(in-package :cando)
;;;
;;; Load Antechamber type rules and AMBER parameters
;;;
(let ((*default-pathname-defaults*
       #P"~/Development/clasp/projects/cando/work/forceField/"))
  (defparameter *parms*
    (let ((parms (chem:make-read-amber-parameters)))
      (with-open-file (fin "ATOMTYPE_GFF.DEF" :direction :input)
        (chem:read-types parms fin))
      (with-open-file (fin "gaff.dat" :direction :input)
        (chem:read-parameters parms fin)
        parms)))
  (defparameter *ff* (chem:get-force-field *parms*)))


;;;
;;; Load the chemdraw file containing a molecule
;;;
(progn
  (setq *default-pathname-defaults*
        #P"~/Development/Clasp/projects/cando/src/lisp/cando/smarts/")
  (defparameter *cd*
    (with-open-file
        (fin (probe-file "small-mol.cdxml") :direction :input)
      (chem:make-chem-draw fin)))
  (defparameter *agg* (chem:as-aggregate *cd*))
  (defparameter *mol* (chem:content-at *agg* 0)))

(progn
  (defparameter *stereocenters*
    (gather-stereocenters *agg*))
  (sort *stereocenters* #'string< :key #'chem:get-name)
  (set-stereoisomer *stereocenters* #b1 :show t)
  (format t "~a~%" *stereocenters*))


(cando:chimera *agg*)
(cando:scramble-positions *agg*)
(cando:chimera *agg*)
(cando:build-good-geometry-from-random *agg* *ff*)
(cando:chimera *agg*)

(defparameter *n* (let (n)
                    (chem:map-atoms
                     nil
                     (lambda (a)
                       (if (eq (chem:get-name a) ckw:N)
                           (setq n a)))
                     *agg*)
                    n))


(defparameter *p* (make-cxx-object 'chem:chem-info))
(defun foo (a) (print a))
(chem:compile-smarts *p* "[N<a>]C=O")
(format t "Matches: ~a~%" (chem:matches *p* *n*))
(chem:get-code *p*)


(getpid)50858
