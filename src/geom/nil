addonPackage.cc:90:	    _lisp->installPackage(addonPkgP);
coloredVertexList.cc:128:    ColoredVertex_sp cv = _lisp->nil<ColoredVertex_O>();
integerKeyObjectDictionary.cc:94:	    Symbol_sp isymbol = _lisp->internKeyword((BF("i%d")%vi->first).str());
matrix.cc:691:	    _lisp->print(BF("first!=last  v.size() = %d") % v.size());
objectDictionary.cc:227:		core::Symbol_sp sym = _lisp->internKeyword(vi->first);
objectList.cc:103:	frames = _lisp->create<core::FrameList_O>();
objectMap.cc:86:	addon::DisplayList_sp dl = _lisp->create<addon::DisplayList_O>();
render.cc:134:	    dl->add(_lisp->create<GrLine_O>(mid1,mid2));
render.cc:136:	    dl->add(_lisp->create<GrLine_O>(mid1,pos1));
render.cc:137:	    dl->add(_lisp->create<GrLine_O>(mid2,pos2));
render.cc:631:	this->_Vertices = _lisp->create<ColoredVertexList_O>();
render.cc:725:	this->_Coordinates = _lisp->create<CoordinateArray_O>();
render.cc:801:	this->_Vertices = _lisp->create<CoordinateArray_O>();
render.cc:1263:	this->_Name = _lisp->nil<core::Symbol_O>();
render.cc:1342:	core::SymbolVector_sp symVec = _lisp->create<core::SymbolVector_O>();
render.cc:1481:	if ( !this->isOn(controller) ) return _lisp->nil<Render_O>();
render.cc:1491:	    return _lisp->nil<Render_O>();
render.cc:1493:	if ( symbolPath->car<core::Symbol_O>() != this->_Name ) return _lisp->nil<Render_O>();
render.cc:1560:	if ( !this->isOn(controller) ) return _lisp->nil<Render_O>();
render.cc:1574:	    return _lisp->nil<Render_O>();
render.cc:1581:	    return _lisp->nil<Render_O>();
render.cc:1583:	if ( symbolPath->car<core::Symbol_O>() != this->_Name ) return _lisp->nil<Render_O>();
render.cc:1594:	return _lisp->nil<Render_O>();
render.cc:1842:	if ( !this->isOn(controller) ) return _lisp->nil<Render_O>();
render.cc:1852:	    return _lisp->nil<Render_O>();
render.cc:1854:	if ( symbolPath->car<core::Symbol_O>() != this->_Name ) return _lisp->nil<Render_O>();
render.cc:1869:	return _lisp->nil<Render_O>();
render.cc:1935:	    return _lisp->nil<Render_O>();
renderController.cc:229:    _lisp->print(BF("RenderController description"));
renderController.cc:233:	_lisp->print(BF(" Switch %s value: %d") % wi->first->__repr__()% wi->second->getSwitchValue() );
renderController.cc:239:	_lisp->print(BF(" Slider %s  value: %d  limits: [%d,%d]") 
vector4.cc:49:    _lisp->print(BF("<%lf,%lf,%lf,%lf>")
