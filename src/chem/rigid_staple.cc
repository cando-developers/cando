/*
    File: rigid_staple.cc
*/
/*
Open Source License
Copyright (c) 2016, Christian E. Schafmeister
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 
This is an open source license for the CANDO software from Temple University, but it is not the only one. Contact Temple University at mailto:techtransfer@temple.edu if you would like a different license.
*/
/* -^- */
#define	DEBUG_LEVEL_NONE

#include <clasp/core/foundation.h>
#include <clasp/core/numerics.h>
#include <cando/chem/nVector.h>
#include <cando/chem/largeSquareMatrix.h>
#include <cando/chem/energyComponent.h>
#include <clasp/core/wrappers.h>

namespace chem {
#if 0
CL_LAMBDA(helix-points interactions pos calc-force force-vec &key debug-energy);
DOCGROUP(cando);
CL_DEFUN double chem__rigid_staple_evaluate( NVector_sp helix_points,  /* xi, yi, zi */
                                /* helixk/pos, pointk/helix_points, helixl/pos, pointl/helix_points */
                                             core::SimpleVector_byte32_t_sp interactions,
                                             /* ai,bi,ci,di,xi,yi,zi */
                                             NVector_sp pos,
                                             bool 		calcForce,
                                             gc::Nilable<NVector_sp> 	force,
                                             bool debugEnergy
                                             )
/*                            
                            bool		calcDiagonalHessian,
                            bool		calcOffDiagonalHessian,
                            gc::Nilable<AbstractLargeSquareMatrix_sp>	hessian,
                            gc::Nilable<NVector_sp>	hdvec,
                            gc::Nilable<NVector_sp> dvec
*/
{
  double totalEnergy = 0.0;
  if ( debugEnergy ) 
  {
    LOG_ENERGY_CLEAR();
    LOG_ENERGY(("%s {\n") , this->className());
  }
  bool	hasForce = force.notnilp();
#if 0
  bool	hasHessian = hessian.notnilp();
  bool	hasHdAndD = (hdvec.notnilp())&&(dvec.notnilp());
#endif
  
#define STAPLE_CALC_FORCE
#define STAPLE_CALC_DIAGONAL_HESSIAN
#define STAPLE_CALC_OFF_DIAGONAL_HESSIAN
#undef  STAPLE_SET_POINT
#define STAPLE_SET_POINT(x,ioff,poff)  {x = (*helix_points)[ioff+poff];}
#undef	STAPLE_SET_PARAMETER
#define	STAPLE_SET_PARAMETER(ii,of)     {ii = (*interactions)[si+of];}
#undef	STAPLE_SET_POSITION
#define	STAPLE_SET_POSITION(x,ii,of)   {x = (*pos)[ii+of];}
#undef	STAPLE_ENERGY_ACCUMULATE
#define	STAPLE_ENERGY_ACCUMULATE(e)    totalEnergy += (e);
#undef	STAPLE_FORCE_ACCUMULATE
#undef	STAPLE_DIAGONAL_HESSIAN_ACCUMULATE
#undef	STAPLE_OFF_DIAGONAL_HESSIAN_ACCUMULATE
#define	STAPLE_FORCE_ACCUMULATE(ii,of,fak)	if (hasForce) { (*force)[ii+of] += fak; }
#define	STAPLE_DIAGONAL_HESSIAN_ACCUMULATE 	DiagHessAcc
#define	STAPLE_OFF_DIAGONAL_HESSIAN_ACCUMULATE OffDiagHessAcc

  { 
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#include <cando/energy-functions/_STAPLE_termDeclares.cc>
#pragma clang diagnostic pop
#if 0
    double fx1 = 0.0;
    double fy1 = 0.0;
    double fz1 = 0.0;
    double fx2 = 0.0;
    double fy2 = 0.0;
    double fz2 = 0.0;
#endif
    double ak, bk, ck, dk, xk, yk, zk;
    double al, bl, cl, dl, xl, yl, zl;
    double xh1,yh1,zh1,xh2,yh2,zh2;
    int I1, I2;
    for ( int i=0,si=0,siEnd(interactions->length()); si<siEnd; si += 4, ++i ) {
#ifdef DEBUG_CONTROL_THE_NUMBER_OF_TERMS_EVALAUTED
      if ( this->_Debug_NumberOfTermsToCalculate > 0 ) {
        if ( i>= this->_Debug_NumberOfTermsToCalculate ) {
          break;
        }
      }
#endif
		// ************* Evaluate the staple energy/force/hessian
		// using code generated by Mathematica ***************
#include <cando/energy-functions/_STAPLE_termCode.cc>
#if TURN_ENERGY_FUNCTION_DEBUG_ON //[
      si->_calcForce = calcForce;
      si->_calcDiagonalHessian = calcDiagonalHessian;
      si->_calcOffDiagonalHessian = calcOffDiagonalHessian;
#undef EVAL_SET
#define EVAL_SET(var,val) {si->eval.var=val;}
#include <cando/energy-functions/_STAPLE_debugEvalSet.cc>
#endif //]
      if ( debugEnergy ) {
        LOG_ENERGY(( "MEISTER staple %d args cando\n") , (i+1) );
        LOG_ENERGY(( "MEISTER staple %d address %x \n") , (i+1) , (&(*si)) );
        LOG_ENERGY(( "MEISTER staple %d r0 %5.3lf\n") , (i+1) , r0 );
        LOG_ENERGY(( "MEISTER staple %d kb %5.1lf\n") , (i+1) , kb );
        LOG_ENERGY(( "MEISTER staple %d x1 %5.3lf %d\n") , (i+1) , x1 , (I1/3+1) );
        LOG_ENERGY(( "MEISTER staple %d y1 %5.3lf %d\n") , (i+1) , y1 , (I1/3+1) );
        LOG_ENERGY(( "MEISTER staple %d z1 %5.3lf %d\n") , (i+1) , z1 , (I1/3+1) );
        LOG_ENERGY(( "MEISTER staple %d x2 %5.3lf %d\n") , (i+1) , x2 , (I2/3+1) );
        LOG_ENERGY(( "MEISTER staple %d y2 %5.3lf %d\n") , (i+1) , y2 , (I2/3+1) );
        LOG_ENERGY(( "MEISTER staple %d z2 %5.3lf %d\n") , (i+1) , z2 , (I2/3+1) );
        LOG_ENERGY(( "MEISTER staple %d results\n") , (i+1) );
        LOG_ENERGY(( "MEISTER staple %d Energy %lf\n") , (i+1) , Energy );
        if ( calcForce ) {
          LOG_ENERGY(( "MEISTER staple %d fx1 %lf %d\n") , (i+1) , fx1 , (I1/3+1) );
          LOG_ENERGY(( "MEISTER staple %d fy1 %lf %d\n") , (i+1) , fy1 , (I1/3+1) );
          LOG_ENERGY(( "MEISTER staple %d fz1 %lf %d\n") , (i+1) , fz1 , (I1/3+1) );
          LOG_ENERGY(( "MEISTER staple %d fx2 %lf %d\n") , (i+1) , fx2 , (I2/3+1) );
          LOG_ENERGY(( "MEISTER staple %d fy2 %lf %d\n") , (i+1) , fy2 , (I2/3+1) );
          LOG_ENERGY(( "MEISTER staple %d fz2 %lf %d\n") , (i+1) , fz2 , (I2/3+1) );
        }
        LOG_ENERGY(( "MEISTER staple %d stop\n") , (i+1) );
      }
		/* Add the forces */

//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fx1>10000.0);
//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fy1>10000.0);
//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fz1>10000.0);
//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fx2>10000.0);
//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fy2>10000.0);
//		_lisp->profiler().eventCounter(core::forcesGreaterThan10000).recordCallAndProblem(fz2>10000.0);
    }
  }
  if ( debugEnergy ) 
  {
    LOG_ENERGY(("%s }") , this->className());
  }
  return totalEnergy;
}
#endif
};
