#if defined(BOOTSTRAP_PACKAGES)
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CLANG-COMPILE",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CLANG-AST",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CLEAVIR-ENVIRONMENT",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CLEAVIR-PRIMOP",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CHEM",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CKW",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("ADAPT",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("UNITS",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("GEOM",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("AST-TOOLING",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("SERVE-EVENT-INTERNAL",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("SOCKETS-INTERNAL",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CLBIND",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("GCTOOLS",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("LLVM-SYS",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CFFI-SYS",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("KEYWORD",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("CORE",use_packages);
}
{
  std::list<std::string> use_packages = {};
  bootStrapSymbolMap->add_package_info("COMMON-LISP",use_packages);
}
{
  std::list<std::string> use_packages = { "CORE",  "COMMON-LISP"};
  bootStrapSymbolMap->add_package_info("COMMON-LISP-USER",use_packages);
}
{
  std::list<std::string> use_packages = { "COMMON-LISP"};
  bootStrapSymbolMap->add_package_info("GRAY",use_packages);
}
{
  std::list<std::string> use_packages = { "COMMON-LISP"};
  bootStrapSymbolMap->add_package_info("CLOS",use_packages);
}
{
  std::list<std::string> use_packages = { "COMMON-LISP"};
  bootStrapSymbolMap->add_package_info("COMPILER",use_packages);
}
{
  std::list<std::string> use_packages = { "COMMON-LISP"};
  bootStrapSymbolMap->add_package_info("EXT",use_packages);
}
#endif // #if defined(BOOTSTRAP_PACKAGES)
#if defined(CREATE_ALL_PACKAGES)
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLANG-COMPILE")) {
      _lisp->makePackage("CLANG-COMPILE",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "CAST"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLANG-AST")) {
      _lisp->makePackage("CLANG-AST",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLEAVIR-ENVIRONMENT")) {
      _lisp->makePackage("CLEAVIR-ENVIRONMENT",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLEAVIR-PRIMOP")) {
      _lisp->makePackage("CLEAVIR-PRIMOP",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CHEM")) {
      _lisp->makePackage("CHEM",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CKW")) {
      _lisp->makePackage("CKW",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("ADAPT")) {
      _lisp->makePackage("ADAPT",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("UNITS")) {
      _lisp->makePackage("UNITS",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("GEOM")) {
      _lisp->makePackage("GEOM",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("AST-TOOLING")) {
      _lisp->makePackage("AST-TOOLING",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("SERVE-EVENT-INTERNAL")) {
      _lisp->makePackage("SERVE-EVENT-INTERNAL",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("SOCKETS-INTERNAL")) {
      _lisp->makePackage("SOCKETS-INTERNAL",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLBIND")) {
      _lisp->makePackage("CLBIND",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("GCTOOLS")) {
      _lisp->makePackage("GCTOOLS",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("LLVM-SYS")) {
      _lisp->makePackage("LLVM-SYS",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CFFI-SYS")) {
      _lisp->makePackage("CFFI-SYS",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "KW"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("KEYWORD")) {
      _lisp->makePackage("KEYWORD",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "SI",  "SYSTEM",  "SYS"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CORE")) {
      _lisp->makePackage("CORE",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "CL"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("COMMON-LISP")) {
      _lisp->makePackage("COMMON-LISP",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "USER",  "CL-USER"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("COMMON-LISP-USER")) {
      _lisp->makePackage("COMMON-LISP-USER",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("GRAY")) {
      _lisp->makePackage("GRAY",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("CLOS")) {
      _lisp->makePackage("CLOS",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = { "CMP"};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("COMPILER")) {
      _lisp->makePackage("COMPILER",nicknames,use_packages);
  }
}
{
  std::list<std::string> nicknames = {};
  std::list<std::string> use_packages = {};
  if (!_lisp->recognizesPackage("EXT")) {
      _lisp->makePackage("EXT",nicknames,use_packages);
  }
}
  gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP-USER"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("CORE")));
  gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP-USER"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP")));
  gc::As<core::Package_sp>(_lisp->findPackage("GRAY"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP")));
  gc::As<core::Package_sp>(_lisp->findPackage("CLOS"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP")));
  gc::As<core::Package_sp>(_lisp->findPackage("COMPILER"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP")));
  gc::As<core::Package_sp>(_lisp->findPackage("EXT"))->usePackage(gc::As<core::Package_sp>(_lisp->findPackage("COMMON-LISP")));
#endif
#if defined(DECLARE_ALL_SYMBOLS)
namespace chem {
core::Symbol_sp _sym_iterateMatterSymbolConverter;
core::Symbol_sp _sym_allMatter;
core::Symbol_sp _sym_atoms;
core::Symbol_sp _sym_residues;
core::Symbol_sp _sym_molecules;
core::Symbol_sp _sym_bonds;
core::Symbol_sp _sym_name;
core::Symbol_sp _sym__PLUS_validChemdrawKeywords_PLUS_;
core::Symbol_sp _sym_STARparserNodeHolderSTAR;
core::Symbol_sp _sym_STARSabBondEnumConverterSTAR;
core::Symbol_sp _sym_STARLogicalOperatorTypeConverterSTAR;
core::Symbol_sp _sym_STARAtomTestEnumConverterSTAR;
core::Symbol_sp _sym_STARDonorAcceptorEnumConverterSTAR;
core::Symbol_sp _sym_STAREleDielectricEnumConverterSTAR;
core::Symbol_sp _sym_STARVdwMixRadiusEnumConverterSTAR;
core::Symbol_sp _sym_STARVdwMixWellEnumConverterSTAR;
core::Symbol_sp _sym_CDNode_O;
core::Symbol_sp _sym_CDBond_O;
core::Symbol_sp _sym_CDFragment_O;
core::Symbol_sp _sym_CDText_O;
core::Symbol_sp _sym_ChemDraw_O;
core::Symbol_sp _sym_Command_O;
core::Symbol_sp _sym_MacroModelFile_O;
core::Symbol_sp _sym_ReadAmberParameters_O;
core::Symbol_sp _sym_StructureComparer_O;
core::Symbol_sp _sym_Structure_Old_ListEntry_O;
core::Symbol_sp _sym_Structure_Old_List_O;
core::Symbol_sp _sym_Twister_O;
core::Symbol_sp _sym_TwisterDriver_O;
core::Symbol_sp _sym_ZMatrixInternal_O;
core::Symbol_sp _sym_ZMatrixBondInternal_O;
core::Symbol_sp _sym_ZMatrixAngleInternal_O;
core::Symbol_sp _sym_ZMatrixDihedralInternal_O;
core::Symbol_sp _sym_ZMatrixEntry_O;
core::Symbol_sp _sym_ZMatrix_O;
core::Symbol_sp _sym_R;
core::Symbol_sp _sym_S;
core::Symbol_sp _sym_UnknownConfiguration;
core::Symbol_sp _sym_candoDatabase;
core::Symbol_sp _sym_AM1_BCC_ar5;
core::Symbol_sp _sym_AM1_BCC_ar6;
core::Symbol_sp _sym_AM1_BCC_ar7;
core::Symbol_sp _sym_Alias_O;
core::Symbol_sp _sym__PLUS_configurationEnumConverter_PLUS_;
core::Symbol_sp _sym__PLUS_stereochemistryTypeConverter_PLUS_;
core::Symbol_sp _sym__PLUS_atomFlagSymbolConverter_PLUS_;
core::Symbol_sp _sym_configurationToSymbolConverter;
core::Symbol_sp _sym_stereochemistryToSymbolConverter;
core::Symbol_sp _sym_atomNeedsMinimizer;
core::Symbol_sp _sym_selected;
core::Symbol_sp _sym_onGrid;
core::Symbol_sp _sym_atomFixed;
core::Symbol_sp _sym_in3MemberRing;
core::Symbol_sp _sym_in4MemberRing;
core::Symbol_sp _sym_in5MemberRing;
core::Symbol_sp _sym_in6MemberRing;
core::Symbol_sp _sym_in7MemberRing;
core::Symbol_sp _sym_in8MemberRing;
core::Symbol_sp _sym_inRing;
core::Symbol_sp _sym__PLUS_bondOrderToSymbolConverter_PLUS_;
core::Symbol_sp _sym_AtomIdToAtomMap_O;
core::Symbol_sp _sym_AtomId_O;
core::Symbol_sp _sym__PLUS_elementToSymbolConverter_PLUS_;
core::Symbol_sp _sym__PLUS_hybridizationToSymbolConverter_PLUS_;
core::Symbol_sp _sym__PLUS_elementColors_PLUS_;
core::Symbol_sp _sym__PLUS_minimizerStatusConverter_PLUS_;
core::Symbol_sp _sym__PLUS_preconditionerTypeConverter_PLUS_;
core::Symbol_sp _sym_MinimizerExceededMaxStepsError;
core::Symbol_sp _sym_MinimizerStuckError;
core::Symbol_sp _sym_MinimizerError;
core::Symbol_sp _sym_noPreconditioner;
core::Symbol_sp _sym_hessianPreconditioner;
core::Symbol_sp _sym_minimizerError;
core::Symbol_sp _sym_minimizerSucceeded;
core::Symbol_sp _sym_truncatedNewtonRunning;
core::Symbol_sp _sym_conjugateGradientRunning;
core::Symbol_sp _sym_steepestDescentRunning;
core::Symbol_sp _sym_minimizerIdle;
core::Symbol_sp _sym_Angle_O;
core::Symbol_sp _sym_ProperTorsion_O;
core::Symbol_sp _sym_ImproperTorsion_O;
core::Symbol_sp _sym_AtomIndexer_O;
core::Symbol_sp _sym_MapOfMonomerNamesToAtomIndexers_O;
core::Symbol_sp _sym_MonomerPack_O;
core::Symbol_sp _sym_StereoConfiguration_O;
core::Symbol_sp _sym_Stereoisomer_O;
core::Symbol_sp _sym_StereoInformation_O;
core::Symbol_sp _sym_ConformationExplorerEntryStage_O;
core::Symbol_sp _sym_ConformationExplorerEntry_O;
core::Symbol_sp _sym_ConformationExplorer_O;
core::Symbol_sp _sym_ConformationExplorerMatch_O;
core::Symbol_sp _sym_MonomerCoordinates_O;
core::Symbol_sp _sym_ConformationCollectionEntry_O;
core::Symbol_sp _sym_ConformationCollection_O;
core::Symbol_sp _sym_SuperposableConformationCollection_O;
core::Symbol_sp _sym_FrameRecognizer_O;
core::Symbol_sp _sym_Rotamer_O;
core::Symbol_sp _sym_AtomReferenceBase_O;
core::Symbol_sp _sym_AtomReference_O;
core::Symbol_sp _sym_RepresentedEntityNameSet_O;
core::Symbol_sp _sym_CoordinateSystem_O;
core::Symbol_sp _sym_PdbMonomerConnectivity_O;
core::Symbol_sp _sym_PdbMonomerDatabase_O;
core::Symbol_sp _sym_StereoisomerAtom_O;
core::Symbol_sp _sym_StereoisomerVirtualAtom_O;
core::Symbol_sp _sym_StereoisomerAtoms_O;
core::Symbol_sp _sym_ConstitutionBond_O;
core::Symbol_sp _sym_ConstitutionAtom_O;
core::Symbol_sp _sym_ConstitutionVirtualAtom_O;
core::Symbol_sp _sym_ConstitutionAtoms_O;
core::Symbol_sp _sym_TrajectoryFrame_O;
core::Symbol_sp _sym_Trajectory_O;
core::Symbol_sp _sym_CipPrioritizer_O;
core::Symbol_sp _sym_AtomTable_O;
core::Symbol_sp _sym_EnergyComponent_O;
core::Symbol_sp _sym_EnergyStretch_O;
core::Symbol_sp _sym_EnergyAngle_O;
core::Symbol_sp _sym_EnergyDihedral_O;
core::Symbol_sp _sym_EnergyNonbond_O;
core::Symbol_sp _sym_EnergyImproperRestraint_O;
core::Symbol_sp _sym_EnergyChiralRestraint_O;
core::Symbol_sp _sym_EnergyAnchorRestraint_O;
core::Symbol_sp _sym_EnergyFixedNonbondRestraint_O;
core::Symbol_sp _sym_nonbondTerm;
core::Symbol_sp _sym_restraintAnchor;
core::Symbol_sp _sym_InteractionError;
core::Symbol_sp _sym_LinearAngleError;
core::Symbol_sp _sym_LinearDihedralError;
core::Symbol_sp _sym_LinearImproperRestraintError;
core::Symbol_sp _sym_OverlappingNonbondError;
core::Symbol_sp _sym_ComplexRestraint_O;
core::Symbol_sp _sym_RestrainedExoCyclicAtom_O;
core::Symbol_sp _sym_RestrainedPiBond_O;
core::Symbol_sp _sym_SearchStatistics_O;
core::Symbol_sp _sym_Constitution_O;
core::Symbol_sp _sym_CalculatePosition_O;
core::Symbol_sp _sym_CalculatePositionUsingInternals_O;
core::Symbol_sp _sym_CalculatePositionAlongBond_O;
core::Symbol_sp _sym_CalculatePositionRelativeToOrigin_O;
core::Symbol_sp _sym_Oligomer_O;
core::Symbol_sp _sym_OligomerPart_Base_O;
core::Symbol_sp _sym_OligomerPart_Monomer_O;
core::Symbol_sp _sym_OligomerPart_Link_O;
core::Symbol_sp _sym_Entity_O;
core::Symbol_sp _sym_Monomer_O;
core::Symbol_sp _sym_OneMonomer_O;
core::Symbol_sp _sym_MultiMonomer_O;
core::Symbol_sp _sym_CandoDatabase_O;
core::Symbol_sp _sym_Topology_O;
core::Symbol_sp _sym_StatusTracker_O;
core::Symbol_sp _sym_EntityNameSetBase_O;
core::Symbol_sp _sym_EntityNameSet_O;
core::Symbol_sp _sym_EntityNameSetWithCap_O;
core::Symbol_sp _sym_MonomerContext_O;
core::Symbol_sp _sym_Coupling_O;
core::Symbol_sp _sym_DirectionalCoupling_O;
core::Symbol_sp _sym_RingCoupling_O;
core::Symbol_sp _sym_Mate_O;
core::Symbol_sp _sym_RingClosingMate_O;
core::Symbol_sp _sym_Plug_O;
core::Symbol_sp _sym_PlugWithMates_O;
core::Symbol_sp _sym_OutPlug_O;
core::Symbol_sp _sym_InPlug_O;
core::Symbol_sp _sym_JumpPlug_O;
core::Symbol_sp _sym_RingClosingPlug_O;
core::Symbol_sp _sym_SpecificContext_O;
core::Symbol_sp _sym_SpecificContextSet_O;
core::Symbol_sp _sym_SpanningLoop_O;
core::Symbol_sp _sym_SuperposeEngine_O;
core::Symbol_sp _sym_SuperposeSelectedAtoms_O;
core::Symbol_sp _sym_superpose;
core::Symbol_sp _sym_VirtualSphere_O;
core::Symbol_sp _sym_idle;
core::Symbol_sp _sym_translate;
core::Symbol_sp _sym_rotate;
core::Symbol_sp _sym_scale;
core::Symbol_sp _sym_OneTypeRule_O;
core::Symbol_sp _sym_TypeAssignmentRules_O;
core::Symbol_sp _sym_STARsybyl_type_assignment_rulesSTAR;
core::Symbol_sp _sym_FFParameter_O;
core::Symbol_sp _sym_FFBaseDb_O;
core::Symbol_sp _sym_ChemInfoMatch_O;
core::Symbol_sp _sym_WildElementDict_O;
core::Symbol_sp _sym_ChemInfoNode_O;
core::Symbol_sp _sym_ResidueList_O;
core::Symbol_sp _sym_RootMatchNode_O;
core::Symbol_sp _sym_BondMatchNode_O;
core::Symbol_sp _sym_AtomOrBondMatchNode_O;
core::Symbol_sp _sym_BondListMatchNode_O;
core::Symbol_sp _sym_Logical_O;
core::Symbol_sp _sym_TagSet_O;
core::Symbol_sp _sym_RingTest_O;
core::Symbol_sp _sym_ResidueTest_O;
core::Symbol_sp _sym_BondTest_O;
core::Symbol_sp _sym_AntechamberBondTest_O;
core::Symbol_sp _sym_AtomTest_O;
core::Symbol_sp _sym_AntechamberFocusAtomMatch_O;
core::Symbol_sp _sym_Chain_O;
core::Symbol_sp _sym_Branch_O;
core::Symbol_sp _sym_AfterMatchBondTest_O;
core::Symbol_sp _sym_Root_O;
core::Symbol_sp _sym_SmartsRoot_O;
core::Symbol_sp _sym_AntechamberRoot_O;
core::Symbol_sp _sym_ChemInfo_O;
core::Symbol_sp _sym_FFTypesDb_O;
core::Symbol_sp _sym_FFStretch_O;
core::Symbol_sp _sym_FFStretchDb_O;
core::Symbol_sp _sym_FFAngle_O;
core::Symbol_sp _sym_FFAngleDb_O;
core::Symbol_sp _sym_FFItor_O;
core::Symbol_sp _sym_FFItorDb_O;
core::Symbol_sp _sym_FFPtor_O;
core::Symbol_sp _sym_FFPtorDb_O;
core::Symbol_sp _sym_FFNonbondCrossTermTable_O;
core::Symbol_sp _sym_FFNonbond_O;
core::Symbol_sp _sym_FFNonbondDb_O;
core::Symbol_sp _sym_FFVdw_O;
core::Symbol_sp _sym_FFVdwDb_O;
core::Symbol_sp _sym_InfoDb_O;
core::Symbol_sp _sym_ForceField_O;
core::Symbol_sp _sym_EnergyFunction_O;
core::Symbol_sp _sym_AbstractLargeSquareMatrix_O;
core::Symbol_sp _sym_FullLargeSquareMatrix_O;
core::Symbol_sp _sym_SparseLargeSquareMatrix_O;
core::Symbol_sp _sym_NumericalFunction_O;
core::Symbol_sp _sym_NVector_O;
core::Symbol_sp _sym_ReportBase_O;
core::Symbol_sp _sym_MessageReport_O;
core::Symbol_sp _sym_ForceMatchReport_O;
core::Symbol_sp _sym_StepReport_O;
core::Symbol_sp _sym_MinimizerLog_O;
core::Symbol_sp _sym_Minimizer_O;
core::Symbol_sp _sym_IterateMatter_O;
core::Symbol_sp _sym_IterateAtoms_O;
core::Symbol_sp _sym_IterateResidues_O;
core::Symbol_sp _sym_IterateBonds_O;
core::Symbol_sp _sym_IterateRestraints_O;
core::Symbol_sp _sym_Restraint_O;
core::Symbol_sp _sym_RestraintAnchor_O;
core::Symbol_sp _sym_RestraintChiral_O;
core::Symbol_sp _sym_RestraintDistance_O;
core::Symbol_sp _sym_RestraintAngle_O;
core::Symbol_sp _sym_RestraintDihedral_O;
core::Symbol_sp _sym_RestraintFixedNonbond_O;
core::Symbol_sp _sym_RestraintList_O;
core::Symbol_sp _sym_PdbReader_O;
core::Symbol_sp _sym_PdbWriter_O;
core::Symbol_sp _sym_PathMessage_O;
core::Symbol_sp _sym_AGVertex_O;
core::Symbol_sp _sym_AGEdge_O;
core::Symbol_sp _sym_RingFinder_O;
core::Symbol_sp _sym_Matter_O;
core::Symbol_sp _sym_Atom_O;
core::Symbol_sp _sym_Residue_O;
core::Symbol_sp _sym_Molecule_O;
core::Symbol_sp _sym_Aggregate_O;
core::Symbol_sp _sym_VirtualAtom_O;
core::Symbol_sp _sym_Bond_O;
core::Symbol_sp _sym_BondList_O;
} // namespace chem
namespace adapt {
core::Symbol_sp _sym_SymbolList_O;
core::Symbol_sp _sym_StringList_O;
core::Symbol_sp _sym_IterateCons_O;
core::Symbol_sp _sym_StringSet_O;
core::Symbol_sp _sym_IndexedObjectBag_O;
core::Symbol_sp _sym_QDomNode_O;
core::Symbol_sp _sym_SymbolSet_O;
core::Symbol_sp _sym_ObjectSet_O;
} // namespace adapt
namespace core {
core::Symbol_sp _sym_STARwatchDynamicBindingStackSTAR;
core::Symbol_sp _sym_symbolMacro;
core::Symbol_sp _sym_whole;
core::Symbol_sp _sym_env;
core::Symbol_sp _sym_processDeclarations;
core::Symbol_sp _sym_evaluateVerbosity;
core::Symbol_sp _sym_evaluateDepth;
core::Symbol_sp _sym_classifyLetVariablesAndDeclares;
core::Symbol_sp _sym_STAReval_with_env_hookSTAR;
core::Symbol_sp _sym_eval_with_env_default;
core::Symbol_sp _sym_dlopen;
core::Symbol_sp _sym_dlsym;
core::Symbol_sp _sym_dladdr;
core::Symbol_sp _sym_callWithVariableBound;
core::Symbol_sp _sym_instanceClassSet;
core::Symbol_sp _sym_intrusiveReferenceCountedPointer;
core::Symbol_sp _sym_sharedReferenceCountedPointer;
core::Symbol_sp _sym_mpsGarbageCollection;
core::Symbol_sp _sym_makeInvocationHistoryFrameIterator;
core::Symbol_sp _sym_STARbacktraceFrameSelectorHookSTAR;
core::Symbol_sp _sym_smartPointerDetails;
core::Symbol_sp _sym_STARfset;
core::Symbol_sp _sym_unbound;
core::Symbol_sp _sym_mapappend;
core::Symbol_sp _sym_macroexpand_default;
core::Symbol_sp _sym_sequence_start_end;
core::Symbol_sp _sym_type_to_symbol;
core::Symbol_sp _sym_gdb;
core::Symbol_sp _sym_gdbInspect;
core::Symbol_sp _sym_separatePairList;
core::Symbol_sp _sym_testMemoryError;
core::Symbol_sp _sym_functionBlockName;
core::Symbol_sp _sym_validFunctionNameP;
core::Symbol_sp _sym_pointer;
core::Symbol_sp _sym_toTaggedFixnum;
core::Symbol_sp _sym_fromTaggedFixnum;
core::Symbol_sp _sym_dumpTaggedFixnum;
core::Symbol_sp _sym_ihsBacktrace;
core::Symbol_sp _sym_ihsTop;
core::Symbol_sp _sym_ihsPrev;
core::Symbol_sp _sym_ihsNext;
core::Symbol_sp _sym_ihsFun;
core::Symbol_sp _sym_ihsEnv;
core::Symbol_sp _sym_bdsTop;
core::Symbol_sp _sym_bdsVar;
core::Symbol_sp _sym_bdsVal;
core::Symbol_sp _sym_theClibBacktraceFunctionSymbol;
core::Symbol_sp _sym_printCurrentIhsFrameEnvironment;
core::Symbol_sp _sym_rehash_size;
core::Symbol_sp _sym_rehash_threshold;
core::Symbol_sp _sym_data;
core::Symbol_sp _sym_hash_eql;
core::Symbol_sp _sym_hash_equal;
core::Symbol_sp _sym_hash_equalp;
core::Symbol_sp _sym_fixnum_number_of_bits;
core::Symbol_sp _sym_nan;
core::Symbol_sp _sym_log1p;
core::Symbol_sp _sym_integer_divide;
core::Symbol_sp _sym_integerToString;
core::Symbol_sp _sym_printUnreadableObjectFunction;
core::Symbol_sp _sym_walkToFindSourceInfo;
core::Symbol_sp _sym_lookupSourceFileInfo;
core::Symbol_sp _sym_STARmonitorRegisterSourceInfoSTAR;
core::Symbol_sp _sym_currentDir;
core::Symbol_sp _sym_file_kind;
core::Symbol_sp _sym_environmentActivationFrame;
core::Symbol_sp _sym_currentVisibleEnvironment;
core::Symbol_sp _sym_runtimeEnvironment;
core::Symbol_sp _sym_environmentList;
core::Symbol_sp _sym_environmentTypeList;
core::Symbol_sp _sym_environmentId;
core::Symbol_sp _sym_singleDispatchWrongNumberArgumentsError;
core::Symbol_sp _sym_singleDispatchTooManyArgumentsError;
core::Symbol_sp _sym_singleDispatchBadLambdaListError;
core::Symbol_sp _sym_singleDispatchMissingDispatchArgumentError;
core::Symbol_sp _sym_tooFewArguments;
core::Symbol_sp _sym_process_macro_lambda_list;
core::Symbol_sp _sym_process_single_dispatch_lambda_list;
core::Symbol_sp _sym_makeLambdaListHandler;
core::Symbol_sp _sym_processLambdaList;
core::Symbol_sp _sym_dispatchTable;
core::Symbol_sp _sym_fileColumn;
core::Symbol_sp _sym_makeStringOutputStreamFromString;
core::Symbol_sp _sym_do_write_sequence;
core::Symbol_sp _sym_streamLinenumber;
core::Symbol_sp _sym_streamColumn;
core::Symbol_sp _sym_single_dispatch_method;
core::Symbol_sp _sym_setf_documentation;
core::Symbol_sp _sym_STARcxxDocumentationSTAR;
core::Symbol_sp _sym_topLevel;
core::Symbol_sp _sym_scharSet;
core::Symbol_sp _sym_STARuseInterpreterForEvalSTAR;
core::Symbol_sp _sym_STARnotify_on_compileSTAR;
core::Symbol_sp _sym_STARtrace_startupSTAR;
core::Symbol_sp _sym_STARdebugInterpretedClosureSTAR;
core::Symbol_sp _sym_STARdebugFlowControlSTAR;
core::Symbol_sp _sym_STARdebugStartupSTAR;
core::Symbol_sp _sym__BANG_unbound_BANG_;
core::Symbol_sp _sym_bitArrayOp;
core::Symbol_sp _sym_lambdaName;
core::Symbol_sp _sym_printf;
core::Symbol_sp _sym_asin;
core::Symbol_sp _sym_asinh;
core::Symbol_sp _sym_acos;
core::Symbol_sp _sym_acosh;
core::Symbol_sp _sym_atanh;
core::Symbol_sp _sym_STARpollTicksPerGcSTAR;
core::Symbol_sp _sym__PLUS_standardReadtable_PLUS_;
core::Symbol_sp _sym_closedStream;
core::Symbol_sp _sym__PLUS_numberOfFixedArguments_PLUS_;
core::Symbol_sp _sym_STARinterpreterTraceSTAR;
core::Symbol_sp _sym_STARdebugLoadTimeValuesSTAR;
core::Symbol_sp _sym_STARdebugEvalSTAR;
core::Symbol_sp _sym_STARdebugInterpretedFunctionsSTAR;
core::Symbol_sp _sym_STARdebugMonitorSTAR;
core::Symbol_sp _sym_monitorReader;
core::Symbol_sp _sym_tsp;
core::Symbol_sp _sym_tmv;
core::Symbol_sp _sym_invocationHistoryFrame;
core::Symbol_sp _sym_size_t;
core::Symbol_sp _sym_threadInfo;
core::Symbol_sp _sym_circle_subst;
core::Symbol_sp _sym_STARsourceDatabaseSTAR;
core::Symbol_sp _sym_STARstartRunTimeSTAR;
core::Symbol_sp _sym_STARcommandLineLoadSTAR;
core::Symbol_sp _sym_STARihsCurrentSTAR;
core::Symbol_sp _sym_STARllvmFunctionNameHookSTAR;
core::Symbol_sp _sym_STARtopLevelCommandHookSTAR;
core::Symbol_sp _sym_STARloadSearchListSTAR;
core::Symbol_sp _sym_loadBitcode;
core::Symbol_sp _sym_loadSource;
core::Symbol_sp _sym_loadBundle;
core::Symbol_sp _sym_STARallCxxClassesSTAR;
core::Symbol_sp _sym_simpleProgramError;
core::Symbol_sp _sym_STARdebugReaderSTAR;
core::Symbol_sp _sym_STARenablePrintPrettySTAR;
core::Symbol_sp _sym_STARcircle_counterSTAR;
core::Symbol_sp _sym_STARcircle_stackSTAR;
core::Symbol_sp _sym_dynamicGo;
core::Symbol_sp _sym_localGo;
core::Symbol_sp _sym__PLUS_ecl_syntax_progv_list_PLUS_;
core::Symbol_sp _sym__PLUS_io_syntax_progv_list_PLUS_;
core::Symbol_sp _sym_STARprintPackageSTAR;
core::Symbol_sp _sym_STARsharpEqContextSTAR;
core::Symbol_sp _sym_STARcircleCounterSTAR;
core::Symbol_sp _sym_STARnestedErrorDepthSTAR;
core::Symbol_sp _sym_setThrowPosition;
core::Symbol_sp _sym_tooFewArgumentsError;
core::Symbol_sp _sym_tooManyArgumentsError;
core::Symbol_sp _sym_unrecognizedKeywordArgumentError;
core::Symbol_sp _sym_invalidKeywordArgumentError;
core::Symbol_sp _sym__PLUS_llvmTargetTriple_PLUS_;
core::Symbol_sp _sym__PLUS_executableName_PLUS_;
core::Symbol_sp _sym_STARcodeWalkerSTAR;
core::Symbol_sp _sym_STARcurrentSourceFileInfoSTAR;
core::Symbol_sp _sym_STARcurrentSourcePosInfoSTAR;
core::Symbol_sp _sym_STARdebugMacroexpandSTAR;
core::Symbol_sp _sym_STARenvironmentPrintingTabSTAR;
core::Symbol_sp _sym_STARenvironmentPrintingTabIncrementSTAR;
core::Symbol_sp _sym__PLUS_activationFrameNil_PLUS_;
core::Symbol_sp _sym_parse_macro;
core::Symbol_sp _sym_globalFunction;
core::Symbol_sp _sym_globalSetfFunction;
core::Symbol_sp _sym_lexicalFunction;
core::Symbol_sp _sym_declaredSpecial;
core::Symbol_sp _sym_lexical;
core::Symbol_sp _sym_STARsystem_defsetf_update_functionsSTAR;
core::Symbol_sp _sym_STARbackquote_expand_hookSTAR;
core::Symbol_sp _sym_single_dispatch_on;
core::Symbol_sp _sym_STARdocumentation_poolSTAR;
core::Symbol_sp _sym_STARexecutable_nameSTAR;
core::Symbol_sp _sym_generic;
core::Symbol_sp _sym_DOT;
core::Symbol_sp _sym_AMPva_rest;
core::Symbol_sp _sym_anonymous;
core::Symbol_sp _sym_macro;
core::Symbol_sp _sym_STARdocumentation_databaseSTAR;
core::Symbol_sp _sym___init__;
core::Symbol_sp _sym_input_stream_designator;
core::Symbol_sp _sym_STARprint_source_code_consSTAR;
core::Symbol_sp _sym_STARechoReplReadSTAR;
core::Symbol_sp _sym_eof_error_p;
core::Symbol_sp _sym_eof_value;
core::Symbol_sp _sym_start;
core::Symbol_sp _sym_end;
core::Symbol_sp _sym_preserve_whitespace;
core::Symbol_sp _sym_io;
core::Symbol_sp _sym_probe;
core::Symbol_sp _sym_newVersion;
core::Symbol_sp _sym_renameAndDelete;
core::Symbol_sp _sym_overwrite;
core::Symbol_sp _sym_supersede;
core::Symbol_sp _sym_create;
core::Symbol_sp _sym_input_stream;
core::Symbol_sp _sym_recursive_p;
core::Symbol_sp _sym_dimensions;
core::Symbol_sp _sym_element_type;
core::Symbol_sp _sym_initial_element;
core::Symbol_sp _sym_adjustable;
core::Symbol_sp _sym_object;
core::Symbol_sp _sym_okey;
core::Symbol_sp _sym_default;
core::Symbol_sp _sym_dot;
core::Symbol_sp _sym_ifDoesNotExist;
core::Symbol_sp _sym_symbolMacroletLambda;
core::Symbol_sp _sym_lambda_with_handler;
core::Symbol_sp _sym_color;
core::Symbol_sp _sym_foreach;
core::Symbol_sp _sym_STARPATHSTAR;
core::Symbol_sp _sym_STARargsSTAR;
core::Symbol_sp _sym_STARcurrent_working_directorySTAR;
core::Symbol_sp _sym_backquote;
core::Symbol_sp _sym_double_backquote;
core::Symbol_sp _sym_unquote;
core::Symbol_sp _sym_unquote_splice;
core::Symbol_sp _sym_unquote_nsplice;
core::Symbol_sp _sym_slot;
core::Symbol_sp _sym_item;
core::Symbol_sp _sym_alist;
core::Symbol_sp _sym_key;
core::Symbol_sp _sym_test_not;
core::Symbol_sp _sym_forward_referenced_class;
core::Symbol_sp _sym_instance;
core::Symbol_sp _sym_all_keys;
core::Symbol_sp _sym_cl_fixnum_bits;
core::Symbol_sp _sym_cArgumentsLimit;
core::Symbol_sp _sym_STARcommandLineArgumentsSTAR;
core::Symbol_sp _sym_STARprintVersionOnStartupSTAR;
core::Symbol_sp _sym_STARsilentStartupSTAR;
core::Symbol_sp _sym_STARcommandLineLoadEvalSequenceSTAR;
core::Symbol_sp _sym_STARcommandLineImageSTAR;
core::Symbol_sp _sym_STARclassNameHashTableSTAR;
core::Symbol_sp _sym_selectPackage;
core::Symbol_sp _sym_find_single_dispatch_generic_function;
core::Symbol_sp _sym_setf_find_single_dispatch_generic_function;
core::Symbol_sp _sym_forget_all_single_dispatch_generic_functions;
core::Symbol_sp _sym_stackMonitor;
core::Symbol_sp _sym_setupStackMonitor;
core::Symbol_sp _sym_invokeInternalDebugger;
core::Symbol_sp _sym_invokeInternalDebuggerFromGdb;
core::Symbol_sp _sym_universalErrorHandler;
core::Symbol_sp _sym_stackUsed;
core::Symbol_sp _sym_exit;
core::Symbol_sp _sym_quit;
core::Symbol_sp _sym_getline;
core::Symbol_sp _sym_isTopLevelScript;
core::Symbol_sp _sym_sourceFileName;
core::Symbol_sp _sym_sourceLineColumn;
core::Symbol_sp _sym_findFileInLispPath;
core::Symbol_sp _sym_setf_findClass;
core::Symbol_sp _sym_isAssignableTo;
core::Symbol_sp _sym_isSubClassOf;
core::Symbol_sp _sym_repr;
core::Symbol_sp _sym_debugLogOn;
core::Symbol_sp _sym_debugLogOff;
core::Symbol_sp _sym_mpi_enabled;
core::Symbol_sp _sym_mpi_rank;
core::Symbol_sp _sym_mpi_size;
core::Symbol_sp _sym_sorted;
core::Symbol_sp _sym_database_dir;
core::Symbol_sp _sym_script_dir;
core::Symbol_sp _sym_libraryPath;
core::Symbol_sp _sym_lispCodePath;
core::Symbol_sp _sym_setCurrentWorkingDirectory;
core::Symbol_sp _sym_member1;
core::Symbol_sp _sym_exportToPython;
core::Symbol_sp _sym_slBoundp;
core::Symbol_sp _sym_isNil;
core::Symbol_sp _sym_instanceRef;
core::Symbol_sp _sym_instanceSet;
core::Symbol_sp _sym_instancep;
core::Symbol_sp _sym_instanceSigSet;
core::Symbol_sp _sym_instanceSig;
core::Symbol_sp _sym_instanceClass;
core::Symbol_sp _sym_implementationClass;
core::Symbol_sp _sym_classNameAsString;
core::Symbol_sp _sym_clock_gettime_nanoseconds;
core::Symbol_sp _sym_testProfileTimer;
core::Symbol_sp _sym_structure_print_function;
core::Symbol_sp _sym_STARprint_structureSTAR;
core::Symbol_sp _sym_makeRegex;
core::Symbol_sp _sym_serialize;
core::Symbol_sp _sym_STARserializerArchiveSTAR;
core::Symbol_sp _sym_STARsharp_equal_alistSTAR;
core::Symbol_sp _sym_STARsharp_sharp_alistSTAR;
core::Symbol_sp _sym_STARconsing_dot_allowedSTAR;
core::Symbol_sp _sym_STARconsing_dotSTAR;
core::Symbol_sp _sym_STARpreserve_whitespace_pSTAR;
core::Symbol_sp _sym_STARinput_streamSTAR;
core::Symbol_sp _sym_STARbackquote_levelSTAR;
core::Symbol_sp _sym_STARstandard_readtableSTAR;
core::Symbol_sp _sym_read_list_allow_consing_dot;
core::Symbol_sp _sym_reader_read_double_quote_string;
core::Symbol_sp _sym_reader_backquoted_expression;
core::Symbol_sp _sym_sharp_backslash;
core::Symbol_sp _sym_sharp_single_quote;
core::Symbol_sp _sym_sharp_left_parenthesis;
core::Symbol_sp _sym_sharp_asterisk;
core::Symbol_sp _sym_sharp_colon;
core::Symbol_sp _sym_sharp_dot;
core::Symbol_sp _sym_sharp_b;
core::Symbol_sp _sym_sharp_o;
core::Symbol_sp _sym_sharp_x;
core::Symbol_sp _sym_sharp_r;
core::Symbol_sp _sym_sharp_c;
core::Symbol_sp _sym_sharp_a;
core::Symbol_sp _sym_sharp_s;
core::Symbol_sp _sym_sharp_p;
core::Symbol_sp _sym_sharp_plus;
core::Symbol_sp _sym_sharp_minus;
core::Symbol_sp _sym_sharp_vertical_bar;
core::Symbol_sp _sym_dispatch_macro_character;
core::Symbol_sp _sym_reader_double_quote_string;
core::Symbol_sp _sym_reader_comma_form;
core::Symbol_sp _sym_reader_list_allow_consing_dot;
core::Symbol_sp _sym_reader_error_unmatched_close_parenthesis;
core::Symbol_sp _sym_reader_quote;
core::Symbol_sp _sym_reader_skip_semicolon_comment;
core::Symbol_sp _sym_reader_feature_p;
core::Symbol_sp _sym_float_to_digits;
core::Symbol_sp _sym_defaultPathnameDefaults;
core::Symbol_sp _sym_coerceToFilename;
core::Symbol_sp _sym_coerceToFilePathname;
core::Symbol_sp _sym_pathnameTranslations;
core::Symbol_sp _sym_coerceToPhysicalPathname;
core::Symbol_sp _sym_argument_number_error;
core::Symbol_sp _sym_signalSimpleError;
core::Symbol_sp _sym_wrongTypeNthArg;
core::Symbol_sp _sym_wrongIndex;
core::Symbol_sp _sym_subclassp;
core::Symbol_sp _sym_allocateRawClass;
core::Symbol_sp _sym_inheritDefaultAllocator;
core::Symbol_sp _sym_isString;
core::Symbol_sp _sym_isArray;
core::Symbol_sp _sym_testVal;
core::Symbol_sp _sym__SHARP__BANG_;
core::Symbol_sp _sym_base_string_concatenate;
core::Symbol_sp _sym_calculateMissingCommonLispSymbols;
core::Symbol_sp _sym_copy_subarray;
core::Symbol_sp _sym_aset;
core::Symbol_sp _sym_rem_f;
core::Symbol_sp _sym_put_f;
core::Symbol_sp _sym_conditionMessage;
core::Symbol_sp _sym_put_sysprop;
core::Symbol_sp _sym_get_sysprop;
core::Symbol_sp _sym_rem_sysprop;
core::Symbol_sp _sym_bformat;
core::Symbol_sp _sym_STARbq_listSTAR;
core::Symbol_sp _sym_STARbq_appendSTAR;
core::Symbol_sp _sym_STARbq_listSTARSTAR;
core::Symbol_sp _sym_STARbq_nconcSTAR;
core::Symbol_sp _sym_STARbq_clobberableSTAR;
core::Symbol_sp _sym_STARbq_quoteSTAR;
core::Symbol_sp _sym_STARbq_quote_nilSTAR;
core::Symbol_sp _sym_bq_simplify;
core::Symbol_sp _sym_bq_remove_tokens;
core::Symbol_sp _sym_backquote_maptree;
core::Symbol_sp _sym_backquote_simplify;
core::Symbol_sp _sym_backquote_completely_process;
core::Symbol_sp _sym_backquote_process;
core::Symbol_sp _sym_backquote_bracket;
core::Symbol_sp _sym_backquote_null_or_quoted;
core::Symbol_sp _sym_backquote_attach_append;
core::Symbol_sp _sym_backquote_attach_conses;
core::Symbol_sp _sym_backquote_remove_tokens;
core::Symbol_sp _sym_backquote_frob;
core::Symbol_sp _sym_backquote_splicing_frob;
core::Symbol_sp _sym_backquote_append;
core::Symbol_sp _sym_quasiquote;
core::Symbol_sp _sym_STARbq_simplifySTAR;
core::Symbol_sp _sym_record_cons;
core::Symbol_sp _sym_record_field;
core::Symbol_sp _sym_set_record_field;
core::Symbol_sp _sym_rem_record_field;
core::Symbol_sp _sym_ensure_documentation;
core::Symbol_sp _sym_STARsharp_equal_final_tableSTAR;
core::Symbol_sp _sym_STARsharp_equal_temp_tableSTAR;
core::Symbol_sp _sym_STARsharp_equal_repl_tableSTAR;
core::Symbol_sp _sym_ensureSingleDispatchGenericFunction;
core::Symbol_sp _sym_ensureSingleDispatchMethod;
core::Symbol_sp _sym_structure_include;
core::Symbol_sp _sym_structure_slot_descriptions;
core::Symbol_sp _sym_structureRef;
core::Symbol_sp _sym_structureSet;
core::Symbol_sp _sym_makeStructure;
core::Symbol_sp _sym_structurep;
core::Symbol_sp _sym_structureSubtypep;
core::Symbol_sp _sym_setfElt;
core::Symbol_sp _sym_eltSet;
core::Symbol_sp _sym_setfSubseq;
core::Symbol_sp _sym_make_vector;
core::Symbol_sp _sym_adjustVector;
core::Symbol_sp _sym_loadTimeValuesIds;
core::Symbol_sp _sym_loadTimeValueArray;
core::Symbol_sp _sym_lookupLoadTimeValue;
core::Symbol_sp _sym_lookupLoadTimeSymbol;
core::Symbol_sp _sym_setRunTimeValuesVector;
core::Symbol_sp _sym_ExternalObject_O;
core::Symbol_sp _sym_ForeignData_O;
core::Symbol_sp _sym_LambdaListHandler_O;
core::Symbol_sp _sym_LightUserData_O;
core::Symbol_sp _sym_UserData_O;
core::Symbol_sp _sym_LoadTimeValues_O;
core::Symbol_sp _sym_MultiStringBuffer_O;
core::Symbol_sp _sym_PosixTime_O;
core::Symbol_sp _sym_PosixTimeDuration_O;
core::Symbol_sp _sym_RegexMatch_O;
core::Symbol_sp _sym_Regex_O;
core::Symbol_sp _sym_SingleDispatchMethod_O;
core::Symbol_sp _sym_SmallMultimap_O;
core::Symbol_sp _sym_WeakKeyMapping_O;
core::Symbol_sp _sym_WeakPointer_O;
core::Symbol_sp _sym_Instance_O;
core::Symbol_sp _sym_WrappedPointer_O;
core::Symbol_sp _sym_ArrayDisplaced_O;
core::Symbol_sp _sym_ArrayObjects_O;
core::Symbol_sp _sym_HashTableEqualp_O;
core::Symbol_sp _sym_SingleDispatchEffectiveMethodFunction_O;
core::Symbol_sp _sym_SingleDispatchGenericFunction_O;
core::Symbol_sp _sym_SpecialForm_O;
core::Symbol_sp _sym_SexpLoadArchive_O;
core::Symbol_sp _sym_SexpSaveArchive_O;
core::Symbol_sp _sym_VectorDisplaced_O;
core::Symbol_sp _sym_CxxClass_O;
core::Symbol_sp _sym_ForwardReferencedClass_O;
core::Symbol_sp _sym_StrWithFillPtr_O;
core::Symbol_sp _sym_InvocationHistoryFrameIterator_O;
core::Symbol_sp _sym_Reader_O;
core::Symbol_sp _sym_HashTableEqual_O;
core::Symbol_sp _sym_Binder_O;
core::Symbol_sp _sym_Path_O;
core::Symbol_sp _sym_DirectoryIterator_O;
core::Symbol_sp _sym_RecursiveDirectoryIterator_O;
core::Symbol_sp _sym_DirectoryEntry_O;
core::Symbol_sp _sym_FileStatus_O;
core::Symbol_sp _sym_IntArray_O;
core::Symbol_sp _sym_Iterator_O;
core::Symbol_sp _sym_IOFileStream_O;
core::Symbol_sp _sym_IOStreamStream_O;
core::Symbol_sp _sym_StringOutputStream_O;
core::Symbol_sp _sym_StringInputStream_O;
core::Symbol_sp _sym_CandoException_O;
core::Symbol_sp _sym_VaList_dummy_O;
core::Symbol_sp _sym_Pointer_O;
core::Symbol_sp _sym_Environment_O;
core::Symbol_sp _sym_LexicalEnvironment_O;
core::Symbol_sp _sym_RuntimeVisibleEnvironment_O;
core::Symbol_sp _sym_ValueEnvironment_O;
core::Symbol_sp _sym_FunctionValueEnvironment_O;
core::Symbol_sp _sym_CompileTimeEnvironment_O;
core::Symbol_sp _sym_UnwindProtectEnvironment_O;
core::Symbol_sp _sym_BlockEnvironment_O;
core::Symbol_sp _sym_CatchEnvironment_O;
core::Symbol_sp _sym_FunctionContainerEnvironment_O;
core::Symbol_sp _sym_TagbodyEnvironment_O;
core::Symbol_sp _sym_MacroletEnvironment_O;
core::Symbol_sp _sym_SymbolMacroletEnvironment_O;
core::Symbol_sp _sym_StackValueEnvironment_O;
core::Symbol_sp _sym_GlueEnvironment_O;
core::Symbol_sp _sym_ActivationFrame_O;
core::Symbol_sp _sym_ValueFrame_O;
core::Symbol_sp _sym_FunctionFrame_O;
core::Symbol_sp _sym_TagbodyFrame_O;
core::Symbol_sp _sym_Metaobject_O;
core::Symbol_sp _sym_Specializer_O;
core::Symbol_sp _sym_WeakHashTable_O;
core::Symbol_sp _sym_WeakKeyHashTable_O;
core::Symbol_sp _sym_SourceFileInfo_O;
core::Symbol_sp _sym_SourcePosInfo_O;
core::Symbol_sp _sym_SourceManager_O;
core::Symbol_sp _sym_CxxObject_O;
core::Symbol_sp _sym_Record_O;
core::Symbol_sp _sym_HashTableEql_O;
core::Symbol_sp _sym_HashTableEq_O;
core::Symbol_sp _sym_VectorObjects_O;
core::Symbol_sp _sym_VectorObjectsWithFillPtr_O;
core::Symbol_sp _sym_SymbolToEnumConverter_O;
core::Symbol_sp _sym_SNode_O;
core::Symbol_sp _sym_LeafSNode_O;
core::Symbol_sp _sym_BranchSNode_O;
core::Symbol_sp _sym_Archive_O;
core::Symbol_sp _sym_LoadArchive_O;
core::Symbol_sp _sym_SaveArchive_O;
core::Symbol_sp _sym_SmallMap_O;
} // namespace core
namespace cl {
core::Symbol_sp _sym_case;
core::Symbol_sp _sym_otherwise;
core::Symbol_sp _sym_ignore;
core::Symbol_sp _sym_multipleValueSetq;
core::Symbol_sp _sym_prog1;
core::Symbol_sp _sym_block;
core::Symbol_sp _sym_throw;
core::Symbol_sp _sym_apply;
core::Symbol_sp _sym_funcall;
core::Symbol_sp _sym_compute_applicable_methods;
core::Symbol_sp _sym_no_applicable_method;
core::Symbol_sp _sym_standardGenericFunction;
core::Symbol_sp _sym_sleep;
core::Symbol_sp _sym_let;
core::Symbol_sp _sym_letSTAR;
core::Symbol_sp _sym_return_from;
core::Symbol_sp _sym_catch;
core::Symbol_sp _sym_load_time_value;
core::Symbol_sp _sym_setq;
core::Symbol_sp _sym_eval_when;
core::Symbol_sp _sym_locally;
core::Symbol_sp _sym_symbol_macrolet;
core::Symbol_sp _sym_flet;
core::Symbol_sp _sym_macrolet;
core::Symbol_sp _sym_tagbody;
core::Symbol_sp _sym_multiple_value_call;
core::Symbol_sp _sym_the;
core::Symbol_sp _sym_go;
core::Symbol_sp _sym_multiple_value_prog1;
core::Symbol_sp _sym_if;
core::Symbol_sp _sym_unwind_protect;
core::Symbol_sp _sym_labels;
core::Symbol_sp _sym_progv;
core::Symbol_sp _sym_setf;
core::Symbol_sp _sym_read;
core::Symbol_sp _sym_read_preserving_whitespace;
core::Symbol_sp _sym_read_delimited_list;
core::Symbol_sp _sym_every;
core::Symbol_sp _sym_some;
core::Symbol_sp _sym_notevery;
core::Symbol_sp _sym_notany;
core::Symbol_sp _sym_mapcar;
core::Symbol_sp _sym_mapc;
core::Symbol_sp _sym_maplist;
core::Symbol_sp _sym_mapl;
core::Symbol_sp _sym_mapcan;
core::Symbol_sp _sym_mapcon;
core::Symbol_sp _sym_classOf;
core::Symbol_sp _sym_identity;
core::Symbol_sp _sym_constantp;
core::Symbol_sp _sym_ash;
core::Symbol_sp _sym_specialOperatorP;
core::Symbol_sp _sym_macroFunction;
core::Symbol_sp _sym_gensym;
core::Symbol_sp _sym_type_of;
core::Symbol_sp _sym_fdefinition;
core::Symbol_sp _sym_fboundp;
core::Symbol_sp _sym_fmakunbound;
core::Symbol_sp _sym_values_list;
core::Symbol_sp _sym_make_hash_table;
core::Symbol_sp _sym_maphash;
core::Symbol_sp _sym_clrhash;
core::Symbol_sp _sym_remhash;
core::Symbol_sp _sym_max;
core::Symbol_sp _sym_min;
core::Symbol_sp _sym_zerop;
core::Symbol_sp _sym__LT_;
core::Symbol_sp _sym__GT_;
core::Symbol_sp _sym__LE_;
core::Symbol_sp _sym__GE_;
core::Symbol_sp _sym__EQ_;
core::Symbol_sp _sym__NE_;
core::Symbol_sp _sym__PLUS_;
core::Symbol_sp _sym__TIMES_;
core::Symbol_sp _sym__MINUS_;
core::Symbol_sp _sym_logand;
core::Symbol_sp _sym_logior;
core::Symbol_sp _sym_logandc1;
core::Symbol_sp _sym_logandc2;
core::Symbol_sp _sym_logeqv;
core::Symbol_sp _sym_lognand;
core::Symbol_sp _sym_lognor;
core::Symbol_sp _sym_lognot;
core::Symbol_sp _sym_logorc1;
core::Symbol_sp _sym_logorc2;
core::Symbol_sp _sym_logxor;
core::Symbol_sp _sym_sqrt;
core::Symbol_sp _sym_cos;
core::Symbol_sp _sym_tan;
core::Symbol_sp _sym_sinh;
core::Symbol_sp _sym_cosh;
core::Symbol_sp _sym_tanh;
core::Symbol_sp _sym_conjugate;
core::Symbol_sp _sym_log;
core::Symbol_sp _sym_expt;
core::Symbol_sp _sym_exp;
core::Symbol_sp _sym_getUniversalTime;
core::Symbol_sp _sym_leastPositiveSingleFloat;
core::Symbol_sp _sym_leastNegativeSingleFloat;
core::Symbol_sp _sym_mostPositiveSingleFloat;
core::Symbol_sp _sym_mostNegativeSingleFloat;
core::Symbol_sp _sym_leastPositiveShortFloat;
core::Symbol_sp _sym_leastNegativeShortFloat;
core::Symbol_sp _sym_mostPositiveShortFloat;
core::Symbol_sp _sym_mostNegativeShortFloat;
core::Symbol_sp _sym_leastPositiveDoubleFloat;
core::Symbol_sp _sym_leastNegativeDoubleFloat;
core::Symbol_sp _sym_mostPositiveDoubleFloat;
core::Symbol_sp _sym_mostNegativeDoubleFloat;
core::Symbol_sp _sym_leastPositiveLongFloat;
core::Symbol_sp _sym_leastNegativeLongFloat;
core::Symbol_sp _sym_mostPositiveLongFloat;
core::Symbol_sp _sym_mostNegativeLongFloat;
core::Symbol_sp _sym_leastNegativeNormalizedSingleFloat;
core::Symbol_sp _sym_leastNegativeNormalizedShortFloat;
core::Symbol_sp _sym_leastNegativeNormalizedDoubleFloat;
core::Symbol_sp _sym_leastNegativeNormalizedLongFloat;
core::Symbol_sp _sym_leastPositiveNormalizedSingleFloat;
core::Symbol_sp _sym_leastPositiveNormalizedShortFloat;
core::Symbol_sp _sym_leastPositiveNormalizedDoubleFloat;
core::Symbol_sp _sym_leastPositiveNormalizedLongFloat;
core::Symbol_sp _sym_pi;
core::Symbol_sp _sym_gcd;
core::Symbol_sp _sym_lcm;
core::Symbol_sp _sym_numerator;
core::Symbol_sp _sym_denominator;
core::Symbol_sp _sym_floor;
core::Symbol_sp _sym_ceiling;
core::Symbol_sp _sym_truncate;
core::Symbol_sp _sym_round;
core::Symbol_sp _sym_mod;
core::Symbol_sp _sym_rem;
core::Symbol_sp _sym_decodeFloat;
core::Symbol_sp _sym_scaleFloat;
core::Symbol_sp _sym_floatSign;
core::Symbol_sp _sym_floatDigits;
core::Symbol_sp _sym_floatPrecision;
core::Symbol_sp _sym_integer_decode_float;
core::Symbol_sp _sym_complex;
core::Symbol_sp _sym_realpart;
core::Symbol_sp _sym_imagpart;
core::Symbol_sp _sym_print;
core::Symbol_sp _sym_prin1;
core::Symbol_sp _sym_princ;
core::Symbol_sp _sym_truename;
core::Symbol_sp _sym_probe_file;
core::Symbol_sp _sym_deleteFile;
core::Symbol_sp _sym_file_write_date;
core::Symbol_sp _sym_userHomedirPathname;
core::Symbol_sp _sym_revappend;
core::Symbol_sp _sym_nreconc;
core::Symbol_sp _sym_listSTAR;
core::Symbol_sp _sym_butlast;
core::Symbol_sp _sym_nbutlast;
core::Symbol_sp _sym_nthcdr;
core::Symbol_sp _sym_copyList;
core::Symbol_sp _sym_last;
core::Symbol_sp _sym_filePosition;
core::Symbol_sp _sym_readSequence;
core::Symbol_sp _sym_read_from_string;
core::Symbol_sp _sym_read_line;
core::Symbol_sp _sym_terpri;
core::Symbol_sp _sym_freshLine;
core::Symbol_sp _sym_writeString;
core::Symbol_sp _sym_writeLine;
core::Symbol_sp _sym_writeChar;
core::Symbol_sp _sym_clearInput;
core::Symbol_sp _sym_clearOutput;
core::Symbol_sp _sym_readByte;
core::Symbol_sp _sym_peekChar;
core::Symbol_sp _sym_readChar;
core::Symbol_sp _sym_readCharNoHang;
core::Symbol_sp _sym_force_output;
core::Symbol_sp _sym_finish_output;
core::Symbol_sp _sym_listen;
core::Symbol_sp _sym_unread_char;
core::Symbol_sp _sym_makeStringOutputStream;
core::Symbol_sp _sym_writeByte;
core::Symbol_sp _sym_interactive_stream_p;
core::Symbol_sp _sym_streamp;
core::Symbol_sp _sym_close;
core::Symbol_sp _sym_get_output_stream_string;
core::Symbol_sp _sym_synonymStreamSymbol;
core::Symbol_sp _sym_boole_1;
core::Symbol_sp _sym_boole_2;
core::Symbol_sp _sym_boole_and;
core::Symbol_sp _sym_boole_andc1;
core::Symbol_sp _sym_boole_andc2;
core::Symbol_sp _sym_boole_c1;
core::Symbol_sp _sym_boole_c2;
core::Symbol_sp _sym_boole_clr;
core::Symbol_sp _sym_boole_eqv;
core::Symbol_sp _sym_boole_ior;
core::Symbol_sp _sym_boole_nand;
core::Symbol_sp _sym_boole_nor;
core::Symbol_sp _sym_boole_orc1;
core::Symbol_sp _sym_boole_orc2;
core::Symbol_sp _sym_boole_set;
core::Symbol_sp _sym_boole_xor;
core::Symbol_sp _sym_printNotReadableObject;
core::Symbol_sp _sym_provide;
core::Symbol_sp _sym_seriousCondition;
core::Symbol_sp _sym_warn;
core::Symbol_sp _sym_programError;
core::Symbol_sp _sym_cellError;
core::Symbol_sp _sym_unboundVariable;
core::Symbol_sp _sym_unboundSlot;
core::Symbol_sp _sym_undefinedFunction;
core::Symbol_sp _sym_package_error;
core::Symbol_sp _sym_arithmeticError;
core::Symbol_sp _sym_floatingPointOverflow;
core::Symbol_sp _sym_floatingPointInexact;
core::Symbol_sp _sym_floatingPointInvalidOperation;
core::Symbol_sp _sym_floatingPointUnderflow;
core::Symbol_sp _sym_divisionByZero;
core::Symbol_sp _sym_printNotReadable;
core::Symbol_sp _sym_streamError;
core::Symbol_sp _sym_endOfFile;
core::Symbol_sp _sym_parseError;
core::Symbol_sp _sym_readerError;
core::Symbol_sp _sym_STARrandom_stateSTAR;
core::Symbol_sp _sym_simpleError;
core::Symbol_sp _sym_storageCondition;
core::Symbol_sp _sym_simpleCondition;
core::Symbol_sp _sym_simpleWarning;
core::Symbol_sp _sym_warning;
core::Symbol_sp _sym_styleWarning;
core::Symbol_sp _sym_asin;
core::Symbol_sp _sym_acos;
core::Symbol_sp _sym_asinh;
core::Symbol_sp _sym_acosh;
core::Symbol_sp _sym_atanh;
core::Symbol_sp _sym_dynamic_extent;
core::Symbol_sp _sym_ftype;
core::Symbol_sp _sym_boole;
core::Symbol_sp _sym_callArgumentsLimit;
core::Symbol_sp _sym_arrayDimensionLimit;
core::Symbol_sp _sym_arrayTotalSizeLimit;
core::Symbol_sp _sym_lambdaParametersLimit;
core::Symbol_sp _sym_schar;
core::Symbol_sp _sym_fixnum;
core::Symbol_sp _sym_nil;
core::Symbol_sp _sym_stream_element_type;
core::Symbol_sp _sym_stream_external_format;
core::Symbol_sp _sym_open_stream_p;
core::Symbol_sp _sym_write_sequence;
core::Symbol_sp _sym_read_sequence;
core::Symbol_sp _sym_file_string_length;
core::Symbol_sp _sym_echo_stream_input_stream;
core::Symbol_sp _sym_echo_stream_output_stream;
core::Symbol_sp _sym_concatenated_stream_streams;
core::Symbol_sp _sym_synonym_stream_symbol;
core::Symbol_sp _sym_broadcast_stream_streams;
core::Symbol_sp _sym_getOutputStreamString;
core::Symbol_sp _sym_elt;
core::Symbol_sp _sym_callNextMethod;
core::Symbol_sp _sym_nextMethodP;
core::Symbol_sp _sym_internalTimeUnitsPerSecond;
core::Symbol_sp _sym_getInternalRealTime;
core::Symbol_sp _sym_getInternalRunTime;
core::Symbol_sp _sym_logicalPathnameTranslations;
core::Symbol_sp _sym_set;
core::Symbol_sp _sym_restartName;
core::Symbol_sp _sym_position;
core::Symbol_sp _sym_compileFile;
core::Symbol_sp _sym_first;
core::Symbol_sp _sym_float;
core::Symbol_sp _sym_logical_pathname;
core::Symbol_sp _sym_pathnamep;
core::Symbol_sp _sym_STARloadPathnameSTAR;
core::Symbol_sp _sym_STARloadTruenameSTAR;
core::Symbol_sp _sym_makeArray;
core::Symbol_sp _sym_makePathname;
core::Symbol_sp _sym_mismatch;
core::Symbol_sp _sym_SignedByte;
core::Symbol_sp _sym_UnsignedByte;
core::Symbol_sp _sym_Bit;
core::Symbol_sp _sym_STARdefaultPathnameDefaultsSTAR;
core::Symbol_sp _sym_simpleTypeError;
core::Symbol_sp _sym_MultipleValuesLimit;
core::Symbol_sp _sym_keywordp;
core::Symbol_sp _sym_null;
core::Symbol_sp _sym_endp;
core::Symbol_sp _sym_symbolp;
core::Symbol_sp _sym_atom;
core::Symbol_sp _sym_consp;
core::Symbol_sp _sym_listp;
core::Symbol_sp _sym_numberp;
core::Symbol_sp _sym_integerp;
core::Symbol_sp _sym_rationalp;
core::Symbol_sp _sym_floatp;
core::Symbol_sp _sym_realp;
core::Symbol_sp _sym_complexp;
core::Symbol_sp _sym_character;
core::Symbol_sp _sym_base_char;
core::Symbol_sp _sym_single_float;
core::Symbol_sp _sym_characterp;
core::Symbol_sp _sym_stringp;
core::Symbol_sp _sym_bit_vector_p;
core::Symbol_sp _sym_vectorp;
core::Symbol_sp _sym_simple_vector_p;
core::Symbol_sp _sym_simple_string_p;
core::Symbol_sp _sym_simple_bit_vector_p;
core::Symbol_sp _sym_arrayp;
core::Symbol_sp _sym_packagep;
core::Symbol_sp _sym_functionp;
core::Symbol_sp _sym_compiled_function_p;
core::Symbol_sp _sym_hash_table_p;
core::Symbol_sp _sym__DIVIDE_;
core::Symbol_sp _sym_typep;
core::Symbol_sp _sym_type;
core::Symbol_sp _sym_step;
core::Symbol_sp _sym_speed;
core::Symbol_sp _sym_space;
core::Symbol_sp _sym_sin;
core::Symbol_sp _sym_safety;
core::Symbol_sp _sym_restart_bind;
core::Symbol_sp _sym_restart;
core::Symbol_sp _sym_describe;
core::Symbol_sp _sym_disassemble;
core::Symbol_sp _sym_rename_file;
core::Symbol_sp _sym_random;
core::Symbol_sp _sym_optimize;
core::Symbol_sp _sym_two_way_stream_input_stream;
core::Symbol_sp _sym_two_way_stream_output_stream;
core::Symbol_sp _sym_two_way_stream;
core::Symbol_sp _sym_make_two_way_stream;
core::Symbol_sp _sym_make_synonym_stream;
core::Symbol_sp _sym_invoke_restart;
core::Symbol_sp _sym_get;
core::Symbol_sp _sym_find_restart;
core::Symbol_sp _sym_fill_pointer;
core::Symbol_sp _sym_directory;
core::Symbol_sp _sym_defun;
core::Symbol_sp _sym_debug;
core::Symbol_sp _sym_count;
core::Symbol_sp _sym_compute_restarts;
core::Symbol_sp _sym_write;
core::Symbol_sp _sym_STARreadDefaultFloatFormatSTAR;
core::Symbol_sp _sym_STARprint_baseSTAR;
core::Symbol_sp _sym_STARprint_levelSTAR;
core::Symbol_sp _sym_STARprint_lengthSTAR;
core::Symbol_sp _sym_STARprint_radixSTAR;
core::Symbol_sp _sym_STARprint_caseSTAR;
core::Symbol_sp _sym_STARprint_gensymSTAR;
core::Symbol_sp _sym_STARprint_arraySTAR;
core::Symbol_sp _sym_STARprint_readablySTAR;
core::Symbol_sp _sym_STARprint_escapeSTAR;
core::Symbol_sp _sym_STARprint_circleSTAR;
core::Symbol_sp _sym_STARprint_linesSTAR;
core::Symbol_sp _sym_STARprint_right_marginSTAR;
core::Symbol_sp _sym_STARprint_prettySTAR;
core::Symbol_sp _sym_STARprint_miser_widthSTAR;
core::Symbol_sp _sym_STARprint_pprint_dispatchSTAR;
core::Symbol_sp _sym_STARdebuggerHookSTAR;
core::Symbol_sp _sym_break;
core::Symbol_sp _sym_STARbreakOnSignalsSTAR;
core::Symbol_sp _sym_typeError;
core::Symbol_sp _sym_printObject;
core::Symbol_sp _sym_controlError;
core::Symbol_sp _sym_fileError;
core::Symbol_sp _sym_satisfies;
core::Symbol_sp _sym_T;
core::Symbol_sp _sym_method;
core::Symbol_sp _sym_generic_function;
core::Symbol_sp _sym_cond;
core::Symbol_sp _sym_stream;
core::Symbol_sp _sym_boolean;
core::Symbol_sp _sym_keyword;
core::Symbol_sp _sym_array;
core::Symbol_sp _sym_simple_array;
core::Symbol_sp _sym_vector;
core::Symbol_sp _sym_simple_vector;
core::Symbol_sp _sym_input_stream_p;
core::Symbol_sp _sym_output_stream_p;
core::Symbol_sp _sym_STARstandard_inputSTAR;
core::Symbol_sp _sym_STARstandard_outputSTAR;
core::Symbol_sp _sym_STARerror_outputSTAR;
core::Symbol_sp _sym_STARtrace_outputSTAR;
core::Symbol_sp _sym_STARdebug_ioSTAR;
core::Symbol_sp _sym_STARquery_ioSTAR;
core::Symbol_sp _sym_STARterminal_ioSTAR;
core::Symbol_sp _sym_STARgensym_counterSTAR;
core::Symbol_sp _sym_standard_char;
core::Symbol_sp _sym_extended_char;
core::Symbol_sp _sym_special;
core::Symbol_sp _sym_nconc;
core::Symbol_sp _sym_cadr;
core::Symbol_sp _sym_STARmacroexpand_hookSTAR;
core::Symbol_sp _sym_STARread_baseSTAR;
core::Symbol_sp _sym_compile;
core::Symbol_sp _sym_load;
core::Symbol_sp _sym_eval;
core::Symbol_sp _sym_STARread_evalSTAR;
core::Symbol_sp _sym_define_modify_macro;
core::Symbol_sp _sym_destructuring_bind;
core::Symbol_sp _sym_deftype;
core::Symbol_sp _sym_define_method_combination;
core::Symbol_sp _sym_defsetf;
core::Symbol_sp _sym_AMPwhole;
core::Symbol_sp _sym_AMPenvironment;
core::Symbol_sp _sym_AMPoptional;
core::Symbol_sp _sym_AMPkey;
core::Symbol_sp _sym_AMPallow_other_keys;
core::Symbol_sp _sym_AMPaux;
core::Symbol_sp _sym_AMPrest;
core::Symbol_sp _sym_AMPbody;
core::Symbol_sp _sym_integer;
core::Symbol_sp _sym_sequence;
core::Symbol_sp _sym_declare;
core::Symbol_sp _sym_variable;
core::Symbol_sp _sym_bit;
core::Symbol_sp _sym_STARreadtableSTAR;
core::Symbol_sp _sym_and;
core::Symbol_sp _sym_or;
core::Symbol_sp _sym_car;
core::Symbol_sp _sym_cdr;
core::Symbol_sp _sym_dotimes;
core::Symbol_sp _sym_dolist;
core::Symbol_sp _sym_do;
core::Symbol_sp _sym_package;
core::Symbol_sp _sym_aref;
core::Symbol_sp _sym_nth;
core::Symbol_sp _sym_append;
core::Symbol_sp _sym_gethash;
core::Symbol_sp _sym_hash_table;
core::Symbol_sp _sym_STARfeaturesSTAR;
core::Symbol_sp _sym_STARload_printSTAR;
core::Symbol_sp _sym_STARload_verboseSTAR;
core::Symbol_sp _sym_lambda;
core::Symbol_sp _sym_symbol;
core::Symbol_sp _sym_STARpackageSTAR;
core::Symbol_sp _sym_STARmodulesSTAR;
core::Symbol_sp _sym_progn;
core::Symbol_sp _sym_quote;
core::Symbol_sp _sym_function;
core::Symbol_sp _sym_slot_value;
core::Symbol_sp _sym_values;
core::Symbol_sp _sym_list;
core::Symbol_sp _sym_standard_class;
core::Symbol_sp _sym_rest;
core::Symbol_sp _sym_most_negative_fixnum;
core::Symbol_sp _sym_most_positive_fixnum;
core::Symbol_sp _sym_array_rank_limit;
core::Symbol_sp _sym_char_code_limit;
core::Symbol_sp _sym_apropos;
core::Symbol_sp _sym_export;
core::Symbol_sp _sym_intern;
core::Symbol_sp _sym_findClass;
core::Symbol_sp _sym_error;
core::Symbol_sp _sym_cerror;
core::Symbol_sp _sym_not;
core::Symbol_sp _sym_sort;
core::Symbol_sp _sym_macroexpand_1;
core::Symbol_sp _sym_macroexpand;
core::Symbol_sp _sym_acons;
core::Symbol_sp _sym_assoc;
core::Symbol_sp _sym_member;
core::Symbol_sp _sym_find_package;
core::Symbol_sp _sym_copyTree;
core::Symbol_sp _sym_eq;
core::Symbol_sp _sym_eql;
core::Symbol_sp _sym_equal;
core::Symbol_sp _sym_equalp;
core::Symbol_sp _sym_setMacroCharacter;
core::Symbol_sp _sym_setDispatchMacroCharacter;
core::Symbol_sp _sym_getDispatchMacroCharacter;
core::Symbol_sp _sym_pathname;
core::Symbol_sp _sym_mergePathnames;
core::Symbol_sp _sym_wildPathnameP;
core::Symbol_sp _sym_make_pathname;
core::Symbol_sp _sym_pathnameHost;
core::Symbol_sp _sym_pathnameDevice;
core::Symbol_sp _sym_pathnameDirectory;
core::Symbol_sp _sym_pathnameName;
core::Symbol_sp _sym_pathnameType;
core::Symbol_sp _sym_pathnameVersion;
core::Symbol_sp _sym_pathnameMatchP;
core::Symbol_sp _sym_translatePathname;
core::Symbol_sp _sym_translateLogicalPathname;
core::Symbol_sp _sym_namestring;
core::Symbol_sp _sym_parseNamestring;
core::Symbol_sp _sym_fileNamestring;
core::Symbol_sp _sym_directoryNamestring;
core::Symbol_sp _sym_hostNamestring;
core::Symbol_sp _sym_enoughNamestring;
core::Symbol_sp _sym_package_use_list;
core::Symbol_sp _sym_gentemp;
core::Symbol_sp _sym_makePackage;
core::Symbol_sp _sym_listAllPackages;
core::Symbol_sp _sym_use_package;
core::Symbol_sp _sym_unuse_package;
core::Symbol_sp _sym_package_shadowing_symbols;
core::Symbol_sp _sym_import;
core::Symbol_sp _sym_shadow;
core::Symbol_sp _sym_shadowing_import;
core::Symbol_sp _sym_findSymbol;
core::Symbol_sp _sym_unintern;
core::Symbol_sp _sym_condition;
core::Symbol_sp _sym_defvar;
core::Symbol_sp _sym_defconstant;
core::Symbol_sp _sym_defparameter;
core::Symbol_sp _sym_intersection;
core::Symbol_sp _sym_union;
core::Symbol_sp _sym_remove;
core::Symbol_sp _sym_pprint_dispatch;
core::Symbol_sp _sym_fileStream;
core::Symbol_sp _sym_make_list;
core::Symbol_sp _sym_cons;
core::Symbol_sp _sym_getf;
core::Symbol_sp _sym_make_symbol;
core::Symbol_sp _sym_symbolName;
core::Symbol_sp _sym_symbolValue;
core::Symbol_sp _sym_symbolPackage;
core::Symbol_sp _sym_symbolFunction;
core::Symbol_sp _sym_boundp;
core::Symbol_sp _sym_makeCondition;
core::Symbol_sp _sym_format;
core::Symbol_sp _sym_documentation;
core::Symbol_sp _sym_copyStructure;
core::Symbol_sp _sym_char_code;
core::Symbol_sp _sym_code_char;
core::Symbol_sp _sym_char_int;
core::Symbol_sp _sym_name_char;
core::Symbol_sp _sym_char_name;
core::Symbol_sp _sym_alpha_char_p;
core::Symbol_sp _sym_standard_char_p;
core::Symbol_sp _sym_charUpcase;
core::Symbol_sp _sym_charDowncase;
core::Symbol_sp _sym_char_LT_;
core::Symbol_sp _sym_char_GT_;
core::Symbol_sp _sym_char_LE_;
core::Symbol_sp _sym_char_GE_;
core::Symbol_sp _sym_char_NE_;
core::Symbol_sp _sym_char_EQ_;
core::Symbol_sp _sym_charLessp;
core::Symbol_sp _sym_charGreaterp;
core::Symbol_sp _sym_charNotGreaterp;
core::Symbol_sp _sym_charNotLessp;
core::Symbol_sp _sym_charNotEqual;
core::Symbol_sp _sym_charEqual;
core::Symbol_sp _sym_digitCharP;
core::Symbol_sp _sym_string;
core::Symbol_sp _sym_string_upcase;
core::Symbol_sp _sym_string_downcase;
core::Symbol_sp _sym_nstring_upcase;
core::Symbol_sp _sym_nstring_downcase;
core::Symbol_sp _sym_stringTrim;
core::Symbol_sp _sym_stringLeftTrim;
core::Symbol_sp _sym_stringRightTrim;
core::Symbol_sp _sym_char;
core::Symbol_sp _sym_string_EQ_;
core::Symbol_sp _sym_string_NE_;
core::Symbol_sp _sym_string_LT_;
core::Symbol_sp _sym_string_GT_;
core::Symbol_sp _sym_string_LE_;
core::Symbol_sp _sym_string_GE_;
core::Symbol_sp _sym_string_equal;
core::Symbol_sp _sym_string_not_equal;
core::Symbol_sp _sym_string_lessp;
core::Symbol_sp _sym_string_greaterp;
core::Symbol_sp _sym_string_not_greaterp;
core::Symbol_sp _sym_string_not_lessp;
core::Symbol_sp _sym_make_string;
core::Symbol_sp _sym_parseInteger;
core::Symbol_sp _sym_make_sequence;
core::Symbol_sp _sym_reverse;
core::Symbol_sp _sym_nreverse;
core::Symbol_sp _sym_subseq;
core::Symbol_sp _sym_copySeq;
core::Symbol_sp _sym_length;
core::Symbol_sp _sym_subtypep;
core::Symbol_sp _sym_vectorPush;
core::Symbol_sp _sym_vectorPushExtend;
core::Symbol_sp _sym_STARread_suppressSTAR;
core::Symbol_sp _sym_RandomState_O;
core::Symbol_sp _sym_ReadTable_O;
core::Symbol_sp _sym_StructureObject_O;
core::Symbol_sp _sym_Null_O;
core::Symbol_sp _sym_StructureClass_O;
core::Symbol_sp _sym_StandardClass_O;
core::Symbol_sp _sym_BuiltInClass_O;
core::Symbol_sp _sym_Package_O;
core::Symbol_sp _sym_Pathname_O;
core::Symbol_sp _sym_LogicalPathname_O;
core::Symbol_sp _sym_Character_dummy_O;
core::Symbol_sp _sym_Stream_O;
core::Symbol_sp _sym_FileStream_O;
core::Symbol_sp _sym_StringStream_O;
core::Symbol_sp _sym_SynonymStream_O;
core::Symbol_sp _sym_TwoWayStream_O;
core::Symbol_sp _sym_BroadcastStream_O;
core::Symbol_sp _sym_ConcatenatedStream_O;
core::Symbol_sp _sym_EchoStream_O;
core::Symbol_sp _sym_T_O;
core::Symbol_sp _sym_Cons_O;
core::Symbol_sp _sym_Number_O;
core::Symbol_sp _sym_Real_O;
core::Symbol_sp _sym_Rational_O;
core::Symbol_sp _sym_Integer_O;
core::Symbol_sp _sym_Fixnum_dummy_O;
core::Symbol_sp _sym_Float_O;
core::Symbol_sp _sym_ShortFloat_O;
core::Symbol_sp _sym_SingleFloat_dummy_O;
core::Symbol_sp _sym_DoubleFloat_O;
core::Symbol_sp _sym_LongFloat_O;
core::Symbol_sp _sym_Complex_O;
core::Symbol_sp _sym_Ratio_O;
core::Symbol_sp _sym_Bignum_O;
core::Symbol_sp _sym_Symbol_O;
core::Symbol_sp _sym_Function_O;
core::Symbol_sp _sym_CompiledFunction_O;
core::Symbol_sp _sym_StandardObject_O;
core::Symbol_sp _sym_Class_O;
core::Symbol_sp _sym_Array_O;
core::Symbol_sp _sym_Vector_O;
core::Symbol_sp _sym_String_O;
core::Symbol_sp _sym_Str_O;
core::Symbol_sp _sym_HashTable_O;
core::Symbol_sp _sym_BitVector_O;
core::Symbol_sp _sym_SimpleBitVector_O;
core::Symbol_sp _sym_BitVectorWithFillPtr_O;
} // namespace cl
namespace ext {
core::Symbol_sp _sym_STARinspectorHookSTAR;
core::Symbol_sp _sym_integer8;
core::Symbol_sp _sym_byte8;
core::Symbol_sp _sym_float_nan_string;
core::Symbol_sp _sym_float_infinity_string;
core::Symbol_sp _sym_STARdefault_external_formatSTAR;
core::Symbol_sp _sym_truly_the;
core::Symbol_sp _sym_specialVar;
core::Symbol_sp _sym_lexicalVar;
core::Symbol_sp _sym_stackVar;
core::Symbol_sp _sym__PLUS_processStandardInput_PLUS_;
core::Symbol_sp _sym__PLUS_processStandardOutput_PLUS_;
core::Symbol_sp _sym__PLUS_processErrorOutput_PLUS_;
core::Symbol_sp _sym_lambda_block;
core::Symbol_sp _sym_system;
core::Symbol_sp _sym_setenv;
core::Symbol_sp _sym_getenv;
core::Symbol_sp _sym_STARloadHooksSTAR;
core::Symbol_sp _sym_aSingleExtSymbol;
core::Symbol_sp _sym_STARinvokeDebuggerHookSTAR;
core::Symbol_sp _sym_compiledFunctionName;
core::Symbol_sp _sym_ansi_stream;
core::Symbol_sp _sym_maybeQuote;
core::Symbol_sp _sym_annotate;
core::Symbol_sp _sym_AnsiStream_O;
} // namespace ext
namespace geom {
core::Symbol_sp _sym_colorTable;
core::Symbol_sp _sym_OVector2_O;
core::Symbol_sp _sym_BoundingBox_O;
core::Symbol_sp _sym_Color_O;
core::Symbol_sp _sym_OMatrix_O;
core::Symbol_sp _sym_CoordinateArray_O;
core::Symbol_sp _sym_CoordinateArrayWithHash_O;
core::Symbol_sp _sym_OVector3_O;
} // namespace geom
namespace kw {
core::Symbol_sp _sym_catchFrame;
core::Symbol_sp _sym_blockFrame;
core::Symbol_sp _sym_tagbodyFrame;
core::Symbol_sp _sym_landingPadFrame;
core::Symbol_sp _sym_splatted;
core::Symbol_sp _sym_unbound;
core::Symbol_sp _sym_deleted;
core::Symbol_sp _sym_rtld_default;
core::Symbol_sp _sym_rtld_next;
core::Symbol_sp _sym_rtld_self;
core::Symbol_sp _sym_rtld_main_only;
core::Symbol_sp _sym_iclass;
core::Symbol_sp _sym_next;
core::Symbol_sp _sym_prev;
core::Symbol_sp _sym_key;
core::Symbol_sp _sym_defaults;
core::Symbol_sp _sym_error;
core::Symbol_sp _sym_link;
core::Symbol_sp _sym_broken_link;
core::Symbol_sp _sym_special;
core::Symbol_sp _sym_supersede;
core::Symbol_sp _sym_calledFunction;
core::Symbol_sp _sym_givenNumberOfArguments;
core::Symbol_sp _sym_requiredNumberOfArguments;
core::Symbol_sp _sym_unrecognizedKeyword;
core::Symbol_sp _sym_body;
core::Symbol_sp _sym_lambda_list_handler;
core::Symbol_sp _sym_docstring;
core::Symbol_sp _sym_arguments;
core::Symbol_sp _sym_create;
core::Symbol_sp _sym_append;
core::Symbol_sp _sym_debugStartup;
core::Symbol_sp _sym_cclasp;
core::Symbol_sp _sym_bclasp;
core::Symbol_sp _sym_load;
core::Symbol_sp _sym_eval;
core::Symbol_sp _sym_ecl_min;
core::Symbol_sp _sym_use_mps;
core::Symbol_sp _sym_use_boehmdc;
core::Symbol_sp _sym_use_boehm;
core::Symbol_sp _sym_cr;
core::Symbol_sp _sym_lf;
core::Symbol_sp _sym_littleEndian;
core::Symbol_sp _sym_bigEndian;
core::Symbol_sp _sym_crlf;
core::Symbol_sp _sym_latin_1;
core::Symbol_sp _sym_ucs_4;
core::Symbol_sp _sym_passThrough;
core::Symbol_sp _sym_if_does_not_exist;
core::Symbol_sp _sym_new_version;
core::Symbol_sp _sym_rename;
core::Symbol_sp _sym_rename_and_delete;
core::Symbol_sp _sym_overwrite;
core::Symbol_sp _sym_if_exists;
core::Symbol_sp _sym_probe;
core::Symbol_sp _sym_FullDebug;
core::Symbol_sp _sym_LineTablesOnly;
core::Symbol_sp _sym__uid;
core::Symbol_sp _sym_none;
core::Symbol_sp _sym_line;
core::Symbol_sp _sym_full;
core::Symbol_sp _sym_message;
core::Symbol_sp _sym_line_buffered;
core::Symbol_sp _sym_fully_buffered;
core::Symbol_sp _sym_array;
core::Symbol_sp _sym_UnsignedByte;
core::Symbol_sp _sym_junkAllowed;
core::Symbol_sp _sym_absolute;
core::Symbol_sp _sym_relative;
core::Symbol_sp _sym_back;
core::Symbol_sp _sym_operation;
core::Symbol_sp _sym_operands;
core::Symbol_sp _sym_escape;
core::Symbol_sp _sym_capitalize;
core::Symbol_sp _sym_typeError;
core::Symbol_sp _sym_datum;
core::Symbol_sp _sym_expectedType;
core::Symbol_sp _sym_print;
core::Symbol_sp _sym_pathname;
core::Symbol_sp _sym_object;
core::Symbol_sp _sym_formatControl;
core::Symbol_sp _sym_formatArguments;
core::Symbol_sp _sym_stream;
core::Symbol_sp _sym_package;
core::Symbol_sp _sym_compile_toplevel;
core::Symbol_sp _sym_load_toplevel;
core::Symbol_sp _sym_execute;
core::Symbol_sp _sym_allow_other_keys;
core::Symbol_sp _sym_macro;
core::Symbol_sp _sym_function;
core::Symbol_sp _sym_invalid_character;
core::Symbol_sp _sym_brcl;
core::Symbol_sp _sym_not;
core::Symbol_sp _sym_and;
core::Symbol_sp _sym_or;
core::Symbol_sp _sym_class;
core::Symbol_sp _sym_instance;
core::Symbol_sp _sym_output;
core::Symbol_sp _sym_input;
core::Symbol_sp _sym_io;
core::Symbol_sp _sym_default;
core::Symbol_sp _sym_internal;
core::Symbol_sp _sym_external;
core::Symbol_sp _sym_inherited;
core::Symbol_sp _sym_debug;
core::Symbol_sp _sym_direct_super_classes;
core::Symbol_sp _sym_changed;
core::Symbol_sp _sym_address_model_64;
core::Symbol_sp _sym_target_os_darwin;
core::Symbol_sp _sym_podSymbolMap;
core::Symbol_sp _sym_constituent_character;
core::Symbol_sp _sym_syntax;
core::Symbol_sp _sym_whitespace_character;
core::Symbol_sp _sym_single_escape_character;
core::Symbol_sp _sym_multiple_escape_character;
core::Symbol_sp _sym_upcase;
core::Symbol_sp _sym_downcase;
core::Symbol_sp _sym_preserve;
core::Symbol_sp _sym_invert;
core::Symbol_sp _sym_non_terminating_macro_character;
core::Symbol_sp _sym_terminating_macro_character;
core::Symbol_sp _sym_macro_function;
core::Symbol_sp _sym_case;
core::Symbol_sp _sym_file;
core::Symbol_sp _sym_unspecific;
core::Symbol_sp _sym_local;
core::Symbol_sp _sym_common;
core::Symbol_sp _sym_wild_inferiors;
core::Symbol_sp _sym_up;
core::Symbol_sp _sym_wild;
core::Symbol_sp _sym_host;
core::Symbol_sp _sym_device;
core::Symbol_sp _sym_newest;
core::Symbol_sp _sym_version;
core::Symbol_sp _sym_directory;
core::Symbol_sp _sym_supplied;
core::Symbol_sp _sym_min;
core::Symbol_sp _sym_max;
core::Symbol_sp _sym_eof;
core::Symbol_sp _sym_fillPointer;
core::Symbol_sp _sym_elementType;
core::Symbol_sp _sym_adjustable;
core::Symbol_sp _sym_start;
core::Symbol_sp _sym_end;
core::Symbol_sp _sym_x;
core::Symbol_sp _sym_y;
core::Symbol_sp _sym_z;
core::Symbol_sp _sym_white;
core::Symbol_sp _sym_black;
core::Symbol_sp _sym_red;
core::Symbol_sp _sym_green;
core::Symbol_sp _sym_blue;
core::Symbol_sp _sym_magenta;
core::Symbol_sp _sym_yellow;
core::Symbol_sp _sym_cyan;
core::Symbol_sp _sym_grey10;
core::Symbol_sp _sym_greyF0;
core::Symbol_sp _sym_goldenrod;
core::Symbol_sp _sym_purple;
core::Symbol_sp _sym_pink;
core::Symbol_sp _sym_plum;
core::Symbol_sp _sym_coral;
core::Symbol_sp _sym_orange;
core::Symbol_sp _sym_brown;
core::Symbol_sp _sym_wheat;
core::Symbol_sp _sym_chartreuse;
core::Symbol_sp _sym_aquamarine;
core::Symbol_sp _sym_mediumBlue;
core::Symbol_sp _sym_steelBlue;
core::Symbol_sp _sym_chemdraw_color;
core::Symbol_sp _sym_chemdraw_dashed_bond;
core::Symbol_sp _sym_comment;
core::Symbol_sp _sym_chiral_centers;
core::Symbol_sp _sym_group;
core::Symbol_sp _sym_name_template;
core::Symbol_sp _sym_pdb_template;
core::Symbol_sp _sym_residue_charge;
core::Symbol_sp _sym_restrained_pi_bonds;
core::Symbol_sp _sym_caps;
core::Symbol_sp _sym_matches;
core::Symbol_sp _sym_tags;
core::Symbol_sp _sym_closestMatch;
core::Symbol_sp _sym_data;
core::Symbol_sp _sym_root;
core::Symbol_sp _sym_op;
core::Symbol_sp _sym_ringTag;
core::Symbol_sp _sym_atomTest;
core::Symbol_sp _sym_test;
core::Symbol_sp _sym_int;
core::Symbol_sp _sym_num;
core::Symbol_sp _sym_str;
core::Symbol_sp _sym_sym;
core::Symbol_sp _sym_head;
core::Symbol_sp _sym_tail;
core::Symbol_sp _sym_left;
core::Symbol_sp _sym_right;
core::Symbol_sp _sym_tag1;
core::Symbol_sp _sym_tag2;
core::Symbol_sp _sym_bond;
core::Symbol_sp _sym_residueNames;
core::Symbol_sp _sym_atomicProperty;
core::Symbol_sp _sym_atomicNumber;
core::Symbol_sp _sym_attachedAtoms;
core::Symbol_sp _sym_attachedHs;
core::Symbol_sp _sym_attachedEWGs;
core::Symbol_sp _sym_neighbors;
core::Symbol_sp _sym_tag;
core::Symbol_sp _sym_atomProps;
core::Symbol_sp _sym_firstTest;
core::Symbol_sp _sym_chain;
core::Symbol_sp _sym_tests;
core::Symbol_sp _sym_assignType;
core::Symbol_sp _sym_afterMatchTests;
core::Symbol_sp _sym_wildDict;
core::Symbol_sp _sym_type_rules;
core::Symbol_sp _sym_r0;
core::Symbol_sp _sym_kb;
core::Symbol_sp _sym_stretches;
core::Symbol_sp _sym_R;
core::Symbol_sp _sym_Eps;
core::Symbol_sp _sym_M;
core::Symbol_sp _sym_N;
core::Symbol_sp _sym_Edep;
core::Symbol_sp _sym_vdw;
core::Symbol_sp _sym_angRad;
core::Symbol_sp _sym_k2;
core::Symbol_sp _sym_angleFunction;
core::Symbol_sp _sym_angles;
core::Symbol_sp _sym_zConstants;
core::Symbol_sp _sym_cConstants;
core::Symbol_sp _sym_level;
core::Symbol_sp _sym_forceField;
core::Symbol_sp _sym_itors;
core::Symbol_sp _sym_type1;
core::Symbol_sp _sym_type2;
core::Symbol_sp _sym_type3;
core::Symbol_sp _sym_type4;
core::Symbol_sp _sym_v0;
core::Symbol_sp _sym_ph0;
core::Symbol_sp _sym_v1;
core::Symbol_sp _sym_ph1;
core::Symbol_sp _sym_v2;
core::Symbol_sp _sym_ph2;
core::Symbol_sp _sym_v3;
core::Symbol_sp _sym_ph3;
core::Symbol_sp _sym_v4;
core::Symbol_sp _sym_ph4;
core::Symbol_sp _sym_v5;
core::Symbol_sp _sym_ph5;
core::Symbol_sp _sym_ptors;
core::Symbol_sp _sym_radius;
core::Symbol_sp _sym_well;
core::Symbol_sp _sym_apol;
core::Symbol_sp _sym_neff;
core::Symbol_sp _sym_mass;
core::Symbol_sp _sym_pol;
core::Symbol_sp _sym_initCharge;
core::Symbol_sp _sym_fcadj;
core::Symbol_sp _sym_pbci;
core::Symbol_sp _sym_da;
core::Symbol_sp _sym_eleDielectricValue;
core::Symbol_sp _sym_eleBuffer;
core::Symbol_sp _sym_eleScale14;
core::Symbol_sp _sym_eleChargeFcn;
core::Symbol_sp _sym_vdwScale14;
core::Symbol_sp _sym_vdwScaleBufferA;
core::Symbol_sp _sym_vdwScaleBufferB;
core::Symbol_sp _sym_nonbonds;
core::Symbol_sp _sym_map;
core::Symbol_sp _sym_eleDielectricCode;
core::Symbol_sp _sym_vdwMixRadius;
core::Symbol_sp _sym_vdwMixWell;
core::Symbol_sp _sym_name;
core::Symbol_sp _sym_id;
core::Symbol_sp _sym_restraints;
core::Symbol_sp _sym_contents;
core::Symbol_sp _sym_pdbName;
core::Symbol_sp _sym_uniqueLabel;
core::Symbol_sp _sym_NetCharge;
core::Symbol_sp _sym_fileSeqNum;
core::Symbol_sp _sym_monomerAliases;
core::Symbol_sp _sym_bl;
core::Symbol_sp _sym_alias;
core::Symbol_sp _sym_flags;
core::Symbol_sp _sym_element;
core::Symbol_sp _sym_hybridization;
core::Symbol_sp _sym_priority;
core::Symbol_sp _sym_hintLP;
core::Symbol_sp _sym_chg;
core::Symbol_sp _sym_ion;
core::Symbol_sp _sym_rings;
core::Symbol_sp _sym_tempInt;
core::Symbol_sp _sym_type;
core::Symbol_sp _sym_ar1;
core::Symbol_sp _sym_ar2;
core::Symbol_sp _sym_ar3;
core::Symbol_sp _sym_ar4;
core::Symbol_sp _sym_ar5;
core::Symbol_sp _sym_mask;
core::Symbol_sp _sym_configuration;
core::Symbol_sp _sym_stereochemistryType;
core::Symbol_sp _sym_pos;
core::Symbol_sp _sym_order;
core::Symbol_sp _sym_properties;
core::Symbol_sp _sym_a1;
core::Symbol_sp _sym_a2;
core::Symbol_sp _sym_bonds;
core::Symbol_sp _sym_atom;
core::Symbol_sp _sym_position;
core::Symbol_sp _sym_weight;
core::Symbol_sp _sym_atoms;
core::Symbol_sp _sym_k;
core::Symbol_sp _sym_title;
core::Symbol_sp _sym_ref;
core::Symbol_sp _sym_bondDistinctions;
core::Symbol_sp _sym_Info;
core::Symbol_sp _sym_Types;
core::Symbol_sp _sym_Stretches;
core::Symbol_sp _sym_Angles;
core::Symbol_sp _sym_Itors;
core::Symbol_sp _sym_Ptors;
core::Symbol_sp _sym_Nonbonds;
core::Symbol_sp _sym_Vdws;
} // namespace kw
namespace chemkw {
core::Symbol_sp _sym_undefinedConfiguration;
core::Symbol_sp _sym_R;
core::Symbol_sp _sym_undefinedCenter;
core::Symbol_sp _sym_chiral;
core::Symbol_sp _sym_prochiral;
core::Symbol_sp _sym__singleBond;
core::Symbol_sp _sym__doubleBond;
core::Symbol_sp _sym__tripleBond;
core::Symbol_sp _sym__aromaticBond;
core::Symbol_sp _sym__hydrogenBond;
core::Symbol_sp _sym__virtualBond;
core::Symbol_sp _sym__dashedSingleBond;
core::Symbol_sp _sym__dashedDoubleBond;
core::Symbol_sp _sym_noBond;
core::Symbol_sp _sym_singleBond;
core::Symbol_sp _sym_doubleBond;
core::Symbol_sp _sym_tripleBond;
core::Symbol_sp _sym_aromaticBond;
core::Symbol_sp _sym_hydrogenBond;
core::Symbol_sp _sym_virtualBond;
core::Symbol_sp _sym_dashedSingleBond;
core::Symbol_sp _sym_dashedDoubleBond;
core::Symbol_sp _sym_C;
core::Symbol_sp _sym_N;
core::Symbol_sp _sym_O;
core::Symbol_sp _sym_S;
core::Symbol_sp _sym_P;
core::Symbol_sp _sym_F;
core::Symbol_sp _sym_Cl;
core::Symbol_sp _sym_Br;
core::Symbol_sp _sym_I;
core::Symbol_sp _sym_message;
core::Symbol_sp _sym_constitution;
core::Symbol_sp _sym_entity;
core::Symbol_sp _sym_frameRecognizer;
core::Symbol_sp _sym_E;
core::Symbol_sp _sym_Z;
core::Symbol_sp _sym_1;
core::Symbol_sp _sym_2;
core::Symbol_sp _sym_3;
core::Symbol_sp _sym_4;
core::Symbol_sp _sym_5;
core::Symbol_sp _sym_6;
core::Symbol_sp _sym_idle;
core::Symbol_sp _sym_translate;
core::Symbol_sp _sym_rotate;
core::Symbol_sp _sym_scale;
core::Symbol_sp _sym_XX;
core::Symbol_sp _sym_XA;
core::Symbol_sp _sym_XB;
core::Symbol_sp _sym_XC;
core::Symbol_sp _sym_XD;
core::Symbol_sp _sym_parameterized;
core::Symbol_sp _sym_estimated;
core::Symbol_sp _sym_rough;
} // namespace chemkw
namespace units {
core::Symbol_sp _sym_NamedUnit_O;
core::Symbol_sp _sym_meters;
core::Symbol_sp _sym_kilometers;
core::Symbol_sp _sym_millimeters;
core::Symbol_sp _sym_micrometers;
core::Symbol_sp _sym_nanometers;
core::Symbol_sp _sym_picometers;
core::Symbol_sp _sym_angstroms;
core::Symbol_sp _sym_kilograms;
core::Symbol_sp _sym_grams;
core::Symbol_sp _sym_daltons;
core::Symbol_sp _sym_seconds;
core::Symbol_sp _sym_milliseconds;
core::Symbol_sp _sym_microseconds;
core::Symbol_sp _sym_nanoseconds;
core::Symbol_sp _sym_picoseconds;
core::Symbol_sp _sym_femtoseconds;
core::Symbol_sp _sym_per_picosecond;
core::Symbol_sp _sym_amperes;
core::Symbol_sp _sym_coulomb;
core::Symbol_sp _sym_elementaryCharge;
core::Symbol_sp _sym_kelvin;
core::Symbol_sp _sym_candelas;
core::Symbol_sp _sym_moles;
core::Symbol_sp _sym_Joule;
core::Symbol_sp _sym_joule;
core::Symbol_sp _sym_Joules;
core::Symbol_sp _sym_joules;
core::Symbol_sp _sym_kiloJoule;
core::Symbol_sp _sym_kilojoule;
core::Symbol_sp _sym_kiloJoules;
core::Symbol_sp _sym_kilojoules;
core::Symbol_sp _sym_kiloJoules_per_mole;
core::Symbol_sp _sym_kilojoules_per_mole;
core::Symbol_sp _sym_kiloCalories_per_mole;
core::Symbol_sp _sym_kilocalories_per_mole;
core::Symbol_sp _sym_nm_per_ps;
core::Symbol_sp _sym_Dimension_O;
core::Symbol_sp _sym_Unit_O;
core::Symbol_sp _sym_Quantity_O;
} // namespace units
namespace clos {
core::Symbol_sp _sym_compute_applicable_methods_using_classes;
core::Symbol_sp _sym_compute_effective_method_function;
core::Symbol_sp _sym_std_compute_applicable_methods;
core::Symbol_sp _sym_std_compute_effective_method;
core::Symbol_sp _sym_clearGfunHash;
core::Symbol_sp _sym_setFuncallableInstanceFunction;
core::Symbol_sp _sym_standardOptimizedReaderMethod;
core::Symbol_sp _sym_standardOptimizedWriterMethod;
core::Symbol_sp _sym_standardOptimizedReaderFunction;
core::Symbol_sp _sym_standardOptimizedWriterFunction;
core::Symbol_sp _sym_classp;
core::Symbol_sp _sym_aSingleClosSymbol;
core::Symbol_sp _sym_class_precedence_list;
core::Symbol_sp _sym_StdClass_O;
core::Symbol_sp _sym_FuncallableStandardClass_O;
} // namespace clos
namespace clbind {
core::Symbol_sp _sym_STARtheClassRegistrySTAR;
core::Symbol_sp _sym_ClassRegistry_O;
core::Symbol_sp _sym_ClassRep_O;
} // namespace clbind
namespace llvmo {
core::Symbol_sp _sym_dwTag;
core::Symbol_sp _sym_LLVMDebugVersion11;
core::Symbol_sp _sym_LLVMDebugVersion10;
core::Symbol_sp _sym_LLVMDebugVersion9;
core::Symbol_sp _sym_LLVMDebugVersion8;
core::Symbol_sp _sym_LLVMDebugVersion7;
core::Symbol_sp _sym_LLVMDebugVersion6;
core::Symbol_sp _sym_LLVMDebugVersion5;
core::Symbol_sp _sym_LLVMDebugVersion4;
core::Symbol_sp _sym__PLUS_DebugMetadataVersion_PLUS_;
core::Symbol_sp _sym_DW_TAG_array_type;
core::Symbol_sp _sym_DW_TAG_class_type;
core::Symbol_sp _sym_DW_TAG_entry_point;
core::Symbol_sp _sym_DW_TAG_enumeration_type;
core::Symbol_sp _sym_DW_TAG_formal_parameter;
core::Symbol_sp _sym_DW_TAG_imported_declaration;
core::Symbol_sp _sym_DW_TAG_label;
core::Symbol_sp _sym_DW_TAG_lexical_block;
core::Symbol_sp _sym_DW_TAG_member;
core::Symbol_sp _sym_DW_TAG_pointer_type;
core::Symbol_sp _sym_DW_TAG_reference_type;
core::Symbol_sp _sym_DW_TAG_compile_unit;
core::Symbol_sp _sym_DW_TAG_string_type;
core::Symbol_sp _sym_DW_TAG_structure_type;
core::Symbol_sp _sym_DW_TAG_subroutine_type;
core::Symbol_sp _sym_DW_TAG_typedef;
core::Symbol_sp _sym_DW_TAG_union_type;
core::Symbol_sp _sym_DW_TAG_unspecified_parameters;
core::Symbol_sp _sym_DW_TAG_variant;
core::Symbol_sp _sym_DW_TAG_common_block;
core::Symbol_sp _sym_DW_TAG_common_inclusion;
core::Symbol_sp _sym_DW_TAG_inheritance;
core::Symbol_sp _sym_DW_TAG_inlined_subroutine;
core::Symbol_sp _sym_DW_TAG_module;
core::Symbol_sp _sym_DW_TAG_ptr_to_member_type;
core::Symbol_sp _sym_DW_TAG_set_type;
core::Symbol_sp _sym_DW_TAG_subrange_type;
core::Symbol_sp _sym_DW_TAG_with_stmt;
core::Symbol_sp _sym_DW_TAG_access_declaration;
core::Symbol_sp _sym_DW_TAG_base_type;
core::Symbol_sp _sym_DW_TAG_catch_block;
core::Symbol_sp _sym_DW_TAG_const_type;
core::Symbol_sp _sym_DW_TAG_constant;
core::Symbol_sp _sym_DW_TAG_enumerator;
core::Symbol_sp _sym_DW_TAG_file_type;
core::Symbol_sp _sym_DW_TAG_friend;
core::Symbol_sp _sym_DW_TAG_namelist;
core::Symbol_sp _sym_DW_TAG_namelist_item;
core::Symbol_sp _sym_DW_TAG_packed_type;
core::Symbol_sp _sym_DW_TAG_subprogram;
core::Symbol_sp _sym_DW_TAG_template_type_parameter;
core::Symbol_sp _sym_DW_TAG_template_value_parameter;
core::Symbol_sp _sym_DW_TAG_thrown_type;
core::Symbol_sp _sym_DW_TAG_try_block;
core::Symbol_sp _sym_DW_TAG_variant_part;
core::Symbol_sp _sym_DW_TAG_variable;
core::Symbol_sp _sym_DW_TAG_volatile_type;
core::Symbol_sp _sym_DW_TAG_dwarf_procedure;
core::Symbol_sp _sym_DW_TAG_restrict_type;
core::Symbol_sp _sym_DW_TAG_interface_type;
core::Symbol_sp _sym_DW_TAG_namespace;
core::Symbol_sp _sym_DW_TAG_imported_module;
core::Symbol_sp _sym_DW_TAG_unspecified_type;
core::Symbol_sp _sym_DW_TAG_partial_unit;
core::Symbol_sp _sym_DW_TAG_imported_unit;
core::Symbol_sp _sym_DW_TAG_condition;
core::Symbol_sp _sym_DW_TAG_shared_type;
core::Symbol_sp _sym_DW_TAG_type_unit;
core::Symbol_sp _sym_DW_TAG_rvalue_reference_type;
core::Symbol_sp _sym_DW_TAG_template_alias;
core::Symbol_sp _sym_DW_TAG_MIPS_loop;
core::Symbol_sp _sym_DW_TAG_format_label;
core::Symbol_sp _sym_DW_TAG_function_template;
core::Symbol_sp _sym_DW_TAG_class_template;
core::Symbol_sp _sym_DW_TAG_GNU_template_template_param;
core::Symbol_sp _sym_DW_TAG_GNU_template_parameter_pack;
core::Symbol_sp _sym_DW_TAG_GNU_formal_parameter_pack;
core::Symbol_sp _sym_DW_TAG_lo_user;
core::Symbol_sp _sym_DW_TAG_APPLE_property;
core::Symbol_sp _sym_DW_TAG_hi_user;
core::Symbol_sp _sym_STARdwarfConstantsSTAR;
core::Symbol_sp _sym_DW_LANG_COMMON_LISP;
core::Symbol_sp _sym_DW_LANG_C;
core::Symbol_sp _sym_DW_LANG_C_plus_plus;
core::Symbol_sp _sym__PLUS_DW_ATE_SIGNED_FIXED_PLUS_;
core::Symbol_sp _sym_STARaSTAR;
core::Symbol_sp _sym_CodeGenFileType;
core::Symbol_sp _sym_CodeGenFileType_Null;
core::Symbol_sp _sym_CodeGenFileType_AssemblyFile;
core::Symbol_sp _sym_CodeGenFileType_ObjectFile;
core::Symbol_sp _sym_CodeGenOpt;
core::Symbol_sp _sym_CodeGenOpt_None;
core::Symbol_sp _sym_CodeGenOpt_Less;
core::Symbol_sp _sym_CodeGenOpt_Default;
core::Symbol_sp _sym_CodeGenOpt_Aggressive;
core::Symbol_sp _sym_RelocModel;
core::Symbol_sp _sym_RelocModel_Default;
core::Symbol_sp _sym_RelocModel_Static;
core::Symbol_sp _sym_RelocModel_PIC_;
core::Symbol_sp _sym_RelocModel_DynamicNoPIC;
core::Symbol_sp _sym_CodeModel;
core::Symbol_sp _sym_CodeModel_Default;
core::Symbol_sp _sym_CodeModel_JITDefault;
core::Symbol_sp _sym_CodeModel_Small;
core::Symbol_sp _sym_CodeModel_Kernel;
core::Symbol_sp _sym_CodeModel_Medium;
core::Symbol_sp _sym_CodeModel_Large;
core::Symbol_sp _sym_ArchType;
core::Symbol_sp _sym_ArchType_UnknownArch;
core::Symbol_sp _sym_ArchType_arm;
core::Symbol_sp _sym_ArchType_armeb;
core::Symbol_sp _sym_ArchType_aarch64;
core::Symbol_sp _sym_ArchType_aarch64_be;
core::Symbol_sp _sym_ArchType_hexagon;
core::Symbol_sp _sym_ArchType_mips;
core::Symbol_sp _sym_ArchType_mipsel;
core::Symbol_sp _sym_ArchType_mips64;
core::Symbol_sp _sym_ArchType_mips64el;
core::Symbol_sp _sym_ArchType_msp430;
core::Symbol_sp _sym_ArchType_ppc;
core::Symbol_sp _sym_ArchType_ppc64;
core::Symbol_sp _sym_ArchType_ppc64le;
core::Symbol_sp _sym_ArchType_r600;
core::Symbol_sp _sym_ArchType_sparc;
core::Symbol_sp _sym_ArchType_sparcv9;
core::Symbol_sp _sym_ArchType_systemz;
core::Symbol_sp _sym_ArchType_tce;
core::Symbol_sp _sym_ArchType_thumb;
core::Symbol_sp _sym_ArchType_thumbeb;
core::Symbol_sp _sym_ArchType_x86;
core::Symbol_sp _sym_ArchType_x86_64;
core::Symbol_sp _sym_ArchType_xcore;
core::Symbol_sp _sym_ArchType_nvptx;
core::Symbol_sp _sym_ArchType_nvptx64;
core::Symbol_sp _sym_ArchType_le32;
core::Symbol_sp _sym_ArchType_le64;
core::Symbol_sp _sym_ArchType_amdil;
core::Symbol_sp _sym_ArchType_amdil64;
core::Symbol_sp _sym_ArchType_hsail;
core::Symbol_sp _sym_ArchType_hsail64;
core::Symbol_sp _sym_ArchType_spir;
core::Symbol_sp _sym_ArchType_spir64;
core::Symbol_sp _sym_ArchType_kalimba;
core::Symbol_sp _sym_SubArchType_NoSubArch;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v8;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v7;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v7em;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v7m;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v7s;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v6;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v6m;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v6t2;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v5;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v5te;
core::Symbol_sp _sym_SubArchType_ARMSubArch_v4t;
core::Symbol_sp _sym_SubArchType_KalimbaSubArch_v3;
core::Symbol_sp _sym_SubArchType_KalimbaSubArch_v4;
core::Symbol_sp _sym_SubArchType_KalimbaSubArch_v5;
core::Symbol_sp _sym_SubArchType;
core::Symbol_sp _sym_VendorType_UnknownVendor;
core::Symbol_sp _sym_VendorType_Apple;
core::Symbol_sp _sym_VendorType_PC;
core::Symbol_sp _sym_VendorType_SCEI;
core::Symbol_sp _sym_VendorType_BGP;
core::Symbol_sp _sym_VendorType_BGQ;
core::Symbol_sp _sym_VendorType_Freescale;
core::Symbol_sp _sym_VendorType_IBM;
core::Symbol_sp _sym_VendorType_ImaginationTechnologies;
core::Symbol_sp _sym_VendorType_MipsTechnologies;
core::Symbol_sp _sym_VendorType_NVIDIA;
core::Symbol_sp _sym_VendorType_CSR;
core::Symbol_sp _sym_VendorType;
core::Symbol_sp _sym_OSType_UnknownOS;
core::Symbol_sp _sym_OSType_Darwin;
core::Symbol_sp _sym_OSType_DragonFly;
core::Symbol_sp _sym_OSType_FreeBSD;
core::Symbol_sp _sym_OSType_IOS;
core::Symbol_sp _sym_OSType_KFreeBSD;
core::Symbol_sp _sym_OSType_Linux;
core::Symbol_sp _sym_OSType_Lv2;
core::Symbol_sp _sym_OSType_MacOSX;
core::Symbol_sp _sym_OSType_NetBSD;
core::Symbol_sp _sym_OSType_OpenBSD;
core::Symbol_sp _sym_OSType_Solaris;
core::Symbol_sp _sym_OSType_Win32;
core::Symbol_sp _sym_OSType_Haiku;
core::Symbol_sp _sym_OSType_Minix;
core::Symbol_sp _sym_OSType_RTEMS;
core::Symbol_sp _sym_OSType_NaCl;
core::Symbol_sp _sym_OSType_CNK;
core::Symbol_sp _sym_OSType_Bitrig;
core::Symbol_sp _sym_OSType_AIX;
core::Symbol_sp _sym_OSType_CUDA;
core::Symbol_sp _sym_OSType_NVCL;
core::Symbol_sp _sym_OSType;
core::Symbol_sp _sym_EnvironmentType_UnknownEnvironment;
core::Symbol_sp _sym_EnvironmentType_GNU;
core::Symbol_sp _sym_EnvironmentType_GNUEABI;
core::Symbol_sp _sym_EnvironmentType_GNUEABIHF;
core::Symbol_sp _sym_EnvironmentType_GNUX32;
core::Symbol_sp _sym_EnvironmentType_CODE16;
core::Symbol_sp _sym_EnvironmentType_EABI;
core::Symbol_sp _sym_EnvironmentType_EABIHF;
core::Symbol_sp _sym_EnvironmentType_Android;
core::Symbol_sp _sym_EnvironmentType_MSVC;
core::Symbol_sp _sym_EnvironmentType_Itanium;
core::Symbol_sp _sym_EnvironmentType_Cygnus;
core::Symbol_sp _sym_EnvironmentType;
core::Symbol_sp _sym_ObjectFormatType_UnknownObjectFormat;
core::Symbol_sp _sym_ObjectFormatType_COFF;
core::Symbol_sp _sym_ObjectFormatType_ELF;
core::Symbol_sp _sym_ObjectFormatType_MachO;
core::Symbol_sp _sym_ObjectFormatType;
core::Symbol_sp _sym_AttributeNone;
core::Symbol_sp _sym_AttributeZExt;
core::Symbol_sp _sym_AttributeSExt;
core::Symbol_sp _sym_AttributeNoReturn;
core::Symbol_sp _sym_AttributeInReg;
core::Symbol_sp _sym_AttributeStructRet;
core::Symbol_sp _sym_AttributeNoUnwind;
core::Symbol_sp _sym_AttributeNoAlias;
core::Symbol_sp _sym_AttributeByVal;
core::Symbol_sp _sym_AttributeNest;
core::Symbol_sp _sym_AttributeReadNone;
core::Symbol_sp _sym_AttributeReadOnly;
core::Symbol_sp _sym_AttributeNoInline;
core::Symbol_sp _sym_AttributeAlwaysInline;
core::Symbol_sp _sym_AttributeOptimizeForSize;
core::Symbol_sp _sym_AttributeStackProtect;
core::Symbol_sp _sym_AttributeStackProtectReq;
core::Symbol_sp _sym_AttributeAlignment;
core::Symbol_sp _sym_AttributeNoCapture;
core::Symbol_sp _sym_AttributeNoRedZone;
core::Symbol_sp _sym_AttributeNoImplicitFloat;
core::Symbol_sp _sym_AttributeNaked;
core::Symbol_sp _sym_AttributeInlineHint;
core::Symbol_sp _sym_AttributeStackAlignment;
core::Symbol_sp _sym_AttributeReturnsTwice;
core::Symbol_sp _sym_AttributeUWTable;
core::Symbol_sp _sym_AttributeNonLazyBind;
core::Symbol_sp _sym_AttributeAddressSafety;
core::Symbol_sp _sym_AttributeEnum;
core::Symbol_sp _sym_attributesGet;
core::Symbol_sp _sym_verifyModule;
core::Symbol_sp _sym_module_get_function_list;
core::Symbol_sp _sym_STARmoduleModFlagBehaviorSTAR;
core::Symbol_sp _sym_moduleFlagError;
core::Symbol_sp _sym_moduleFlagWarning;
core::Symbol_sp _sym_moduleFlagRequire;
core::Symbol_sp _sym_moduleFlagOverride;
core::Symbol_sp _sym_moduleFlagAppend;
core::Symbol_sp _sym_moduleFlagAppendUnique;
core::Symbol_sp _sym_interpreter;
core::Symbol_sp _sym_jit;
core::Symbol_sp _sym_makeAPInt1;
core::Symbol_sp _sym_makeAPInt;
core::Symbol_sp _sym_makeAPWidth;
core::Symbol_sp _sym_makeAP32;
core::Symbol_sp _sym_makeAP64;
core::Symbol_sp _sym_mdnodeGet;
core::Symbol_sp _sym_ValueAsMetadataGet;
core::Symbol_sp _sym_STARglobal_value_linkage_typesSTAR;
core::Symbol_sp _sym_ExternalLinkage;
core::Symbol_sp _sym_AvailableExternallyLinkage;
core::Symbol_sp _sym_LinkOnceAnyLinkage;
core::Symbol_sp _sym_LinkOnceODRLinkage;
core::Symbol_sp _sym_LinkOnceODRAutoHideLinkage;
core::Symbol_sp _sym_WeakAnyLinkage;
core::Symbol_sp _sym_WeakODRLinkage;
core::Symbol_sp _sym_AppendingLinkage;
core::Symbol_sp _sym_InternalLinkage;
core::Symbol_sp _sym_PrivateLinkage;
core::Symbol_sp _sym_LinkerPrivateLinkage;
core::Symbol_sp _sym_LinkerPrivateWeakLinkage;
core::Symbol_sp _sym_DLLImportLinkage;
core::Symbol_sp _sym_DLLExportLinkage;
core::Symbol_sp _sym_ExternalWeakLinkage;
core::Symbol_sp _sym_CommonLinkage;
core::Symbol_sp _sym_STARglobal_ThreadLocalModesSTAR;
core::Symbol_sp _sym_NotThreadLocal;
core::Symbol_sp _sym_GeneralDynamicTLSModel;
core::Symbol_sp _sym_LocalDynamicTLSModel;
core::Symbol_sp _sym_InitialExecTLSModel;
core::Symbol_sp _sym_LocalExecTLSModel;
core::Symbol_sp _sym_verifyFunction;
core::Symbol_sp _sym_STARatomic_orderingSTAR;
core::Symbol_sp _sym_NotAtomic;
core::Symbol_sp _sym_Unordered;
core::Symbol_sp _sym_Monotonic;
core::Symbol_sp _sym_Acquire;
core::Symbol_sp _sym_Release;
core::Symbol_sp _sym_AquireRelease;
core::Symbol_sp _sym_SequentiallyConsistent;
core::Symbol_sp _sym_STARsynchronization_scopeSTAR;
core::Symbol_sp _sym_SingleThread;
core::Symbol_sp _sym_CrossThread;
core::Symbol_sp _sym_STARAtomicRMWInstBinOpSTAR;
core::Symbol_sp _sym_Xchg;
core::Symbol_sp _sym_Nand;
core::Symbol_sp _sym_Max;
core::Symbol_sp _sym_Min;
core::Symbol_sp _sym_UMax;
core::Symbol_sp _sym_UMin;
core::Symbol_sp _sym_Add;
core::Symbol_sp _sym_FAdd;
core::Symbol_sp _sym_Sub;
core::Symbol_sp _sym_FSub;
core::Symbol_sp _sym_Mul;
core::Symbol_sp _sym_FMul;
core::Symbol_sp _sym_UDiv;
core::Symbol_sp _sym_SDiv;
core::Symbol_sp _sym_FDiv;
core::Symbol_sp _sym_URem;
core::Symbol_sp _sym_SRem;
core::Symbol_sp _sym_FRem;
core::Symbol_sp _sym_Shl;
core::Symbol_sp _sym_LShr;
core::Symbol_sp _sym_AShr;
core::Symbol_sp _sym_And;
core::Symbol_sp _sym_Or;
core::Symbol_sp _sym_Xor;
core::Symbol_sp _sym_STARBinaryOpsSTAR;
core::Symbol_sp _sym_Trunc;
core::Symbol_sp _sym_ZExt;
core::Symbol_sp _sym_SExt;
core::Symbol_sp _sym_FPToUI;
core::Symbol_sp _sym_FPToSI;
core::Symbol_sp _sym_UIToFP;
core::Symbol_sp _sym_SIToFP;
core::Symbol_sp _sym_FPTrunc;
core::Symbol_sp _sym_FPExt;
core::Symbol_sp _sym_PtrToInt;
core::Symbol_sp _sym_IntToPtr;
core::Symbol_sp _sym_BitCast;
core::Symbol_sp _sym_STARInstructionCastOpsSTAR;
core::Symbol_sp _sym_FCMP_FALSE;
core::Symbol_sp _sym_FCMP_OEQ;
core::Symbol_sp _sym_FCMP_OGT;
core::Symbol_sp _sym_FCMP_OGE;
core::Symbol_sp _sym_FCMP_OLT;
core::Symbol_sp _sym_FCMP_OLE;
core::Symbol_sp _sym_FCMP_ONE;
core::Symbol_sp _sym_FCMP_ORD;
core::Symbol_sp _sym_FCMP_UNO;
core::Symbol_sp _sym_FCMP_UEQ;
core::Symbol_sp _sym_FCMP_UGT;
core::Symbol_sp _sym_FCMP_UGE;
core::Symbol_sp _sym_FCMP_ULT;
core::Symbol_sp _sym_FCMP_ULE;
core::Symbol_sp _sym_FCMP_UNE;
core::Symbol_sp _sym_FCMP_TRUE;
core::Symbol_sp _sym_FIRST_FCMP_PREDICATE;
core::Symbol_sp _sym_FCMP_PREDICATE;
core::Symbol_sp _sym_ICMP_EQ;
core::Symbol_sp _sym_ICMP_NE;
core::Symbol_sp _sym_ICMP_UGT;
core::Symbol_sp _sym_ICMP_UGE;
core::Symbol_sp _sym_ICMP_ULT;
core::Symbol_sp _sym_ICMP_ULE;
core::Symbol_sp _sym_ICMP_SGT;
core::Symbol_sp _sym_ICMP_SGE;
core::Symbol_sp _sym_ICMP_SLT;
core::Symbol_sp _sym_ICMP_SLE;
core::Symbol_sp _sym_STARCmpInstPredicateSTAR;
core::Symbol_sp _sym_valid;
core::Symbol_sp _sym_makeStringGlobal;
core::Symbol_sp _sym_valuep;
core::Symbol_sp _sym_parseBitcodeFile;
core::Symbol_sp _sym_writeBitcodeToFile;
core::Symbol_sp _sym_writeIrToFile;
core::Symbol_sp _sym_llvm_value_p;
core::Symbol_sp _sym_STARmostRecentLlvmFinalizationTimeSTAR;
core::Symbol_sp _sym_STARaccumulatedLlvmFinalizationTimeSTAR;
core::Symbol_sp _sym_STARnumberOfLlvmFinalizationsSTAR;
core::Symbol_sp _sym_STARrunTimeExecutionEngineSTAR;
core::Symbol_sp _sym_getOrCreateExternalGlobal;
core::Symbol_sp _sym_disassembleSTAR;
core::Symbol_sp _sym_throwIfMismatchedStructureSizes;
core::Symbol_sp _sym__PLUS_ClaspMainFunctionName_PLUS_;
core::Symbol_sp _sym__PLUS_globalBootFunctionsName_PLUS_;
core::Symbol_sp _sym__PLUS_globalBootFunctionsNameSize_PLUS_;
core::Symbol_sp _sym_LLVMContext_O;
core::Symbol_sp _sym_Linker_O;
core::Symbol_sp _sym_Pass_O;
core::Symbol_sp _sym_AttributeSet_O;
core::Symbol_sp _sym_Triple_O;
core::Symbol_sp _sym_TargetOptions_O;
core::Symbol_sp _sym_Target_O;
core::Symbol_sp _sym_MCSubtargetInfo_O;
core::Symbol_sp _sym_TargetSubtargetInfo_O;
core::Symbol_sp _sym_TargetMachine_O;
core::Symbol_sp _sym_LLVMTargetMachine_O;
core::Symbol_sp _sym_FunctionPass_O;
core::Symbol_sp _sym_ModulePass_O;
core::Symbol_sp _sym_ImmutablePass_O;
core::Symbol_sp _sym_PassManagerBase_O;
core::Symbol_sp _sym_Value_O;
core::Symbol_sp _sym_Metadata_O;
core::Symbol_sp _sym_User_O;
core::Symbol_sp _sym_Attribute_O;
core::Symbol_sp _sym_DataLayout_O;
core::Symbol_sp _sym_Constant_O;
core::Symbol_sp _sym_ConstantArray_O;
core::Symbol_sp _sym_BlockAddress_O;
core::Symbol_sp _sym_ConstantDataSequential_O;
core::Symbol_sp _sym_ConstantDataArray_O;
core::Symbol_sp _sym_ConstantExpr_O;
core::Symbol_sp _sym_GlobalValue_O;
core::Symbol_sp _sym_GlobalVariable_O;
core::Symbol_sp _sym_ExecutionEngine_O;
core::Symbol_sp _sym_Module_O;
core::Symbol_sp _sym_DataLayoutPass_O;
core::Symbol_sp _sym_TargetLibraryInfo_O;
core::Symbol_sp _sym_FunctionPassManager_O;
core::Symbol_sp _sym_PassManager_O;
core::Symbol_sp _sym_EngineBuilder_O;
core::Symbol_sp _sym_PassManagerBuilder_O;
core::Symbol_sp _sym_APFloat_O;
core::Symbol_sp _sym_APInt_O;
core::Symbol_sp _sym_IRBuilderBase_O;
core::Symbol_sp _sym_IRBuilder_O;
core::Symbol_sp _sym_Instruction_O;
core::Symbol_sp _sym_StoreInst_O;
core::Symbol_sp _sym_FenceInst_O;
core::Symbol_sp _sym_AtomicCmpXchgInst_O;
core::Symbol_sp _sym_AtomicRMWInst_O;
core::Symbol_sp _sym_PHINode_O;
core::Symbol_sp _sym_CallInst_O;
core::Symbol_sp _sym_LandingPadInst_O;
core::Symbol_sp _sym_UnaryInstruction_O;
core::Symbol_sp _sym_AllocaInst_O;
core::Symbol_sp _sym_VAArgInst_O;
core::Symbol_sp _sym_LoadInst_O;
core::Symbol_sp _sym_TerminatorInst_O;
core::Symbol_sp _sym_BranchInst_O;
core::Symbol_sp _sym_SwitchInst_O;
core::Symbol_sp _sym_IndirectBrInst_O;
core::Symbol_sp _sym_InvokeInst_O;
core::Symbol_sp _sym_ResumeInst_O;
core::Symbol_sp _sym_UnreachableInst_O;
core::Symbol_sp _sym_ReturnInst_O;
core::Symbol_sp _sym_ConstantFP_O;
core::Symbol_sp _sym_ConstantInt_O;
core::Symbol_sp _sym_ConstantStruct_O;
core::Symbol_sp _sym_UndefValue_O;
core::Symbol_sp _sym_ConstantPointerNull_O;
core::Symbol_sp _sym_MDNode_O;
core::Symbol_sp _sym_MDString_O;
core::Symbol_sp _sym_ValueAsMetadata_O;
core::Symbol_sp _sym_NamedMDNode_O;
core::Symbol_sp _sym_Function_O;
core::Symbol_sp _sym_BasicBlock_O;
core::Symbol_sp _sym_Argument_O;
core::Symbol_sp _sym_Type_O;
core::Symbol_sp _sym_FunctionType_O;
core::Symbol_sp _sym_IntegerType_O;
core::Symbol_sp _sym_CompositeType_O;
core::Symbol_sp _sym_StructType_O;
core::Symbol_sp _sym_SequentialType_O;
core::Symbol_sp _sym_PointerType_O;
core::Symbol_sp _sym_ArrayType_O;
core::Symbol_sp _sym_VectorType_O;
core::Symbol_sp _sym_DebugInfo_O;
core::Symbol_sp _sym_DIDescriptor_O;
core::Symbol_sp _sym_DIScope_O;
core::Symbol_sp _sym_DIArray_O;
core::Symbol_sp _sym_DITypeArray_O;
core::Symbol_sp _sym_DIFile_O;
core::Symbol_sp _sym_DISubprogram_O;
core::Symbol_sp _sym_DIType_O;
core::Symbol_sp _sym_DIDerivedType_O;
core::Symbol_sp _sym_DIBasicType_O;
core::Symbol_sp _sym_DICompositeType_O;
core::Symbol_sp _sym_DISubroutineType_O;
core::Symbol_sp _sym_DILexicalBlock_O;
core::Symbol_sp _sym_DICompileUnit_O;
core::Symbol_sp _sym_DIBuilder_O;
core::Symbol_sp _sym_DebugLoc_O;
core::Symbol_sp _sym_InsertPoint_O;
} // namespace llvmo
namespace cffi {
core::Symbol_sp _sym_char;
core::Symbol_sp _sym_unsigned_char;
core::Symbol_sp _sym_short;
core::Symbol_sp _sym_unsigned_short;
core::Symbol_sp _sym_int;
core::Symbol_sp _sym_unsigned_int;
core::Symbol_sp _sym_long;
core::Symbol_sp _sym_unsigned_long;
core::Symbol_sp _sym_long_long;
core::Symbol_sp _sym_unsigned_long_long;
core::Symbol_sp _sym_int8;
core::Symbol_sp _sym_uint8;
core::Symbol_sp _sym_int16;
core::Symbol_sp _sym_uint16;
core::Symbol_sp _sym_int32;
core::Symbol_sp _sym_uint32;
core::Symbol_sp _sym_int64;
core::Symbol_sp _sym_uint64;
core::Symbol_sp _sym_size;
core::Symbol_sp _sym_ssize;
core::Symbol_sp _sym_ptrdiff;
core::Symbol_sp _sym_time;
core::Symbol_sp _sym_float;
core::Symbol_sp _sym_double;
core::Symbol_sp _sym_pointer;
core::Symbol_sp _sym_void;
core::Symbol_sp _sym_PERCENTmem_ref;
core::Symbol_sp _sym_PERCENTsetf_mem_ref;
core::Symbol_sp _sym_PERCENTforeign_type_alignment;
core::Symbol_sp _sym_PERCENTforeign_type_size;
core::Symbol_sp _sym_foreign_alloc;
core::Symbol_sp _sym_foreign_symbol_pointer;
core::Symbol_sp _sym_PERCENTload_foreign_library;
core::Symbol_sp _sym_Pointer_O;
} // namespace cffi
namespace asttooling {
core::Symbol_sp _sym_STARclangTemplateSpecializationKindSTAR;
core::Symbol_sp _sym_STARclangTemplateArgumentArgKindSTAR;
core::Symbol_sp _sym_ArgumentsAdjusterAdjust;
core::Symbol_sp _sym_bind;
core::Symbol_sp _sym_VisitStmt;
core::Symbol_sp _sym_VisitDecl;
core::Symbol_sp _sym_VisitType;
core::Symbol_sp _sym_HandleTranslationUnit;
core::Symbol_sp _sym_CreateASTConsumer;
core::Symbol_sp _sym_create;
core::Symbol_sp _sym_run;
core::Symbol_sp _sym_onStartOfTranslationUnit;
core::Symbol_sp _sym_onEndOfTranslationUnit;
core::Symbol_sp _sym_AstVisitor_O;
} // namespace asttooling
namespace serveEvent {
core::Symbol_sp _sym__PLUS_EINTR_PLUS_;
core::Symbol_sp _sym_ll_fd_zero;
core::Symbol_sp _sym_ll_fd_set;
core::Symbol_sp _sym_ll_fd_isset;
core::Symbol_sp _sym_ll_fdset_size;
core::Symbol_sp _sym_ll_serveEventNoTimeout;
core::Symbol_sp _sym_ll_serveEventWithTimeout;
} // namespace serveEvent
namespace sockets {
core::Symbol_sp _sym__PLUS_af_inet_PLUS_;
core::Symbol_sp _sym__PLUS_af_local_PLUS_;
core::Symbol_sp _sym__PLUS_sock_dgram_PLUS_;
core::Symbol_sp _sym__PLUS_sock_stream_PLUS_;
core::Symbol_sp _sym__PLUS_clasp_stream_mode_input_PLUS_;
core::Symbol_sp _sym__PLUS_clasp_stream_mode_output_PLUS_;
core::Symbol_sp _sym__PLUS_clasp_stream_mode_io_PLUS_;
core::Symbol_sp _sym__PLUS_EADDRINUSE_PLUS_;
core::Symbol_sp _sym__PLUS_EAGAIN_PLUS_;
core::Symbol_sp _sym__PLUS_EBADF_PLUS_;
core::Symbol_sp _sym__PLUS_ECONNREFUSED_PLUS_;
core::Symbol_sp _sym__PLUS_ETIMEDOUT_PLUS_;
core::Symbol_sp _sym__PLUS_EINTR_PLUS_;
core::Symbol_sp _sym__PLUS_EINVAL_PLUS_;
core::Symbol_sp _sym__PLUS_ENOBUFS_PLUS_;
core::Symbol_sp _sym__PLUS_ENOMEM_PLUS_;
core::Symbol_sp _sym__PLUS_EOPNOTSUPP_PLUS_;
core::Symbol_sp _sym__PLUS_EPERM_PLUS_;
core::Symbol_sp _sym__PLUS_EPROTONOSUPPORT_PLUS_;
core::Symbol_sp _sym__PLUS_ESOCKTNOSUPPORT_PLUS_;
core::Symbol_sp _sym__PLUS_ENETUNREACH_PLUS_;
core::Symbol_sp _sym__PLUS_NETDB_INTERNAL_PLUS_;
core::Symbol_sp _sym__PLUS_NETDB_SUCCESS_PLUS_;
core::Symbol_sp _sym__PLUS_HOST_NOT_FOUND_PLUS_;
core::Symbol_sp _sym__PLUS_TRY_AGAIN_PLUS_;
core::Symbol_sp _sym__PLUS_NO_RECOVERY_PLUS_;
core::Symbol_sp _sym__PLUS_NO_ADDRESS_PLUS_;
core::Symbol_sp _sym__PLUS_SOL_SOCKET_PLUS_;
core::Symbol_sp _sym__PLUS_IPPROTO_TCP_PLUS_;
core::Symbol_sp _sym__PLUS_SO_TYPE_PLUS_;
core::Symbol_sp _sym__PLUS_SO_RCVBUF_PLUS_;
core::Symbol_sp _sym__PLUS_SO_RCVTIMEO_PLUS_;
core::Symbol_sp _sym__PLUS_SO_SNDTIMEO_PLUS_;
core::Symbol_sp _sym__PLUS_SO_REUSEADDR_PLUS_;
core::Symbol_sp _sym__PLUS_SO_KEEPALIVE_PLUS_;
core::Symbol_sp _sym__PLUS_SO_DONTROUTE_PLUS_;
core::Symbol_sp _sym__PLUS_SO_LINGER_PLUS_;
core::Symbol_sp _sym__PLUS_SO_REUSEPORT_PLUS_;
core::Symbol_sp _sym__PLUS_TCP_NODELAY_PLUS_;
core::Symbol_sp _sym_ff_socket;
core::Symbol_sp _sym_ff_listen;
core::Symbol_sp _sym_ff_close;
core::Symbol_sp _sym_ll_get_name_service_h_errno;
core::Symbol_sp _sym_ll_socket_errno;
core::Symbol_sp _sym_ll_getNameServiceErrorMessage;
core::Symbol_sp _sym_ll_getHostByName;
core::Symbol_sp _sym_ll_getHostByAddress;
core::Symbol_sp _sym_ll_socketReceive;
core::Symbol_sp _sym_ll_getProtocolByName;
core::Symbol_sp _sym_ll_socketBind_inetSocket;
core::Symbol_sp _sym_ll_socketAccept_inetSocket;
core::Symbol_sp _sym_ll_socketConnect_inetSocket;
core::Symbol_sp _sym_ll_socketPeername_inetSocket;
core::Symbol_sp _sym_ll_socketName;
core::Symbol_sp _sym_ll_socketSendAddress;
core::Symbol_sp _sym_socketSendNoAddress;
core::Symbol_sp _sym_ll_socketBind_localSocket;
core::Symbol_sp _sym_ll_socketAccept_localSocket;
core::Symbol_sp _sym_ll_socketConnect_localSocket;
core::Symbol_sp _sym_socketPeername_localSocket;
core::Symbol_sp _sym_ll_nonBlockingMode;
core::Symbol_sp _sym_ll_setfNonBlockingMode;
core::Symbol_sp _sym_ll_dup;
core::Symbol_sp _sym_ll_makeStreamFromFd;
core::Symbol_sp _sym_ll_autoCloseTwoWayStream;
core::Symbol_sp _sym_ll_strerror;
core::Symbol_sp _sym_ll_strerror_errno;
core::Symbol_sp _sym_ll_getSockoptInt;
core::Symbol_sp _sym_ll_getSockoptBool;
core::Symbol_sp _sym_ll_getSockoptTimeval;
core::Symbol_sp _sym_ll_getSockoptLinger;
core::Symbol_sp _sym_ll_setSockoptInt;
core::Symbol_sp _sym_ll_setSockoptBool;
core::Symbol_sp _sym_ll_setSockoptTimeval;
core::Symbol_sp _sym_ll_setSockoptLinger;
} // namespace sockets
namespace gctools {
core::Symbol_sp _sym_STARallocPatternStackSTAR;
core::Symbol_sp _sym_ramp;
core::Symbol_sp _sym_rampCollectAll;
core::Symbol_sp _sym_garbageCollect;
core::Symbol_sp _sym_maxBootstrapKinds;
core::Symbol_sp _sym_bootstrapKindsP;
core::Symbol_sp _sym_bootstrapKindSymbols;
} // namespace gctools
namespace comp {
core::Symbol_sp _sym_compileInEnv;
core::Symbol_sp _sym_compileFormAndEvalWithEnv;
core::Symbol_sp _sym_STARimplicit_compile_hookSTAR;
core::Symbol_sp _sym_implicit_compile_hook_default;
core::Symbol_sp _sym_STARall_functions_for_one_compileSTAR;
core::Symbol_sp _sym_aSingleCompilerSymbol;
core::Symbol_sp _sym_STARlowLevelTraceSTAR;
core::Symbol_sp _sym_STARlowLevelTracePrintSTAR;
} // namespace comp
namespace cleavirEnv {
core::Symbol_sp _sym_macroFunction;
core::Symbol_sp _sym_symbolMacroExpansion;
} // namespace cleavirEnv
namespace cleavirPrimops {
core::Symbol_sp _sym_callWithVariableBound;
} // namespace cleavirPrimops
namespace gray {
core::Symbol_sp _sym_aSingleGraySymbol;
core::Symbol_sp _sym_open_stream_p;
core::Symbol_sp _sym_stream_read_byte;
core::Symbol_sp _sym_stream_write_byte;
core::Symbol_sp _sym_stream_read_char;
core::Symbol_sp _sym_stream_read_char_no_hang;
core::Symbol_sp _sym_stream_write_char;
core::Symbol_sp _sym_stream_write_string;
core::Symbol_sp _sym_stream_terpri;
core::Symbol_sp _sym_stream_fresh_line;
core::Symbol_sp _sym_stream_read_sequence;
core::Symbol_sp _sym_stream_write_sequence;
core::Symbol_sp _sym_stream_unread_char;
core::Symbol_sp _sym_stream_peek_char;
core::Symbol_sp _sym_stream_listen;
core::Symbol_sp _sym_streamClearInput;
core::Symbol_sp _sym_stream_clear_input;
core::Symbol_sp _sym_stream_clear_output;
core::Symbol_sp _sym_stream_force_output;
core::Symbol_sp _sym_stream_finish_output;
core::Symbol_sp _sym_streamp;
core::Symbol_sp _sym_input_stream_p;
core::Symbol_sp _sym_output_stream_p;
core::Symbol_sp _sym_stream_interactive_p;
core::Symbol_sp _sym_stream_element_type;
core::Symbol_sp _sym_stream_file_position;
core::Symbol_sp _sym_stream_line_column;
core::Symbol_sp _sym_stream_advance_to_column;
core::Symbol_sp _sym_close;
} // namespace gray
#endif
#if defined(ALLOCATE_ALL_SYMBOLS)
 cleavirEnv::_sym_macroFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLEAVIR-ENVIRONMENT",core::lispify_symbol_name("macroFunction"), true,false);
 cleavirEnv::_sym_symbolMacroExpansion = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLEAVIR-ENVIRONMENT",core::lispify_symbol_name("symbolMacroExpansion"), true,false);
 cleavirPrimops::_sym_callWithVariableBound = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLEAVIR-PRIMOP",core::lispify_symbol_name("callWithVariableBound"), true,false);
 chem::_sym_iterateMatterSymbolConverter = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("iterateMatterSymbolConverter"), false,false);
 chem::_sym_allMatter = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("allMatter"), true,false);
 chem::_sym_atoms = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("atoms"), true,false);
 chem::_sym_residues = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("residues"), true,false);
 chem::_sym_molecules = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("molecules"), true,false);
 chem::_sym_bonds = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("bonds"), true,false);
 chem::_sym_name = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("name"), true,false);
 chem::_sym__PLUS_validChemdrawKeywords_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_validChemdrawKeywords_PLUS_"), true,false);
 chem::_sym_STARparserNodeHolderSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARparserNodeHolderSTAR"), true,false);
 chem::_sym_STARSabBondEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARSabBondEnumConverterSTAR"), false,false);
 chem::_sym_STARLogicalOperatorTypeConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARLogicalOperatorTypeConverterSTAR"), false,false);
 chem::_sym_STARAtomTestEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARAtomTestEnumConverterSTAR"), false,false);
 chem::_sym_STARDonorAcceptorEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARDonorAcceptorEnumConverterSTAR"), false,false);
 chem::_sym_STAREleDielectricEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STAREleDielectricEnumConverterSTAR"), false,false);
 chem::_sym_STARVdwMixRadiusEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARVdwMixRadiusEnumConverterSTAR"), false,false);
 chem::_sym_STARVdwMixWellEnumConverterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARVdwMixWellEnumConverterSTAR"), false,false);
 chem::_sym_CDNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CDNode"), true,false);
 chem::_sym_CDBond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CDBond"), true,false);
 chem::_sym_CDFragment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CDFragment"), true,false);
 chem::_sym_CDText_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CDText"), true,false);
 chem::_sym_ChemDraw_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ChemDraw"), true,false);
 chem::_sym_Command_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Command"), true,false);
 chem::_sym_MacroModelFile_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MacroModelFile"), true,false);
 chem::_sym_ReadAmberParameters_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ReadAmberParameters"), true,false);
 chem::_sym_StructureComparer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StructureComparer"), true,false);
 chem::_sym_Structure_Old_ListEntry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StructureListEntry"), true,false);
 chem::_sym_Structure_Old_List_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StructureList"), true,false);
 chem::_sym_Twister_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Twister"), true,false);
 chem::_sym_TwisterDriver_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("TwisterDriver"), true,false);
 chem::_sym_ZMatrixInternal_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrixInternal"), true,false);
 chem::_sym_ZMatrixBondInternal_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrixBondInternal"), true,false);
 chem::_sym_ZMatrixAngleInternal_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrixAngleInternal"), true,false);
 chem::_sym_ZMatrixDihedralInternal_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrixDihedralInternal"), true,false);
 chem::_sym_ZMatrixEntry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrixEntry"), true,false);
 chem::_sym_ZMatrix_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ZMatrix"), true,false);
 chem::_sym_R = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("R"), true,false);
 chem::_sym_S = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("S"), true,false);
 chem::_sym_UnknownConfiguration = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("UnknownConfiguration"), true,false);
 chem::_sym_candoDatabase = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("candoDatabase"), false,false);
 chem::_sym_AM1_BCC_ar5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AM1_BCC_ar5"), false,false);
 chem::_sym_AM1_BCC_ar6 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AM1_BCC_ar6"), false,false);
 chem::_sym_AM1_BCC_ar7 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AM1_BCC_ar7"), false,false);
 chem::_sym_Alias_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Alias"), true,false);
 chem::_sym__PLUS_configurationEnumConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_configurationEnumConverter_PLUS_"), true,false);
 chem::_sym__PLUS_stereochemistryTypeConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_stereochemistryTypeConverter_PLUS_"), true,false);
 chem::_sym__PLUS_atomFlagSymbolConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_atomFlagSymbolConverter_PLUS_"), true,false);
 chem::_sym_configurationToSymbolConverter = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("configurationToSymbolConverter"), true,false);
 chem::_sym_stereochemistryToSymbolConverter = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("stereochemistryToSymbolConverter"), true,false);
 chem::_sym_atomNeedsMinimizer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("atomNeedsMinimizer"), true,false);
 chem::_sym_selected = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("selected"), true,false);
 chem::_sym_onGrid = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("onGrid"), true,false);
 chem::_sym_atomFixed = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("atomFixed"), true,false);
 chem::_sym_in3MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in3MemberRing"), true,false);
 chem::_sym_in4MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in4MemberRing"), true,false);
 chem::_sym_in5MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in5MemberRing"), true,false);
 chem::_sym_in6MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in6MemberRing"), true,false);
 chem::_sym_in7MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in7MemberRing"), true,false);
 chem::_sym_in8MemberRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("in8MemberRing"), true,false);
 chem::_sym_inRing = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("inRing"), true,false);
 chem::_sym__PLUS_bondOrderToSymbolConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_bondOrderToSymbolConverter_PLUS_"), true,false);
 chem::_sym_AtomIdToAtomMap_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomIdToAtomMap"), true,false);
 chem::_sym_AtomId_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomId"), true,false);
 chem::_sym__PLUS_elementToSymbolConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_elementToSymbolConverter_PLUS_"), true,false);
 chem::_sym__PLUS_hybridizationToSymbolConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_hybridizationToSymbolConverter_PLUS_"), true,false);
 chem::_sym__PLUS_elementColors_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_elementColors_PLUS_"), true,false);
 chem::_sym__PLUS_minimizerStatusConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_minimizerStatusConverter_PLUS_"), false,false);
 chem::_sym__PLUS_preconditionerTypeConverter_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("_PLUS_preconditionerTypeConverter_PLUS_"), false,false);
 chem::_sym_MinimizerExceededMaxStepsError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MinimizerExceededMaxStepsError"), true,false);
 chem::_sym_MinimizerStuckError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MinimizerStuckError"), true,false);
 chem::_sym_MinimizerError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MinimizerError"), true,false);
 chem::_sym_noPreconditioner = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("noPreconditioner"), true,false);
 chem::_sym_hessianPreconditioner = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("hessianPreconditioner"), true,false);
 chem::_sym_minimizerError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("minimizerError"), true,false);
 chem::_sym_minimizerSucceeded = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("minimizerSucceeded"), true,false);
 chem::_sym_truncatedNewtonRunning = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("truncatedNewtonRunning"), true,false);
 chem::_sym_conjugateGradientRunning = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("conjugateGradientRunning"), true,false);
 chem::_sym_steepestDescentRunning = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("steepestDescentRunning"), true,false);
 chem::_sym_minimizerIdle = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("minimizerIdle"), true,false);
 chem::_sym_Angle_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Angle"), true,false);
 chem::_sym_ProperTorsion_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ProperTorsion"), true,false);
 chem::_sym_ImproperTorsion_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ImproperTorsion"), true,false);
 chem::_sym_AtomIndexer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomIndexer"), true,false);
 chem::_sym_MapOfMonomerNamesToAtomIndexers_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MapOfMonomerNamesToAtomIndexers"), true,false);
 chem::_sym_MonomerPack_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MonomerPack"), true,false);
 chem::_sym_StereoConfiguration_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StereoConfiguration"), true,false);
 chem::_sym_Stereoisomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Stereoisomer"), true,false);
 chem::_sym_StereoInformation_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StereoInformation"), true,false);
 chem::_sym_ConformationExplorerEntryStage_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationExplorerEntryStage"), true,false);
 chem::_sym_ConformationExplorerEntry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationExplorerEntry"), true,false);
 chem::_sym_ConformationExplorer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationExplorer"), true,false);
 chem::_sym_ConformationExplorerMatch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationExplorerMatch"), true,false);
 chem::_sym_MonomerCoordinates_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MonomerCoordinates"), true,false);
 chem::_sym_ConformationCollectionEntry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationCollectionEntry"), true,false);
 chem::_sym_ConformationCollection_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConformationCollection"), true,false);
 chem::_sym_SuperposableConformationCollection_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SuperposableConformationCollection"), true,false);
 chem::_sym_FrameRecognizer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FrameRecognizer"), true,false);
 chem::_sym_Rotamer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Rotamer"), true,false);
 chem::_sym_AtomReferenceBase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomReferenceBase"), true,false);
 chem::_sym_AtomReference_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomReference"), true,false);
 chem::_sym_RepresentedEntityNameSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RepresentedEntityNameSet"), true,false);
 chem::_sym_CoordinateSystem_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CoordinateSystem"), true,false);
 chem::_sym_PdbMonomerConnectivity_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PdbMonomerConnectivity"), true,false);
 chem::_sym_PdbMonomerDatabase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PdbMonomerDatabase"), true,false);
 chem::_sym_StereoisomerAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StereoisomerAtom"), true,false);
 chem::_sym_StereoisomerVirtualAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StereoisomerVirtualAtom"), true,false);
 chem::_sym_StereoisomerAtoms_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StereoisomerAtoms"), true,false);
 chem::_sym_ConstitutionBond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConstitutionBond"), true,false);
 chem::_sym_ConstitutionAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConstitutionAtom"), true,false);
 chem::_sym_ConstitutionVirtualAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConstitutionVirtualAtom"), true,false);
 chem::_sym_ConstitutionAtoms_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ConstitutionAtoms"), true,false);
 chem::_sym_TrajectoryFrame_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("TrajectoryFrame"), true,false);
 chem::_sym_Trajectory_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Trajectory"), true,false);
 chem::_sym_CipPrioritizer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CipPrioritizer"), true,false);
 chem::_sym_AtomTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomTable"), true,false);
 chem::_sym_EnergyComponent_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyComponent"), true,false);
 chem::_sym_EnergyStretch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyStretch"), true,false);
 chem::_sym_EnergyAngle_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyAngle"), true,false);
 chem::_sym_EnergyDihedral_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyDihedral"), true,false);
 chem::_sym_EnergyNonbond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyNonbond"), true,false);
 chem::_sym_EnergyImproperRestraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyImproperRestraint"), true,false);
 chem::_sym_EnergyChiralRestraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyChiralRestraint"), true,false);
 chem::_sym_EnergyAnchorRestraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyAnchorRestraint"), true,false);
 chem::_sym_EnergyFixedNonbondRestraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyFixedNonbondRestraint"), true,false);
 chem::_sym_nonbondTerm = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("nonbondTerm"), true,false);
 chem::_sym_restraintAnchor = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("restraintAnchor"), true,false);
 chem::_sym_InteractionError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("InteractionError"), true,false);
 chem::_sym_LinearAngleError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("LinearAngleError"), true,false);
 chem::_sym_LinearDihedralError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("LinearDihedralError"), true,false);
 chem::_sym_LinearImproperRestraintError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("LinearImproperRestraintError"), true,false);
 chem::_sym_OverlappingNonbondError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OverlappingNonbondError"), true,false);
 chem::_sym_ComplexRestraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ComplexRestraint"), true,false);
 chem::_sym_RestrainedExoCyclicAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestrainedExoCyclicAtom"), true,false);
 chem::_sym_RestrainedPiBond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestrainedPiBond"), true,false);
 chem::_sym_SearchStatistics_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SearchStatistics"), true,false);
 chem::_sym_Constitution_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Constitution"), true,false);
 chem::_sym_CalculatePosition_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CalculatePosition"), true,false);
 chem::_sym_CalculatePositionUsingInternals_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CalculatePositionUsingInternals"), true,false);
 chem::_sym_CalculatePositionAlongBond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CalculatePositionAlongBond"), true,false);
 chem::_sym_CalculatePositionRelativeToOrigin_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CalculatePositionRelativeToOrigin"), true,false);
 chem::_sym_Oligomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Oligomer"), true,false);
 chem::_sym_OligomerPart_Base_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OligomerPart-Base"), true,false);
 chem::_sym_OligomerPart_Monomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OligomerPart-Monomer"), true,false);
 chem::_sym_OligomerPart_Link_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OligomerPart-Link"), true,false);
 chem::_sym_Entity_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Entity"), true,false);
 chem::_sym_Monomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Monomer"), true,false);
 chem::_sym_OneMonomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OneMonomer"), true,false);
 chem::_sym_MultiMonomer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MultiMonomer"), true,false);
 chem::_sym_CandoDatabase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("CandoDatabase"), true,false);
 chem::_sym_Topology_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Topology"), true,false);
 chem::_sym_StatusTracker_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StatusTracker"), true,false);
 chem::_sym_EntityNameSetBase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EntityNameSetBase"), true,false);
 chem::_sym_EntityNameSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EntityNameSet"), true,false);
 chem::_sym_EntityNameSetWithCap_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EntityNameSetWithCap"), true,false);
 chem::_sym_MonomerContext_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MonomerContext"), true,false);
 chem::_sym_Coupling_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Coupling"), true,false);
 chem::_sym_DirectionalCoupling_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("DirectionalCoupling"), true,false);
 chem::_sym_RingCoupling_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RingCoupling"), true,false);
 chem::_sym_Mate_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Mate"), true,false);
 chem::_sym_RingClosingMate_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RingClosingMate"), true,false);
 chem::_sym_Plug_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Plug"), true,false);
 chem::_sym_PlugWithMates_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PlugWithMates"), true,false);
 chem::_sym_OutPlug_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OutPlug"), true,false);
 chem::_sym_InPlug_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("InPlug"), true,false);
 chem::_sym_JumpPlug_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("JumpPlug"), true,false);
 chem::_sym_RingClosingPlug_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RingClosingPlug"), true,false);
 chem::_sym_SpecificContext_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SpecificContext"), true,false);
 chem::_sym_SpecificContextSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SpecificContextSet"), true,false);
 chem::_sym_SpanningLoop_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SpanningLoop"), true,false);
 chem::_sym_SuperposeEngine_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SuperposeEngine"), true,false);
 chem::_sym_SuperposeSelectedAtoms_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SuperposeSelectedAtoms"), true,false);
 chem::_sym_superpose = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("superpose"), true,false);
 chem::_sym_VirtualSphere_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("VirtualSphere"), true,false);
 chem::_sym_idle = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("idle"), true,false);
 chem::_sym_translate = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("translate"), true,false);
 chem::_sym_rotate = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("rotate"), true,false);
 chem::_sym_scale = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("scale"), true,false);
 chem::_sym_OneTypeRule_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("OneTypeRule"), true,false);
 chem::_sym_TypeAssignmentRules_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("TypeAssignmentRules"), true,false);
 chem::_sym_STARsybyl_type_assignment_rulesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("STARsybyl_type_assignment_rulesSTAR"), true,false);
 chem::_sym_FFParameter_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFParameter"), true,false);
 chem::_sym_FFBaseDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFBaseDb"), true,false);
 chem::_sym_ChemInfoMatch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ChemInfoMatch"), true,false);
 chem::_sym_WildElementDict_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("WildElementDict"), true,false);
 chem::_sym_ChemInfoNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ChemInfoNode"), true,false);
 chem::_sym_ResidueList_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ResidueList"), true,false);
 chem::_sym_RootMatchNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RootMatchNode"), true,false);
 chem::_sym_BondMatchNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("BondMatchNode"), true,false);
 chem::_sym_AtomOrBondMatchNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomOrBondMatchNode"), true,false);
 chem::_sym_BondListMatchNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("BondListMatchNode"), true,false);
 chem::_sym_Logical_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Logical"), true,false);
 chem::_sym_TagSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("TagSet"), true,false);
 chem::_sym_RingTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RingTest"), true,false);
 chem::_sym_ResidueTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ResidueTest"), true,false);
 chem::_sym_BondTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("BondTest"), true,false);
 chem::_sym_AntechamberBondTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AntechamberBondTest"), true,false);
 chem::_sym_AtomTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AtomTest"), true,false);
 chem::_sym_AntechamberFocusAtomMatch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AntechamberFocusAtomMatch"), true,false);
 chem::_sym_Chain_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Chain"), true,false);
 chem::_sym_Branch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Branch"), true,false);
 chem::_sym_AfterMatchBondTest_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AfterMatchBondTest"), true,false);
 chem::_sym_Root_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Root"), true,false);
 chem::_sym_SmartsRoot_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SmartsRoot"), true,false);
 chem::_sym_AntechamberRoot_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AntechamberRoot"), true,false);
 chem::_sym_ChemInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ChemInfo"), true,false);
 chem::_sym_FFTypesDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFTypesDb"), true,false);
 chem::_sym_FFStretch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFStretch"), true,false);
 chem::_sym_FFStretchDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFStretchDb"), true,false);
 chem::_sym_FFAngle_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFAngle"), true,false);
 chem::_sym_FFAngleDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFAngleDb"), true,false);
 chem::_sym_FFItor_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFItor"), true,false);
 chem::_sym_FFItorDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFItorDb"), true,false);
 chem::_sym_FFPtor_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFPtor"), true,false);
 chem::_sym_FFPtorDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFPtorDb"), true,false);
 chem::_sym_FFNonbondCrossTermTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFNonbondCrossTermTable"), true,false);
 chem::_sym_FFNonbond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFNonbond"), true,false);
 chem::_sym_FFNonbondDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFNonbondDb"), true,false);
 chem::_sym_FFVdw_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFVdw"), true,false);
 chem::_sym_FFVdwDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FFVdwDb"), true,false);
 chem::_sym_InfoDb_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("InfoDb"), true,false);
 chem::_sym_ForceField_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ForceField"), true,false);
 chem::_sym_EnergyFunction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("EnergyFunction"), true,false);
 chem::_sym_AbstractLargeSquareMatrix_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AbstractLargeSquareMatrix"), true,false);
 chem::_sym_FullLargeSquareMatrix_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("FullLargeSquareMatrix"), true,false);
 chem::_sym_SparseLargeSquareMatrix_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("SparseLargeSquareMatrix"), true,false);
 chem::_sym_NumericalFunction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("NumericalFunction"), true,false);
 chem::_sym_NVector_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("NVector"), true,false);
 chem::_sym_ReportBase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ReportBase"), true,false);
 chem::_sym_MessageReport_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MessageReport"), true,false);
 chem::_sym_ForceMatchReport_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("ForceMatchReport"), true,false);
 chem::_sym_StepReport_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("StepReport"), true,false);
 chem::_sym_MinimizerLog_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("MinimizerLog"), true,false);
 chem::_sym_Minimizer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Minimizer"), true,false);
 chem::_sym_IterateMatter_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("IterateMatter"), true,false);
 chem::_sym_IterateAtoms_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("IterateAtoms"), true,false);
 chem::_sym_IterateResidues_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("IterateResidues"), true,false);
 chem::_sym_IterateBonds_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("IterateBonds"), true,false);
 chem::_sym_IterateRestraints_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("IterateRestraints"), true,false);
 chem::_sym_Restraint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Restraint"), true,false);
 chem::_sym_RestraintAnchor_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintAnchor"), true,false);
 chem::_sym_RestraintChiral_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintChiral"), true,false);
 chem::_sym_RestraintDistance_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintDistance"), true,false);
 chem::_sym_RestraintAngle_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintAngle"), true,false);
 chem::_sym_RestraintDihedral_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintDihedral"), true,false);
 chem::_sym_RestraintFixedNonbond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintFixedNonbond"), true,false);
 chem::_sym_RestraintList_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RestraintList"), true,false);
 chem::_sym_PdbReader_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PdbReader"), true,false);
 chem::_sym_PdbWriter_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PdbWriter"), true,false);
 chem::_sym_PathMessage_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("PathMessage"), true,false);
 chem::_sym_AGVertex_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AGVertex"), true,false);
 chem::_sym_AGEdge_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("AGEdge"), true,false);
 chem::_sym_RingFinder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("RingFinder"), true,false);
 chem::_sym_Matter_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Matter"), true,false);
 chem::_sym_Atom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Atom"), true,false);
 chem::_sym_Residue_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Residue"), true,false);
 chem::_sym_Molecule_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Molecule"), true,false);
 chem::_sym_Aggregate_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Aggregate"), true,false);
 chem::_sym_VirtualAtom_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("VirtualAtom"), true,false);
 chem::_sym_Bond_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("Bond"), true,false);
 chem::_sym_BondList_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CHEM",core::lispify_symbol_name("BondList"), true,false);
 chemkw::_sym_undefinedConfiguration = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("undefinedConfiguration"), true,false);
 chemkw::_sym_R = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("R"), true,false);
 chemkw::_sym_undefinedCenter = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("undefinedCenter"), true,false);
 chemkw::_sym_chiral = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("chiral"), true,false);
 chemkw::_sym_prochiral = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("prochiral"), true,false);
 chemkw::_sym__singleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_singleBond"), true,false);
 chemkw::_sym__doubleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_doubleBond"), true,false);
 chemkw::_sym__tripleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_tripleBond"), true,false);
 chemkw::_sym__aromaticBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_aromaticBond"), true,false);
 chemkw::_sym__hydrogenBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_hydrogenBond"), true,false);
 chemkw::_sym__virtualBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_virtualBond"), true,false);
 chemkw::_sym__dashedSingleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_dashedSingleBond"), true,false);
 chemkw::_sym__dashedDoubleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("_dashedDoubleBond"), true,false);
 chemkw::_sym_noBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("noBond"), true,false);
 chemkw::_sym_singleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("singleBond"), true,false);
 chemkw::_sym_doubleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("doubleBond"), true,false);
 chemkw::_sym_tripleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("tripleBond"), true,false);
 chemkw::_sym_aromaticBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("aromaticBond"), true,false);
 chemkw::_sym_hydrogenBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("hydrogenBond"), true,false);
 chemkw::_sym_virtualBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("virtualBond"), true,false);
 chemkw::_sym_dashedSingleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("dashedSingleBond"), true,false);
 chemkw::_sym_dashedDoubleBond = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("dashedDoubleBond"), true,false);
 chemkw::_sym_C = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("C"), true,false);
 chemkw::_sym_N = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("N"), true,false);
 chemkw::_sym_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("O"), true,false);
 chemkw::_sym_S = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("S"), true,false);
 chemkw::_sym_P = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("P"), true,false);
 chemkw::_sym_F = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("F"), true,false);
 chemkw::_sym_Cl = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("Cl"), true,false);
 chemkw::_sym_Br = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("Br"), true,false);
 chemkw::_sym_I = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("I"), true,false);
 chemkw::_sym_message = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("message"), true,false);
 chemkw::_sym_constitution = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("constitution"), true,false);
 chemkw::_sym_entity = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("entity"), true,false);
 chemkw::_sym_frameRecognizer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("frameRecognizer"), true,false);
 chemkw::_sym_E = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("E"), true,false);
 chemkw::_sym_Z = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("Z"), true,false);
 chemkw::_sym_1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("1"), true,false);
 chemkw::_sym_2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("2"), true,false);
 chemkw::_sym_3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("3"), true,false);
 chemkw::_sym_4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("4"), true,false);
 chemkw::_sym_5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("5"), true,false);
 chemkw::_sym_6 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("6"), true,false);
 chemkw::_sym_idle = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("idle"), true,false);
 chemkw::_sym_translate = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("translate"), true,false);
 chemkw::_sym_rotate = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("rotate"), true,false);
 chemkw::_sym_scale = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("scale"), true,false);
 chemkw::_sym_XX = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("XX"), true,false);
 chemkw::_sym_XA = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("XA"), true,false);
 chemkw::_sym_XB = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("XB"), true,false);
 chemkw::_sym_XC = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("XC"), true,false);
 chemkw::_sym_XD = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("XD"), true,false);
 chemkw::_sym_parameterized = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("parameterized"), true,false);
 chemkw::_sym_estimated = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("estimated"), true,false);
 chemkw::_sym_rough = bootStrapSymbolMap->maybe_allocate_unique_symbol("CKW",core::lispify_symbol_name("rough"), true,false);
 adapt::_sym_SymbolList_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("SymbolList"), true,false);
 adapt::_sym_StringList_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("StringList"), true,false);
 adapt::_sym_IterateCons_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("IterateCons"), true,false);
 adapt::_sym_StringSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("StringSet"), true,false);
 adapt::_sym_IndexedObjectBag_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("IndexedObjectBag"), true,false);
 adapt::_sym_QDomNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("QDomNode"), true,false);
 adapt::_sym_SymbolSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("SymbolSet"), true,false);
 adapt::_sym_ObjectSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("ADAPT",core::lispify_symbol_name("ObjectSet"), true,false);
 units::_sym_NamedUnit_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("NamedUnit"), true,false);
 units::_sym_meters = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("meters"), true,false);
 units::_sym_kilometers = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilometers"), true,false);
 units::_sym_millimeters = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("millimeters"), true,false);
 units::_sym_micrometers = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("micrometers"), true,false);
 units::_sym_nanometers = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("nanometers"), true,false);
 units::_sym_picometers = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("picometers"), true,false);
 units::_sym_angstroms = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("angstroms"), true,false);
 units::_sym_kilograms = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilograms"), true,false);
 units::_sym_grams = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("grams"), true,false);
 units::_sym_daltons = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("daltons"), true,false);
 units::_sym_seconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("seconds"), true,false);
 units::_sym_milliseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("milliseconds"), true,false);
 units::_sym_microseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("microseconds"), true,false);
 units::_sym_nanoseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("nanoseconds"), true,false);
 units::_sym_picoseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("picoseconds"), true,false);
 units::_sym_femtoseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("femtoseconds"), true,false);
 units::_sym_per_picosecond = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("per_picosecond"), true,false);
 units::_sym_amperes = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("amperes"), true,false);
 units::_sym_coulomb = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("coulomb"), true,false);
 units::_sym_elementaryCharge = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("elementaryCharge"), true,false);
 units::_sym_kelvin = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kelvin"), true,false);
 units::_sym_candelas = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("candelas"), true,false);
 units::_sym_moles = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("moles"), true,false);
 units::_sym_Joule = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("Joule"), true,false);
 units::_sym_joule = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("joule"), true,false);
 units::_sym_Joules = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("Joules"), true,false);
 units::_sym_joules = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("joules"), true,false);
 units::_sym_kiloJoule = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kiloJoule"), true,false);
 units::_sym_kilojoule = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilojoule"), true,false);
 units::_sym_kiloJoules = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kiloJoules"), true,false);
 units::_sym_kilojoules = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilojoules"), true,false);
 units::_sym_kiloJoules_per_mole = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kiloJoules_per_mole"), true,false);
 units::_sym_kilojoules_per_mole = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilojoules_per_mole"), true,false);
 units::_sym_kiloCalories_per_mole = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kiloCalories_per_mole"), true,false);
 units::_sym_kilocalories_per_mole = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("kilocalories_per_mole"), true,false);
 units::_sym_nm_per_ps = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("nm_per_ps"), true,false);
 units::_sym_Dimension_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("Dimension"), true,false);
 units::_sym_Unit_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("Unit"), true,false);
 units::_sym_Quantity_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("UNITS",core::lispify_symbol_name("Quantity"), true,false);
 geom::_sym_colorTable = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("colorTable"), true,false);
 geom::_sym_OVector2_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("OVector2"), true,false);
 geom::_sym_BoundingBox_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("BoundingBox"), true,false);
 geom::_sym_Color_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("Color"), true,false);
 geom::_sym_OMatrix_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("OMatrix"), true,false);
 geom::_sym_CoordinateArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("CoordinateArray"), true,false);
 geom::_sym_CoordinateArrayWithHash_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("CoordinateArrayWithHash"), true,false);
 geom::_sym_OVector3_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("GEOM",core::lispify_symbol_name("OVector3"), true,false);
 asttooling::_sym_STARclangTemplateSpecializationKindSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("STARclangTemplateSpecializationKindSTAR"), true,false);
 asttooling::_sym_STARclangTemplateArgumentArgKindSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("STARclangTemplateArgumentArgKindSTAR"), true,false);
 asttooling::_sym_ArgumentsAdjusterAdjust = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("ArgumentsAdjusterAdjust"), true,false);
 asttooling::_sym_bind = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("bind"), true,false);
 asttooling::_sym_VisitStmt = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("VisitStmt"), true,false);
 asttooling::_sym_VisitDecl = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("VisitDecl"), true,false);
 asttooling::_sym_VisitType = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("VisitType"), true,false);
 asttooling::_sym_HandleTranslationUnit = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("HandleTranslationUnit"), true,false);
 asttooling::_sym_CreateASTConsumer = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("CreateASTConsumer"), true,false);
 asttooling::_sym_create = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("create"), true,false);
 asttooling::_sym_run = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("run"), true,false);
 asttooling::_sym_onStartOfTranslationUnit = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("onStartOfTranslationUnit"), true,false);
 asttooling::_sym_onEndOfTranslationUnit = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("onEndOfTranslationUnit"), true,false);
 asttooling::_sym_AstVisitor_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("AST-TOOLING",core::lispify_symbol_name("AstVisitor"), true,false);
 serveEvent::_sym__PLUS_EINTR_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("_PLUS_EINTR_PLUS_"), true,false);
 serveEvent::_sym_ll_fd_zero = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_fd_zero"), true,false);
 serveEvent::_sym_ll_fd_set = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_fd_set"), true,false);
 serveEvent::_sym_ll_fd_isset = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_fd_isset"), true,false);
 serveEvent::_sym_ll_fdset_size = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_fdset_size"), true,false);
 serveEvent::_sym_ll_serveEventNoTimeout = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_serveEventNoTimeout"), true,false);
 serveEvent::_sym_ll_serveEventWithTimeout = bootStrapSymbolMap->maybe_allocate_unique_symbol("SERVE-EVENT-INTERNAL",core::lispify_symbol_name("ll_serveEventWithTimeout"), true,false);
 sockets::_sym__PLUS_af_inet_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_af_inet_PLUS_"), true,false);
 sockets::_sym__PLUS_af_local_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_af_local_PLUS_"), true,false);
 sockets::_sym__PLUS_sock_dgram_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_sock_dgram_PLUS_"), true,false);
 sockets::_sym__PLUS_sock_stream_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_sock_stream_PLUS_"), true,false);
 sockets::_sym__PLUS_clasp_stream_mode_input_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_clasp_stream_mode_input_PLUS_"), true,false);
 sockets::_sym__PLUS_clasp_stream_mode_output_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_clasp_stream_mode_output_PLUS_"), true,false);
 sockets::_sym__PLUS_clasp_stream_mode_io_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_clasp_stream_mode_io_PLUS_"), true,false);
 sockets::_sym__PLUS_EADDRINUSE_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EADDRINUSE_PLUS_"), true,false);
 sockets::_sym__PLUS_EAGAIN_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EAGAIN_PLUS_"), true,false);
 sockets::_sym__PLUS_EBADF_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EBADF_PLUS_"), true,false);
 sockets::_sym__PLUS_ECONNREFUSED_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ECONNREFUSED_PLUS_"), true,false);
 sockets::_sym__PLUS_ETIMEDOUT_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ETIMEDOUT_PLUS_"), true,false);
 sockets::_sym__PLUS_EINTR_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EINTR_PLUS_"), true,false);
 sockets::_sym__PLUS_EINVAL_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EINVAL_PLUS_"), true,false);
 sockets::_sym__PLUS_ENOBUFS_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ENOBUFS_PLUS_"), true,false);
 sockets::_sym__PLUS_ENOMEM_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ENOMEM_PLUS_"), true,false);
 sockets::_sym__PLUS_EOPNOTSUPP_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EOPNOTSUPP_PLUS_"), true,false);
 sockets::_sym__PLUS_EPERM_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EPERM_PLUS_"), true,false);
 sockets::_sym__PLUS_EPROTONOSUPPORT_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_EPROTONOSUPPORT_PLUS_"), true,false);
 sockets::_sym__PLUS_ESOCKTNOSUPPORT_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ESOCKTNOSUPPORT_PLUS_"), true,false);
 sockets::_sym__PLUS_ENETUNREACH_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_ENETUNREACH_PLUS_"), true,false);
 sockets::_sym__PLUS_NETDB_INTERNAL_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_NETDB_INTERNAL_PLUS_"), true,false);
 sockets::_sym__PLUS_NETDB_SUCCESS_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_NETDB_SUCCESS_PLUS_"), true,false);
 sockets::_sym__PLUS_HOST_NOT_FOUND_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_HOST_NOT_FOUND_PLUS_"), true,false);
 sockets::_sym__PLUS_TRY_AGAIN_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_TRY_AGAIN_PLUS_"), true,false);
 sockets::_sym__PLUS_NO_RECOVERY_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_NO_RECOVERY_PLUS_"), true,false);
 sockets::_sym__PLUS_NO_ADDRESS_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_NO_ADDRESS_PLUS_"), true,false);
 sockets::_sym__PLUS_SOL_SOCKET_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SOL_SOCKET_PLUS_"), true,false);
 sockets::_sym__PLUS_IPPROTO_TCP_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_IPPROTO_TCP_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_TYPE_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_TYPE_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_RCVBUF_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_RCVBUF_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_RCVTIMEO_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_RCVTIMEO_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_SNDTIMEO_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_SNDTIMEO_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_REUSEADDR_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_REUSEADDR_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_KEEPALIVE_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_KEEPALIVE_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_DONTROUTE_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_DONTROUTE_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_LINGER_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_LINGER_PLUS_"), true,false);
 sockets::_sym__PLUS_SO_REUSEPORT_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_SO_REUSEPORT_PLUS_"), true,false);
 sockets::_sym__PLUS_TCP_NODELAY_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("_PLUS_TCP_NODELAY_PLUS_"), true,false);
 sockets::_sym_ff_socket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ff_socket"), true,false);
 sockets::_sym_ff_listen = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ff_listen"), true,false);
 sockets::_sym_ff_close = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ff_close"), true,false);
 sockets::_sym_ll_get_name_service_h_errno = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_get_name_service_h_errno"), true,false);
 sockets::_sym_ll_socket_errno = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socket_errno"), true,false);
 sockets::_sym_ll_getNameServiceErrorMessage = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getNameServiceErrorMessage"), true,false);
 sockets::_sym_ll_getHostByName = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getHostByName"), true,false);
 sockets::_sym_ll_getHostByAddress = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getHostByAddress"), true,false);
 sockets::_sym_ll_socketReceive = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketReceive"), true,false);
 sockets::_sym_ll_getProtocolByName = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getProtocolByName"), true,false);
 sockets::_sym_ll_socketBind_inetSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketBind_inetSocket"), true,false);
 sockets::_sym_ll_socketAccept_inetSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketAccept_inetSocket"), true,false);
 sockets::_sym_ll_socketConnect_inetSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketConnect_inetSocket"), true,false);
 sockets::_sym_ll_socketPeername_inetSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketPeername_inetSocket"), true,false);
 sockets::_sym_ll_socketName = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketName"), true,false);
 sockets::_sym_ll_socketSendAddress = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketSendAddress"), true,false);
 sockets::_sym_socketSendNoAddress = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("socketSendNoAddress"), true,false);
 sockets::_sym_ll_socketBind_localSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketBind_localSocket"), true,false);
 sockets::_sym_ll_socketAccept_localSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketAccept_localSocket"), true,false);
 sockets::_sym_ll_socketConnect_localSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_socketConnect_localSocket"), true,false);
 sockets::_sym_socketPeername_localSocket = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("socketPeername_localSocket"), true,false);
 sockets::_sym_ll_nonBlockingMode = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_nonBlockingMode"), true,false);
 sockets::_sym_ll_setfNonBlockingMode = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_setfNonBlockingMode"), true,false);
 sockets::_sym_ll_dup = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_dup"), true,false);
 sockets::_sym_ll_makeStreamFromFd = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_makeStreamFromFd"), true,false);
 sockets::_sym_ll_autoCloseTwoWayStream = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_autoCloseTwoWayStream"), true,false);
 sockets::_sym_ll_strerror = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_strerror"), true,false);
 sockets::_sym_ll_strerror_errno = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_strerror_errno"), true,false);
 sockets::_sym_ll_getSockoptInt = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getSockoptInt"), true,false);
 sockets::_sym_ll_getSockoptBool = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getSockoptBool"), true,false);
 sockets::_sym_ll_getSockoptTimeval = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getSockoptTimeval"), true,false);
 sockets::_sym_ll_getSockoptLinger = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_getSockoptLinger"), true,false);
 sockets::_sym_ll_setSockoptInt = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_setSockoptInt"), true,false);
 sockets::_sym_ll_setSockoptBool = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_setSockoptBool"), true,false);
 sockets::_sym_ll_setSockoptTimeval = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_setSockoptTimeval"), true,false);
 sockets::_sym_ll_setSockoptLinger = bootStrapSymbolMap->maybe_allocate_unique_symbol("SOCKETS-INTERNAL",core::lispify_symbol_name("ll_setSockoptLinger"), true,false);
 clbind::_sym_STARtheClassRegistrySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLBIND",core::lispify_symbol_name("STARtheClassRegistrySTAR"), true,false);
 clbind::_sym_ClassRegistry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLBIND",core::lispify_symbol_name("ClassRegistry"), true,false);
 clbind::_sym_ClassRep_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLBIND",core::lispify_symbol_name("ClassRep"), true,false);
 gctools::_sym_STARallocPatternStackSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("STARallocPatternStackSTAR"), true,false);
 gctools::_sym_ramp = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("ramp"), true,false);
 gctools::_sym_rampCollectAll = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("rampCollectAll"), true,false);
 gctools::_sym_garbageCollect = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("garbageCollect"), true,false);
 gctools::_sym_maxBootstrapKinds = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("maxBootstrapKinds"), true,false);
 gctools::_sym_bootstrapKindsP = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("bootstrapKindsP"), true,false);
 gctools::_sym_bootstrapKindSymbols = bootStrapSymbolMap->maybe_allocate_unique_symbol("GCTOOLS",core::lispify_symbol_name("bootstrapKindSymbols"), true,false);
 llvmo::_sym_dwTag = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("dwTag"), true,false);
 llvmo::_sym_LLVMDebugVersion11 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion11"), true,false);
 llvmo::_sym_LLVMDebugVersion10 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion10"), true,false);
 llvmo::_sym_LLVMDebugVersion9 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion9"), true,false);
 llvmo::_sym_LLVMDebugVersion8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion8"), true,false);
 llvmo::_sym_LLVMDebugVersion7 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion7"), true,false);
 llvmo::_sym_LLVMDebugVersion6 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion6"), true,false);
 llvmo::_sym_LLVMDebugVersion5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion5"), true,false);
 llvmo::_sym_LLVMDebugVersion4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMDebugVersion4"), true,false);
 llvmo::_sym__PLUS_DebugMetadataVersion_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("_PLUS_DebugMetadataVersion_PLUS_"), true,false);
 llvmo::_sym_DW_TAG_array_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_array_type"), true,false);
 llvmo::_sym_DW_TAG_class_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_class_type"), true,false);
 llvmo::_sym_DW_TAG_entry_point = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_entry_point"), true,false);
 llvmo::_sym_DW_TAG_enumeration_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_enumeration_type"), true,false);
 llvmo::_sym_DW_TAG_formal_parameter = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_formal_parameter"), true,false);
 llvmo::_sym_DW_TAG_imported_declaration = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_imported_declaration"), true,false);
 llvmo::_sym_DW_TAG_label = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_label"), true,false);
 llvmo::_sym_DW_TAG_lexical_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_lexical_block"), true,false);
 llvmo::_sym_DW_TAG_member = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_member"), true,false);
 llvmo::_sym_DW_TAG_pointer_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_pointer_type"), true,false);
 llvmo::_sym_DW_TAG_reference_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_reference_type"), true,false);
 llvmo::_sym_DW_TAG_compile_unit = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_compile_unit"), true,false);
 llvmo::_sym_DW_TAG_string_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_string_type"), true,false);
 llvmo::_sym_DW_TAG_structure_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_structure_type"), true,false);
 llvmo::_sym_DW_TAG_subroutine_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_subroutine_type"), true,false);
 llvmo::_sym_DW_TAG_typedef = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_typedef"), true,false);
 llvmo::_sym_DW_TAG_union_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_union_type"), true,false);
 llvmo::_sym_DW_TAG_unspecified_parameters = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_unspecified_parameters"), true,false);
 llvmo::_sym_DW_TAG_variant = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_variant"), true,false);
 llvmo::_sym_DW_TAG_common_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_common_block"), true,false);
 llvmo::_sym_DW_TAG_common_inclusion = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_common_inclusion"), true,false);
 llvmo::_sym_DW_TAG_inheritance = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_inheritance"), true,false);
 llvmo::_sym_DW_TAG_inlined_subroutine = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_inlined_subroutine"), true,false);
 llvmo::_sym_DW_TAG_module = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_module"), true,false);
 llvmo::_sym_DW_TAG_ptr_to_member_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_ptr_to_member_type"), true,false);
 llvmo::_sym_DW_TAG_set_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_set_type"), true,false);
 llvmo::_sym_DW_TAG_subrange_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_subrange_type"), true,false);
 llvmo::_sym_DW_TAG_with_stmt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_with_stmt"), true,false);
 llvmo::_sym_DW_TAG_access_declaration = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_access_declaration"), true,false);
 llvmo::_sym_DW_TAG_base_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_base_type"), true,false);
 llvmo::_sym_DW_TAG_catch_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_catch_block"), true,false);
 llvmo::_sym_DW_TAG_const_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_const_type"), true,false);
 llvmo::_sym_DW_TAG_constant = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_constant"), true,false);
 llvmo::_sym_DW_TAG_enumerator = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_enumerator"), true,false);
 llvmo::_sym_DW_TAG_file_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_file_type"), true,false);
 llvmo::_sym_DW_TAG_friend = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_friend"), true,false);
 llvmo::_sym_DW_TAG_namelist = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_namelist"), true,false);
 llvmo::_sym_DW_TAG_namelist_item = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_namelist_item"), true,false);
 llvmo::_sym_DW_TAG_packed_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_packed_type"), true,false);
 llvmo::_sym_DW_TAG_subprogram = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_subprogram"), true,false);
 llvmo::_sym_DW_TAG_template_type_parameter = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_template_type_parameter"), true,false);
 llvmo::_sym_DW_TAG_template_value_parameter = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_template_value_parameter"), true,false);
 llvmo::_sym_DW_TAG_thrown_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_thrown_type"), true,false);
 llvmo::_sym_DW_TAG_try_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_try_block"), true,false);
 llvmo::_sym_DW_TAG_variant_part = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_variant_part"), true,false);
 llvmo::_sym_DW_TAG_variable = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_variable"), true,false);
 llvmo::_sym_DW_TAG_volatile_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_volatile_type"), true,false);
 llvmo::_sym_DW_TAG_dwarf_procedure = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_dwarf_procedure"), true,false);
 llvmo::_sym_DW_TAG_restrict_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_restrict_type"), true,false);
 llvmo::_sym_DW_TAG_interface_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_interface_type"), true,false);
 llvmo::_sym_DW_TAG_namespace = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_namespace"), true,false);
 llvmo::_sym_DW_TAG_imported_module = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_imported_module"), true,false);
 llvmo::_sym_DW_TAG_unspecified_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_unspecified_type"), true,false);
 llvmo::_sym_DW_TAG_partial_unit = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_partial_unit"), true,false);
 llvmo::_sym_DW_TAG_imported_unit = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_imported_unit"), true,false);
 llvmo::_sym_DW_TAG_condition = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_condition"), true,false);
 llvmo::_sym_DW_TAG_shared_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_shared_type"), true,false);
 llvmo::_sym_DW_TAG_type_unit = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_type_unit"), true,false);
 llvmo::_sym_DW_TAG_rvalue_reference_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_rvalue_reference_type"), true,false);
 llvmo::_sym_DW_TAG_template_alias = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_template_alias"), true,false);
 llvmo::_sym_DW_TAG_MIPS_loop = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_MIPS_loop"), true,false);
 llvmo::_sym_DW_TAG_format_label = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_format_label"), true,false);
 llvmo::_sym_DW_TAG_function_template = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_function_template"), true,false);
 llvmo::_sym_DW_TAG_class_template = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_class_template"), true,false);
 llvmo::_sym_DW_TAG_GNU_template_template_param = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_GNU_template_template_param"), true,false);
 llvmo::_sym_DW_TAG_GNU_template_parameter_pack = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_GNU_template_parameter_pack"), true,false);
 llvmo::_sym_DW_TAG_GNU_formal_parameter_pack = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_GNU_formal_parameter_pack"), true,false);
 llvmo::_sym_DW_TAG_lo_user = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_lo_user"), true,false);
 llvmo::_sym_DW_TAG_APPLE_property = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_APPLE_property"), true,false);
 llvmo::_sym_DW_TAG_hi_user = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_TAG_hi_user"), true,false);
 llvmo::_sym_STARdwarfConstantsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARdwarfConstantsSTAR"), true,false);
 llvmo::_sym_DW_LANG_COMMON_LISP = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_LANG_COMMON_LISP"), true,false);
 llvmo::_sym_DW_LANG_C = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_LANG_C"), true,false);
 llvmo::_sym_DW_LANG_C_plus_plus = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DW_LANG_C_plus_plus"), true,false);
 llvmo::_sym__PLUS_DW_ATE_SIGNED_FIXED_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("_PLUS_DW_ATE_SIGNED_FIXED_PLUS_"), true,false);
 llvmo::_sym_STARaSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARaSTAR"), true,false);
 llvmo::_sym_CodeGenFileType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenFileType"), true,false);
 llvmo::_sym_CodeGenFileType_Null = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenFileType_Null"), true,false);
 llvmo::_sym_CodeGenFileType_AssemblyFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenFileType_AssemblyFile"), true,false);
 llvmo::_sym_CodeGenFileType_ObjectFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenFileType_ObjectFile"), true,false);
 llvmo::_sym_CodeGenOpt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenOpt"), true,false);
 llvmo::_sym_CodeGenOpt_None = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenOpt_None"), true,false);
 llvmo::_sym_CodeGenOpt_Less = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenOpt_Less"), true,false);
 llvmo::_sym_CodeGenOpt_Default = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenOpt_Default"), true,false);
 llvmo::_sym_CodeGenOpt_Aggressive = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeGenOpt_Aggressive"), true,false);
 llvmo::_sym_RelocModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("RelocModel"), true,false);
 llvmo::_sym_RelocModel_Default = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("RelocModel_Default"), true,false);
 llvmo::_sym_RelocModel_Static = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("RelocModel_Static"), true,false);
 llvmo::_sym_RelocModel_PIC_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("RelocModel_PIC_"), true,false);
 llvmo::_sym_RelocModel_DynamicNoPIC = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("RelocModel_DynamicNoPIC"), true,false);
 llvmo::_sym_CodeModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel"), true,false);
 llvmo::_sym_CodeModel_Default = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_Default"), true,false);
 llvmo::_sym_CodeModel_JITDefault = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_JITDefault"), true,false);
 llvmo::_sym_CodeModel_Small = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_Small"), true,false);
 llvmo::_sym_CodeModel_Kernel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_Kernel"), true,false);
 llvmo::_sym_CodeModel_Medium = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_Medium"), true,false);
 llvmo::_sym_CodeModel_Large = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CodeModel_Large"), true,false);
 llvmo::_sym_ArchType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType"), true,false);
 llvmo::_sym_ArchType_UnknownArch = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_UnknownArch"), true,false);
 llvmo::_sym_ArchType_arm = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_arm"), true,false);
 llvmo::_sym_ArchType_armeb = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_armeb"), true,false);
 llvmo::_sym_ArchType_aarch64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_aarch64"), true,false);
 llvmo::_sym_ArchType_aarch64_be = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_aarch64_be"), true,false);
 llvmo::_sym_ArchType_hexagon = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_hexagon"), true,false);
 llvmo::_sym_ArchType_mips = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_mips"), true,false);
 llvmo::_sym_ArchType_mipsel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_mipsel"), true,false);
 llvmo::_sym_ArchType_mips64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_mips64"), true,false);
 llvmo::_sym_ArchType_mips64el = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_mips64el"), true,false);
 llvmo::_sym_ArchType_msp430 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_msp430"), true,false);
 llvmo::_sym_ArchType_ppc = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_ppc"), true,false);
 llvmo::_sym_ArchType_ppc64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_ppc64"), true,false);
 llvmo::_sym_ArchType_ppc64le = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_ppc64le"), true,false);
 llvmo::_sym_ArchType_r600 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_r600"), true,false);
 llvmo::_sym_ArchType_sparc = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_sparc"), true,false);
 llvmo::_sym_ArchType_sparcv9 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_sparcv9"), true,false);
 llvmo::_sym_ArchType_systemz = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_systemz"), true,false);
 llvmo::_sym_ArchType_tce = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_tce"), true,false);
 llvmo::_sym_ArchType_thumb = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_thumb"), true,false);
 llvmo::_sym_ArchType_thumbeb = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_thumbeb"), true,false);
 llvmo::_sym_ArchType_x86 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_x86"), true,false);
 llvmo::_sym_ArchType_x86_64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_x86_64"), true,false);
 llvmo::_sym_ArchType_xcore = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_xcore"), true,false);
 llvmo::_sym_ArchType_nvptx = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_nvptx"), true,false);
 llvmo::_sym_ArchType_nvptx64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_nvptx64"), true,false);
 llvmo::_sym_ArchType_le32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_le32"), true,false);
 llvmo::_sym_ArchType_le64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_le64"), true,false);
 llvmo::_sym_ArchType_amdil = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_amdil"), true,false);
 llvmo::_sym_ArchType_amdil64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_amdil64"), true,false);
 llvmo::_sym_ArchType_hsail = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_hsail"), true,false);
 llvmo::_sym_ArchType_hsail64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_hsail64"), true,false);
 llvmo::_sym_ArchType_spir = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_spir"), true,false);
 llvmo::_sym_ArchType_spir64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_spir64"), true,false);
 llvmo::_sym_ArchType_kalimba = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArchType_kalimba"), true,false);
 llvmo::_sym_SubArchType_NoSubArch = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_NoSubArch"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v8"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v7 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v7"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v7em = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v7em"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v7m = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v7m"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v7s = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v7s"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v6 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v6"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v6m = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v6m"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v6t2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v6t2"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v5"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v5te = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v5te"), true,false);
 llvmo::_sym_SubArchType_ARMSubArch_v4t = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_ARMSubArch_v4t"), true,false);
 llvmo::_sym_SubArchType_KalimbaSubArch_v3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_KalimbaSubArch_v3"), true,false);
 llvmo::_sym_SubArchType_KalimbaSubArch_v4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_KalimbaSubArch_v4"), true,false);
 llvmo::_sym_SubArchType_KalimbaSubArch_v5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType_KalimbaSubArch_v5"), true,false);
 llvmo::_sym_SubArchType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SubArchType"), true,false);
 llvmo::_sym_VendorType_UnknownVendor = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_UnknownVendor"), true,false);
 llvmo::_sym_VendorType_Apple = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_Apple"), true,false);
 llvmo::_sym_VendorType_PC = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_PC"), true,false);
 llvmo::_sym_VendorType_SCEI = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_SCEI"), true,false);
 llvmo::_sym_VendorType_BGP = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_BGP"), true,false);
 llvmo::_sym_VendorType_BGQ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_BGQ"), true,false);
 llvmo::_sym_VendorType_Freescale = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_Freescale"), true,false);
 llvmo::_sym_VendorType_IBM = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_IBM"), true,false);
 llvmo::_sym_VendorType_ImaginationTechnologies = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_ImaginationTechnologies"), true,false);
 llvmo::_sym_VendorType_MipsTechnologies = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_MipsTechnologies"), true,false);
 llvmo::_sym_VendorType_NVIDIA = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_NVIDIA"), true,false);
 llvmo::_sym_VendorType_CSR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType_CSR"), true,false);
 llvmo::_sym_VendorType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VendorType"), true,false);
 llvmo::_sym_OSType_UnknownOS = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_UnknownOS"), true,false);
 llvmo::_sym_OSType_Darwin = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Darwin"), true,false);
 llvmo::_sym_OSType_DragonFly = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_DragonFly"), true,false);
 llvmo::_sym_OSType_FreeBSD = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_FreeBSD"), true,false);
 llvmo::_sym_OSType_IOS = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_IOS"), true,false);
 llvmo::_sym_OSType_KFreeBSD = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_KFreeBSD"), true,false);
 llvmo::_sym_OSType_Linux = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Linux"), true,false);
 llvmo::_sym_OSType_Lv2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Lv2"), true,false);
 llvmo::_sym_OSType_MacOSX = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_MacOSX"), true,false);
 llvmo::_sym_OSType_NetBSD = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_NetBSD"), true,false);
 llvmo::_sym_OSType_OpenBSD = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_OpenBSD"), true,false);
 llvmo::_sym_OSType_Solaris = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Solaris"), true,false);
 llvmo::_sym_OSType_Win32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Win32"), true,false);
 llvmo::_sym_OSType_Haiku = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Haiku"), true,false);
 llvmo::_sym_OSType_Minix = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Minix"), true,false);
 llvmo::_sym_OSType_RTEMS = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_RTEMS"), true,false);
 llvmo::_sym_OSType_NaCl = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_NaCl"), true,false);
 llvmo::_sym_OSType_CNK = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_CNK"), true,false);
 llvmo::_sym_OSType_Bitrig = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_Bitrig"), true,false);
 llvmo::_sym_OSType_AIX = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_AIX"), true,false);
 llvmo::_sym_OSType_CUDA = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_CUDA"), true,false);
 llvmo::_sym_OSType_NVCL = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType_NVCL"), true,false);
 llvmo::_sym_OSType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("OSType"), true,false);
 llvmo::_sym_EnvironmentType_UnknownEnvironment = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_UnknownEnvironment"), true,false);
 llvmo::_sym_EnvironmentType_GNU = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_GNU"), true,false);
 llvmo::_sym_EnvironmentType_GNUEABI = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_GNUEABI"), true,false);
 llvmo::_sym_EnvironmentType_GNUEABIHF = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_GNUEABIHF"), true,false);
 llvmo::_sym_EnvironmentType_GNUX32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_GNUX32"), true,false);
 llvmo::_sym_EnvironmentType_CODE16 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_CODE16"), true,false);
 llvmo::_sym_EnvironmentType_EABI = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_EABI"), true,false);
 llvmo::_sym_EnvironmentType_EABIHF = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_EABIHF"), true,false);
 llvmo::_sym_EnvironmentType_Android = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_Android"), true,false);
 llvmo::_sym_EnvironmentType_MSVC = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_MSVC"), true,false);
 llvmo::_sym_EnvironmentType_Itanium = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_Itanium"), true,false);
 llvmo::_sym_EnvironmentType_Cygnus = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType_Cygnus"), true,false);
 llvmo::_sym_EnvironmentType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EnvironmentType"), true,false);
 llvmo::_sym_ObjectFormatType_UnknownObjectFormat = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ObjectFormatType_UnknownObjectFormat"), true,false);
 llvmo::_sym_ObjectFormatType_COFF = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ObjectFormatType_COFF"), true,false);
 llvmo::_sym_ObjectFormatType_ELF = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ObjectFormatType_ELF"), true,false);
 llvmo::_sym_ObjectFormatType_MachO = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ObjectFormatType_MachO"), true,false);
 llvmo::_sym_ObjectFormatType = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ObjectFormatType"), true,false);
 llvmo::_sym_AttributeNone = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNone"), true,false);
 llvmo::_sym_AttributeZExt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeZExt"), true,false);
 llvmo::_sym_AttributeSExt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeSExt"), true,false);
 llvmo::_sym_AttributeNoReturn = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoReturn"), true,false);
 llvmo::_sym_AttributeInReg = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeInReg"), true,false);
 llvmo::_sym_AttributeStructRet = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeStructRet"), true,false);
 llvmo::_sym_AttributeNoUnwind = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoUnwind"), true,false);
 llvmo::_sym_AttributeNoAlias = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoAlias"), true,false);
 llvmo::_sym_AttributeByVal = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeByVal"), true,false);
 llvmo::_sym_AttributeNest = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNest"), true,false);
 llvmo::_sym_AttributeReadNone = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeReadNone"), true,false);
 llvmo::_sym_AttributeReadOnly = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeReadOnly"), true,false);
 llvmo::_sym_AttributeNoInline = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoInline"), true,false);
 llvmo::_sym_AttributeAlwaysInline = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeAlwaysInline"), true,false);
 llvmo::_sym_AttributeOptimizeForSize = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeOptimizeForSize"), true,false);
 llvmo::_sym_AttributeStackProtect = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeStackProtect"), true,false);
 llvmo::_sym_AttributeStackProtectReq = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeStackProtectReq"), true,false);
 llvmo::_sym_AttributeAlignment = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeAlignment"), true,false);
 llvmo::_sym_AttributeNoCapture = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoCapture"), true,false);
 llvmo::_sym_AttributeNoRedZone = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoRedZone"), true,false);
 llvmo::_sym_AttributeNoImplicitFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNoImplicitFloat"), true,false);
 llvmo::_sym_AttributeNaked = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNaked"), true,false);
 llvmo::_sym_AttributeInlineHint = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeInlineHint"), true,false);
 llvmo::_sym_AttributeStackAlignment = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeStackAlignment"), true,false);
 llvmo::_sym_AttributeReturnsTwice = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeReturnsTwice"), true,false);
 llvmo::_sym_AttributeUWTable = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeUWTable"), true,false);
 llvmo::_sym_AttributeNonLazyBind = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeNonLazyBind"), true,false);
 llvmo::_sym_AttributeAddressSafety = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeAddressSafety"), true,false);
 llvmo::_sym_AttributeEnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeEnum"), true,false);
 llvmo::_sym_attributesGet = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("attributesGet"), true,false);
 llvmo::_sym_verifyModule = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("verifyModule"), true,false);
 llvmo::_sym_module_get_function_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("module_get_function_list"), true,false);
 llvmo::_sym_STARmoduleModFlagBehaviorSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARmoduleModFlagBehaviorSTAR"), true,false);
 llvmo::_sym_moduleFlagError = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagError"), true,false);
 llvmo::_sym_moduleFlagWarning = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagWarning"), true,false);
 llvmo::_sym_moduleFlagRequire = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagRequire"), true,false);
 llvmo::_sym_moduleFlagOverride = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagOverride"), true,false);
 llvmo::_sym_moduleFlagAppend = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagAppend"), true,false);
 llvmo::_sym_moduleFlagAppendUnique = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("moduleFlagAppendUnique"), true,false);
 llvmo::_sym_interpreter = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("interpreter"), true,false);
 llvmo::_sym_jit = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("jit"), true,false);
 llvmo::_sym_makeAPInt1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeAPInt1"), true,false);
 llvmo::_sym_makeAPInt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeAPInt"), true,false);
 llvmo::_sym_makeAPWidth = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeAPWidth"), true,false);
 llvmo::_sym_makeAP32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeAP32"), true,false);
 llvmo::_sym_makeAP64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeAP64"), true,false);
 llvmo::_sym_mdnodeGet = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("mdnodeGet"), true,false);
 llvmo::_sym_ValueAsMetadataGet = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ValueAsMetadataGet"), true,false);
 llvmo::_sym_STARglobal_value_linkage_typesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARglobal_value_linkage_typesSTAR"), false,false);
 llvmo::_sym_ExternalLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ExternalLinkage"), true,false);
 llvmo::_sym_AvailableExternallyLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AvailableExternallyLinkage"), true,false);
 llvmo::_sym_LinkOnceAnyLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LinkOnceAnyLinkage"), true,false);
 llvmo::_sym_LinkOnceODRLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LinkOnceODRLinkage"), true,false);
 llvmo::_sym_LinkOnceODRAutoHideLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LinkOnceODRAutoHideLinkage"), true,false);
 llvmo::_sym_WeakAnyLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("WeakAnyLinkage"), true,false);
 llvmo::_sym_WeakODRLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("WeakODRLinkage"), true,false);
 llvmo::_sym_AppendingLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AppendingLinkage"), true,false);
 llvmo::_sym_InternalLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("InternalLinkage"), true,false);
 llvmo::_sym_PrivateLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PrivateLinkage"), true,false);
 llvmo::_sym_LinkerPrivateLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LinkerPrivateLinkage"), true,false);
 llvmo::_sym_LinkerPrivateWeakLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LinkerPrivateWeakLinkage"), true,false);
 llvmo::_sym_DLLImportLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DLLImportLinkage"), true,false);
 llvmo::_sym_DLLExportLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DLLExportLinkage"), true,false);
 llvmo::_sym_ExternalWeakLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ExternalWeakLinkage"), true,false);
 llvmo::_sym_CommonLinkage = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CommonLinkage"), true,false);
 llvmo::_sym_STARglobal_ThreadLocalModesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARglobal_ThreadLocalModesSTAR"), false,false);
 llvmo::_sym_NotThreadLocal = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("NotThreadLocal"), true,false);
 llvmo::_sym_GeneralDynamicTLSModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("GeneralDynamicTLSModel"), true,false);
 llvmo::_sym_LocalDynamicTLSModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LocalDynamicTLSModel"), true,false);
 llvmo::_sym_InitialExecTLSModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("InitialExecTLSModel"), true,false);
 llvmo::_sym_LocalExecTLSModel = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LocalExecTLSModel"), true,false);
 llvmo::_sym_verifyFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("verifyFunction"), true,false);
 llvmo::_sym_STARatomic_orderingSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARatomic_orderingSTAR"), true,false);
 llvmo::_sym_NotAtomic = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("NotAtomic"), true,false);
 llvmo::_sym_Unordered = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Unordered"), true,false);
 llvmo::_sym_Monotonic = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Monotonic"), true,false);
 llvmo::_sym_Acquire = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Acquire"), true,false);
 llvmo::_sym_Release = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Release"), true,false);
 llvmo::_sym_AquireRelease = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AquireRelease"), true,false);
 llvmo::_sym_SequentiallyConsistent = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SequentiallyConsistent"), true,false);
 llvmo::_sym_STARsynchronization_scopeSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARsynchronization_scopeSTAR"), true,false);
 llvmo::_sym_SingleThread = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SingleThread"), true,false);
 llvmo::_sym_CrossThread = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CrossThread"), true,false);
 llvmo::_sym_STARAtomicRMWInstBinOpSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARAtomicRMWInstBinOpSTAR"), true,false);
 llvmo::_sym_Xchg = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Xchg"), true,false);
 llvmo::_sym_Nand = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Nand"), true,false);
 llvmo::_sym_Max = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Max"), true,false);
 llvmo::_sym_Min = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Min"), true,false);
 llvmo::_sym_UMax = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UMax"), true,false);
 llvmo::_sym_UMin = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UMin"), true,false);
 llvmo::_sym_Add = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Add"), true,false);
 llvmo::_sym_FAdd = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FAdd"), true,false);
 llvmo::_sym_Sub = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Sub"), true,false);
 llvmo::_sym_FSub = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FSub"), true,false);
 llvmo::_sym_Mul = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Mul"), true,false);
 llvmo::_sym_FMul = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FMul"), true,false);
 llvmo::_sym_UDiv = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UDiv"), true,false);
 llvmo::_sym_SDiv = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SDiv"), true,false);
 llvmo::_sym_FDiv = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FDiv"), true,false);
 llvmo::_sym_URem = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("URem"), true,false);
 llvmo::_sym_SRem = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SRem"), true,false);
 llvmo::_sym_FRem = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FRem"), true,false);
 llvmo::_sym_Shl = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Shl"), true,false);
 llvmo::_sym_LShr = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LShr"), true,false);
 llvmo::_sym_AShr = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AShr"), true,false);
 llvmo::_sym_And = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("And"), true,false);
 llvmo::_sym_Or = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Or"), true,false);
 llvmo::_sym_Xor = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Xor"), true,false);
 llvmo::_sym_STARBinaryOpsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARBinaryOpsSTAR"), true,false);
 llvmo::_sym_Trunc = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Trunc"), true,false);
 llvmo::_sym_ZExt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ZExt"), true,false);
 llvmo::_sym_SExt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SExt"), true,false);
 llvmo::_sym_FPToUI = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FPToUI"), true,false);
 llvmo::_sym_FPToSI = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FPToSI"), true,false);
 llvmo::_sym_UIToFP = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UIToFP"), true,false);
 llvmo::_sym_SIToFP = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SIToFP"), true,false);
 llvmo::_sym_FPTrunc = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FPTrunc"), true,false);
 llvmo::_sym_FPExt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FPExt"), true,false);
 llvmo::_sym_PtrToInt = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PtrToInt"), true,false);
 llvmo::_sym_IntToPtr = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("IntToPtr"), true,false);
 llvmo::_sym_BitCast = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("BitCast"), true,false);
 llvmo::_sym_STARInstructionCastOpsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARInstructionCastOpsSTAR"), true,false);
 llvmo::_sym_FCMP_FALSE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_FALSE"), true,false);
 llvmo::_sym_FCMP_OEQ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_OEQ"), true,false);
 llvmo::_sym_FCMP_OGT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_OGT"), true,false);
 llvmo::_sym_FCMP_OGE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_OGE"), true,false);
 llvmo::_sym_FCMP_OLT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_OLT"), true,false);
 llvmo::_sym_FCMP_OLE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_OLE"), true,false);
 llvmo::_sym_FCMP_ONE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_ONE"), true,false);
 llvmo::_sym_FCMP_ORD = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_ORD"), true,false);
 llvmo::_sym_FCMP_UNO = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_UNO"), true,false);
 llvmo::_sym_FCMP_UEQ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_UEQ"), true,false);
 llvmo::_sym_FCMP_UGT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_UGT"), true,false);
 llvmo::_sym_FCMP_UGE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_UGE"), true,false);
 llvmo::_sym_FCMP_ULT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_ULT"), true,false);
 llvmo::_sym_FCMP_ULE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_ULE"), true,false);
 llvmo::_sym_FCMP_UNE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_UNE"), true,false);
 llvmo::_sym_FCMP_TRUE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_TRUE"), true,false);
 llvmo::_sym_FIRST_FCMP_PREDICATE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FIRST_FCMP_PREDICATE"), true,false);
 llvmo::_sym_FCMP_PREDICATE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FCMP_PREDICATE"), true,false);
 llvmo::_sym_ICMP_EQ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_EQ"), true,false);
 llvmo::_sym_ICMP_NE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_NE"), true,false);
 llvmo::_sym_ICMP_UGT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_UGT"), true,false);
 llvmo::_sym_ICMP_UGE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_UGE"), true,false);
 llvmo::_sym_ICMP_ULT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_ULT"), true,false);
 llvmo::_sym_ICMP_ULE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_ULE"), true,false);
 llvmo::_sym_ICMP_SGT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_SGT"), true,false);
 llvmo::_sym_ICMP_SGE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_SGE"), true,false);
 llvmo::_sym_ICMP_SLT = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_SLT"), true,false);
 llvmo::_sym_ICMP_SLE = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ICMP_SLE"), true,false);
 llvmo::_sym_STARCmpInstPredicateSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARCmpInstPredicateSTAR"), true,false);
 llvmo::_sym_valid = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("valid"), true,false);
 llvmo::_sym_makeStringGlobal = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("makeStringGlobal"), true,false);
 llvmo::_sym_valuep = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("valuep"), true,false);
 llvmo::_sym_parseBitcodeFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("parseBitcodeFile"), true,false);
 llvmo::_sym_writeBitcodeToFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("writeBitcodeToFile"), true,false);
 llvmo::_sym_writeIrToFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("writeIrToFile"), true,false);
 llvmo::_sym_llvm_value_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("llvm_value_p"), true,false);
 llvmo::_sym_STARmostRecentLlvmFinalizationTimeSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARmostRecentLlvmFinalizationTimeSTAR"), true,false);
 llvmo::_sym_STARaccumulatedLlvmFinalizationTimeSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARaccumulatedLlvmFinalizationTimeSTAR"), true,false);
 llvmo::_sym_STARnumberOfLlvmFinalizationsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARnumberOfLlvmFinalizationsSTAR"), true,false);
 llvmo::_sym_STARrunTimeExecutionEngineSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("STARrunTimeExecutionEngineSTAR"), true,false);
 llvmo::_sym_getOrCreateExternalGlobal = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("getOrCreateExternalGlobal"), true,false);
 llvmo::_sym_disassembleSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("disassembleSTAR"), true,false);
 llvmo::_sym_throwIfMismatchedStructureSizes = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("throwIfMismatchedStructureSizes"), true,false);
 llvmo::_sym__PLUS_ClaspMainFunctionName_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("_PLUS_ClaspMainFunctionName_PLUS_"), true,false);
 llvmo::_sym__PLUS_globalBootFunctionsName_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("_PLUS_globalBootFunctionsName_PLUS_"), true,false);
 llvmo::_sym__PLUS_globalBootFunctionsNameSize_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("_PLUS_globalBootFunctionsNameSize_PLUS_"), true,false);
 llvmo::_sym_LLVMContext_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("llvm-context"), true,false);
 llvmo::_sym_Linker_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Linker"), true,false);
 llvmo::_sym_Pass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Pass"), true,false);
 llvmo::_sym_AttributeSet_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AttributeSet"), true,false);
 llvmo::_sym_Triple_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Triple"), true,false);
 llvmo::_sym_TargetOptions_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TargetOptions"), true,false);
 llvmo::_sym_Target_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Target"), true,false);
 llvmo::_sym_MCSubtargetInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("MCSubtargetInfo"), true,false);
 llvmo::_sym_TargetSubtargetInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TargetSubtargetInfo"), true,false);
 llvmo::_sym_TargetMachine_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TargetMachine"), true,false);
 llvmo::_sym_LLVMTargetMachine_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LLVMTargetMachine"), true,false);
 llvmo::_sym_FunctionPass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FunctionPass"), true,false);
 llvmo::_sym_ModulePass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ModulePass"), true,false);
 llvmo::_sym_ImmutablePass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ImmutablePass"), true,false);
 llvmo::_sym_PassManagerBase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PassManagerBase"), true,false);
 llvmo::_sym_Value_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("value"), true,false);
 llvmo::_sym_Metadata_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("metadata"), true,false);
 llvmo::_sym_User_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("user"), true,false);
 llvmo::_sym_Attribute_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Attribute"), true,false);
 llvmo::_sym_DataLayout_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DataLayout"), true,false);
 llvmo::_sym_Constant_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("constant"), true,false);
 llvmo::_sym_ConstantArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("constant-array"), true,false);
 llvmo::_sym_BlockAddress_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("BlockAddress"), true,false);
 llvmo::_sym_ConstantDataSequential_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantDataSequential"), true,false);
 llvmo::_sym_ConstantDataArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("constant-data-array"), true,false);
 llvmo::_sym_ConstantExpr_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantExpr"), true,false);
 llvmo::_sym_GlobalValue_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("global-value"), true,false);
 llvmo::_sym_GlobalVariable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("GlobalVariable"), true,false);
 llvmo::_sym_ExecutionEngine_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("EXECUTION-ENGINE"), true,false);
 llvmo::_sym_Module_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("module"), true,false);
 llvmo::_sym_DataLayoutPass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DataLayoutPass"), true,false);
 llvmo::_sym_TargetLibraryInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TargetLibraryInfo"), true,false);
 llvmo::_sym_FunctionPassManager_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FUNCTION-PASS-MANAGER"), true,false);
 llvmo::_sym_PassManager_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PASS-MANAGER"), true,false);
 llvmo::_sym_EngineBuilder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ENGINEBUILDER"), true,false);
 llvmo::_sym_PassManagerBuilder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PASS-MANAGER-BUILDER"), true,false);
 llvmo::_sym_APFloat_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("APFLOAT"), true,false);
 llvmo::_sym_APInt_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("APINT"), true,false);
 llvmo::_sym_IRBuilderBase_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("IRBuilderBase"), true,false);
 llvmo::_sym_IRBuilder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("IRBUILDER"), true,false);
 llvmo::_sym_Instruction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Instruction"), true,false);
 llvmo::_sym_StoreInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("StoreInst"), true,false);
 llvmo::_sym_FenceInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FenceInst"), true,false);
 llvmo::_sym_AtomicCmpXchgInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AtomicCmpXchgInst"), true,false);
 llvmo::_sym_AtomicRMWInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AtomicRMWInst"), true,false);
 llvmo::_sym_PHINode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PHINode"), true,false);
 llvmo::_sym_CallInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CallInst"), true,false);
 llvmo::_sym_LandingPadInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LandingPadInst"), true,false);
 llvmo::_sym_UnaryInstruction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UnaryInstruction"), true,false);
 llvmo::_sym_AllocaInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("AllocaInst"), true,false);
 llvmo::_sym_VAArgInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VAArgInst"), true,false);
 llvmo::_sym_LoadInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("LoadInst"), true,false);
 llvmo::_sym_TerminatorInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TerminatorInst"), true,false);
 llvmo::_sym_BranchInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("BranchInst"), true,false);
 llvmo::_sym_SwitchInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SwitchInst"), true,false);
 llvmo::_sym_IndirectBrInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("IndirectBrInst"), true,false);
 llvmo::_sym_InvokeInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("InvokeInst"), true,false);
 llvmo::_sym_ResumeInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ResumeInst"), true,false);
 llvmo::_sym_UnreachableInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UnreachableInst"), true,false);
 llvmo::_sym_ReturnInst_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ReturnInst"), true,false);
 llvmo::_sym_ConstantFP_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantFP"), true,false);
 llvmo::_sym_ConstantInt_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantInt"), true,false);
 llvmo::_sym_ConstantStruct_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantStruct"), true,false);
 llvmo::_sym_UndefValue_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("UndefValue"), true,false);
 llvmo::_sym_ConstantPointerNull_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ConstantPointerNull"), true,false);
 llvmo::_sym_MDNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("MDNode"), true,false);
 llvmo::_sym_MDString_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("MDString"), true,false);
 llvmo::_sym_ValueAsMetadata_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ValueAsMetadata"), true,false);
 llvmo::_sym_NamedMDNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("NamedMDNode"), true,false);
 llvmo::_sym_Function_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FUNCTION"), true,false);
 llvmo::_sym_BasicBlock_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("BasicBlock"), true,false);
 llvmo::_sym_Argument_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("Argument"), true,false);
 llvmo::_sym_Type_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("TYPE"), true,false);
 llvmo::_sym_FunctionType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("FUNCTION-TYPE"), true,false);
 llvmo::_sym_IntegerType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("INTEGER-TYPE"), true,false);
 llvmo::_sym_CompositeType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("CompositeType"), true,false);
 llvmo::_sym_StructType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("StructType"), true,false);
 llvmo::_sym_SequentialType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("SequentialType"), true,false);
 llvmo::_sym_PointerType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("PointerType"), true,false);
 llvmo::_sym_ArrayType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ArrayType"), true,false);
 llvmo::_sym_VectorType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("VectorType"), true,false);
 llvmo::_sym_DebugInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DebugInfo"), true,false);
 llvmo::_sym_DIDescriptor_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DIDescriptor"), true,false);
 llvmo::_sym_DIScope_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("discope"), true,false);
 llvmo::_sym_DIArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("diarray"), true,false);
 llvmo::_sym_DITypeArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("ditypearray"), true,false);
 llvmo::_sym_DIFile_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("difile"), true,false);
 llvmo::_sym_DISubprogram_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DISubprogram"), true,false);
 llvmo::_sym_DIType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DIType"), true,false);
 llvmo::_sym_DIDerivedType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DIDerivedType"), true,false);
 llvmo::_sym_DIBasicType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DIBasicType"), true,false);
 llvmo::_sym_DICompositeType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DICompositeType"), true,false);
 llvmo::_sym_DISubroutineType_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DISubroutineType"), true,false);
 llvmo::_sym_DILexicalBlock_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DILexicalBlock"), true,false);
 llvmo::_sym_DICompileUnit_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DICompileUnit"), true,false);
 llvmo::_sym_DIBuilder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DIBuilder"), true,false);
 llvmo::_sym_DebugLoc_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("DebugLoc"), true,false);
 llvmo::_sym_InsertPoint_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("LLVM-SYS",core::lispify_symbol_name("InsertPoint"), true,false);
 cffi::_sym_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("char"), true,false);
 cffi::_sym_unsigned_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("unsigned_char"), true,false);
 cffi::_sym_short = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("short"), true,false);
 cffi::_sym_unsigned_short = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("unsigned_short"), true,false);
 cffi::_sym_int = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("int"), true,false);
 cffi::_sym_unsigned_int = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("unsigned_int"), true,false);
 cffi::_sym_long = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("long"), true,false);
 cffi::_sym_unsigned_long = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("unsigned_long"), true,false);
 cffi::_sym_long_long = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("long_long"), true,false);
 cffi::_sym_unsigned_long_long = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("unsigned_long_long"), true,false);
 cffi::_sym_int8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("int8"), true,false);
 cffi::_sym_uint8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("uint8"), true,false);
 cffi::_sym_int16 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("int16"), true,false);
 cffi::_sym_uint16 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("uint16"), true,false);
 cffi::_sym_int32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("int32"), true,false);
 cffi::_sym_uint32 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("uint32"), true,false);
 cffi::_sym_int64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("int64"), true,false);
 cffi::_sym_uint64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("uint64"), true,false);
 cffi::_sym_size = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("size"), true,false);
 cffi::_sym_ssize = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("ssize"), true,false);
 cffi::_sym_ptrdiff = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("ptrdiff"), true,false);
 cffi::_sym_time = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("time"), true,false);
 cffi::_sym_float = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("float"), true,false);
 cffi::_sym_double = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("double"), true,false);
 cffi::_sym_pointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("pointer"), true,false);
 cffi::_sym_void = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("void"), true,false);
 cffi::_sym_PERCENTmem_ref = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("PERCENTmem_ref"), true,false);
 cffi::_sym_PERCENTsetf_mem_ref = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("PERCENTsetf_mem_ref"), true,false);
 cffi::_sym_PERCENTforeign_type_alignment = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("PERCENTforeign_type_alignment"), true,false);
 cffi::_sym_PERCENTforeign_type_size = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("PERCENTforeign_type_size"), true,false);
 cffi::_sym_foreign_alloc = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("foreign_alloc"), true,false);
 cffi::_sym_foreign_symbol_pointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("foreign_symbol_pointer"), true,false);
 cffi::_sym_PERCENTload_foreign_library = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("PERCENTload_foreign_library"), true,false);
 cffi::_sym_Pointer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CFFI-SYS",core::lispify_symbol_name("Pointer"), true,false);
 kw::_sym_catchFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("catchFrame"), true,false);
 kw::_sym_blockFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("blockFrame"), true,false);
 kw::_sym_tagbodyFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tagbodyFrame"), true,false);
 kw::_sym_landingPadFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("landingPadFrame"), true,false);
 kw::_sym_splatted = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("splatted"), true,false);
 kw::_sym_unbound = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("unbound"), true,false);
 kw::_sym_deleted = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("deleted"), true,false);
 kw::_sym_rtld_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rtld_default"), true,false);
 kw::_sym_rtld_next = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rtld_next"), true,false);
 kw::_sym_rtld_self = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rtld_self"), true,false);
 kw::_sym_rtld_main_only = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rtld_main_only"), true,false);
 kw::_sym_iclass = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("iclass"), true,false);
 kw::_sym_next = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("next"), true,false);
 kw::_sym_prev = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("prev"), true,false);
 kw::_sym_key = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("key"), true,false);
 kw::_sym_defaults = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("defaults"), true,false);
 kw::_sym_error = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("error"), true,false);
 kw::_sym_link = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("link"), true,false);
 kw::_sym_broken_link = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("broken_link"), true,false);
 kw::_sym_special = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("special"), true,false);
 kw::_sym_supersede = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("supersede"), true,false);
 kw::_sym_calledFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("calledFunction"), true,false);
 kw::_sym_givenNumberOfArguments = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("givenNumberOfArguments"), true,false);
 kw::_sym_requiredNumberOfArguments = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("requiredNumberOfArguments"), true,false);
 kw::_sym_unrecognizedKeyword = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("unrecognizedKeyword"), true,false);
 kw::_sym_body = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("body"), true,false);
 kw::_sym_lambda_list_handler = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("lambda_list_handler"), true,false);
 kw::_sym_docstring = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("docstring"), true,false);
 kw::_sym_arguments = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("arguments"), true,false);
 kw::_sym_create = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("create"), true,false);
 kw::_sym_append = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("append"), true,false);
 kw::_sym_debugStartup = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("debugStartup"), true,false);
 kw::_sym_cclasp = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("cclasp"), true,false);
 kw::_sym_bclasp = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bclasp"), true,false);
 kw::_sym_load = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("load"), true,false);
 kw::_sym_eval = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eval"), true,false);
 kw::_sym_ecl_min = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ecl_min"), true,false);
 kw::_sym_use_mps = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("use_mps"), true,false);
 kw::_sym_use_boehmdc = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("use_boehmdc"), true,false);
 kw::_sym_use_boehm = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("use_boehm"), true,false);
 kw::_sym_cr = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("cr"), true,false);
 kw::_sym_lf = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("lf"), true,false);
 kw::_sym_littleEndian = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("littleEndian"), true,false);
 kw::_sym_bigEndian = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bigEndian"), true,false);
 kw::_sym_crlf = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("crlf"), true,false);
 kw::_sym_latin_1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("latin_1"), true,false);
 kw::_sym_ucs_4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ucs_4"), true,false);
 kw::_sym_passThrough = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("passThrough"), true,false);
 kw::_sym_if_does_not_exist = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("if_does_not_exist"), true,false);
 kw::_sym_new_version = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("new_version"), true,false);
 kw::_sym_rename = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rename"), true,false);
 kw::_sym_rename_and_delete = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rename_and_delete"), true,false);
 kw::_sym_overwrite = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("overwrite"), true,false);
 kw::_sym_if_exists = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("if_exists"), true,false);
 kw::_sym_probe = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("probe"), true,false);
 kw::_sym_FullDebug = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("FullDebug"), true,false);
 kw::_sym_LineTablesOnly = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("LineTablesOnly"), true,false);
 kw::_sym__uid = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("_uid"), true,false);
 kw::_sym_none = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("none"), true,false);
 kw::_sym_line = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("line"), true,false);
 kw::_sym_full = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("full"), true,false);
 kw::_sym_message = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("message"), true,false);
 kw::_sym_line_buffered = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("line_buffered"), true,false);
 kw::_sym_fully_buffered = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("fully_buffered"), true,false);
 kw::_sym_array = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("array"), true,false);
 kw::_sym_UnsignedByte = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("UnsignedByte"), true,false);
 kw::_sym_junkAllowed = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("junkAllowed"), true,false);
 kw::_sym_absolute = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("absolute"), true,false);
 kw::_sym_relative = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("relative"), true,false);
 kw::_sym_back = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("back"), true,false);
 kw::_sym_operation = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("operation"), true,false);
 kw::_sym_operands = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("operands"), true,false);
 kw::_sym_escape = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("escape"), true,false);
 kw::_sym_capitalize = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("capitalize"), true,false);
 kw::_sym_typeError = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("typeError"), true,false);
 kw::_sym_datum = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("datum"), true,false);
 kw::_sym_expectedType = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("expectedType"), true,false);
 kw::_sym_print = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("print"), true,false);
 kw::_sym_pathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pathname"), true,false);
 kw::_sym_object = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("object"), true,false);
 kw::_sym_formatControl = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("formatControl"), true,false);
 kw::_sym_formatArguments = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("formatArguments"), true,false);
 kw::_sym_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("stream"), true,false);
 kw::_sym_package = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("package"), true,false);
 kw::_sym_compile_toplevel = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("compile_toplevel"), true,false);
 kw::_sym_load_toplevel = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("load_toplevel"), true,false);
 kw::_sym_execute = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("execute"), true,false);
 kw::_sym_allow_other_keys = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("allow_other_keys"), true,false);
 kw::_sym_macro = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("macro"), true,false);
 kw::_sym_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("function"), true,false);
 kw::_sym_invalid_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("invalid_character"), true,false);
 kw::_sym_brcl = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("brcl"), true,false);
 kw::_sym_not = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("not"), true,false);
 kw::_sym_and = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("and"), true,false);
 kw::_sym_or = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("or"), true,false);
 kw::_sym_class = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("class"), true,false);
 kw::_sym_instance = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("instance"), true,false);
 kw::_sym_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("output"), true,false);
 kw::_sym_input = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("input"), true,false);
 kw::_sym_io = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("io"), true,false);
 kw::_sym_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("default"), true,false);
 kw::_sym_internal = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("internal"), true,false);
 kw::_sym_external = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("external"), true,false);
 kw::_sym_inherited = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("inherited"), true,false);
 kw::_sym_debug = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("debug"), true,false);
 kw::_sym_direct_super_classes = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("direct_super_classes"), true,false);
 kw::_sym_changed = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("changed"), true,false);
 kw::_sym_address_model_64 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("address_model_64"), true,false);
 kw::_sym_target_os_darwin = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("target_os_darwin"), true,false);
 kw::_sym_podSymbolMap = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("podSymbolMap"), true,false);
 kw::_sym_constituent_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("constituent_character"), true,false);
 kw::_sym_syntax = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("syntax"), true,false);
 kw::_sym_whitespace_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("whitespace_character"), true,false);
 kw::_sym_single_escape_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("single_escape_character"), true,false);
 kw::_sym_multiple_escape_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("multiple_escape_character"), true,false);
 kw::_sym_upcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("upcase"), true,false);
 kw::_sym_downcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("downcase"), true,false);
 kw::_sym_preserve = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("preserve"), true,false);
 kw::_sym_invert = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("invert"), true,false);
 kw::_sym_non_terminating_macro_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("non_terminating_macro_character"), true,false);
 kw::_sym_terminating_macro_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("terminating_macro_character"), true,false);
 kw::_sym_macro_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("macro_function"), true,false);
 kw::_sym_case = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("case"), true,false);
 kw::_sym_file = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("file"), true,false);
 kw::_sym_unspecific = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("unspecific"), true,false);
 kw::_sym_local = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("local"), true,false);
 kw::_sym_common = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("common"), true,false);
 kw::_sym_wild_inferiors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("wild_inferiors"), true,false);
 kw::_sym_up = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("up"), true,false);
 kw::_sym_wild = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("wild"), true,false);
 kw::_sym_host = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("host"), true,false);
 kw::_sym_device = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("device"), true,false);
 kw::_sym_newest = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("newest"), true,false);
 kw::_sym_version = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("version"), true,false);
 kw::_sym_directory = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("directory"), true,false);
 kw::_sym_supplied = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("supplied"), true,false);
 kw::_sym_min = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("min"), true,false);
 kw::_sym_max = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("max"), true,false);
 kw::_sym_eof = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eof"), true,false);
 kw::_sym_fillPointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("fillPointer"), true,false);
 kw::_sym_elementType = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("elementType"), true,false);
 kw::_sym_adjustable = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("adjustable"), true,false);
 kw::_sym_start = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("start"), true,false);
 kw::_sym_end = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("end"), true,false);
 kw::_sym_x = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("x"), true,false);
 kw::_sym_y = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("y"), true,false);
 kw::_sym_z = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("z"), true,false);
 kw::_sym_white = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("white"), true,false);
 kw::_sym_black = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("black"), true,false);
 kw::_sym_red = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("red"), true,false);
 kw::_sym_green = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("green"), true,false);
 kw::_sym_blue = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("blue"), true,false);
 kw::_sym_magenta = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("magenta"), true,false);
 kw::_sym_yellow = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("yellow"), true,false);
 kw::_sym_cyan = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("cyan"), true,false);
 kw::_sym_grey10 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("grey10"), true,false);
 kw::_sym_greyF0 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("greyF0"), true,false);
 kw::_sym_goldenrod = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("goldenrod"), true,false);
 kw::_sym_purple = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("purple"), true,false);
 kw::_sym_pink = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pink"), true,false);
 kw::_sym_plum = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("plum"), true,false);
 kw::_sym_coral = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("coral"), true,false);
 kw::_sym_orange = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("orange"), true,false);
 kw::_sym_brown = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("brown"), true,false);
 kw::_sym_wheat = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("wheat"), true,false);
 kw::_sym_chartreuse = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chartreuse"), true,false);
 kw::_sym_aquamarine = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("aquamarine"), true,false);
 kw::_sym_mediumBlue = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("mediumBlue"), true,false);
 kw::_sym_steelBlue = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("steelBlue"), true,false);
 kw::_sym_chemdraw_color = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chemdraw_color"), true,false);
 kw::_sym_chemdraw_dashed_bond = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chemdraw_dashed_bond"), true,false);
 kw::_sym_comment = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("comment"), true,false);
 kw::_sym_chiral_centers = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chiral_centers"), true,false);
 kw::_sym_group = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("group"), true,false);
 kw::_sym_name_template = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("name_template"), true,false);
 kw::_sym_pdb_template = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pdb_template"), true,false);
 kw::_sym_residue_charge = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("residue_charge"), true,false);
 kw::_sym_restrained_pi_bonds = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("restrained_pi_bonds"), true,false);
 kw::_sym_caps = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("caps"), true,false);
 kw::_sym_matches = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("matches"), true,false);
 kw::_sym_tags = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tags"), true,false);
 kw::_sym_closestMatch = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("closestMatch"), true,false);
 kw::_sym_data = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("data"), true,false);
 kw::_sym_root = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("root"), true,false);
 kw::_sym_op = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("op"), true,false);
 kw::_sym_ringTag = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ringTag"), true,false);
 kw::_sym_atomTest = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atomTest"), true,false);
 kw::_sym_test = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("test"), true,false);
 kw::_sym_int = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("int"), true,false);
 kw::_sym_num = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("num"), true,false);
 kw::_sym_str = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("str"), true,false);
 kw::_sym_sym = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("sym"), true,false);
 kw::_sym_head = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("head"), true,false);
 kw::_sym_tail = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tail"), true,false);
 kw::_sym_left = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("left"), true,false);
 kw::_sym_right = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("right"), true,false);
 kw::_sym_tag1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tag1"), true,false);
 kw::_sym_tag2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tag2"), true,false);
 kw::_sym_bond = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bond"), true,false);
 kw::_sym_residueNames = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("residueNames"), true,false);
 kw::_sym_atomicProperty = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atomicProperty"), true,false);
 kw::_sym_atomicNumber = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atomicNumber"), true,false);
 kw::_sym_attachedAtoms = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("attachedAtoms"), true,false);
 kw::_sym_attachedHs = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("attachedHs"), true,false);
 kw::_sym_attachedEWGs = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("attachedEWGs"), true,false);
 kw::_sym_neighbors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("neighbors"), true,false);
 kw::_sym_tag = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tag"), true,false);
 kw::_sym_atomProps = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atomProps"), true,false);
 kw::_sym_firstTest = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("firstTest"), true,false);
 kw::_sym_chain = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chain"), true,false);
 kw::_sym_tests = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tests"), true,false);
 kw::_sym_assignType = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("assignType"), true,false);
 kw::_sym_afterMatchTests = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("afterMatchTests"), true,false);
 kw::_sym_wildDict = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("wildDict"), true,false);
 kw::_sym_type_rules = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type_rules"), true,false);
 kw::_sym_r0 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("r0"), true,false);
 kw::_sym_kb = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("kb"), true,false);
 kw::_sym_stretches = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("stretches"), true,false);
 kw::_sym_R = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("R"), true,false);
 kw::_sym_Eps = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Eps"), true,false);
 kw::_sym_M = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("M"), true,false);
 kw::_sym_N = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("N"), true,false);
 kw::_sym_Edep = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Edep"), true,false);
 kw::_sym_vdw = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdw"), true,false);
 kw::_sym_angRad = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("angRad"), true,false);
 kw::_sym_k2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("k2"), true,false);
 kw::_sym_angleFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("angleFunction"), true,false);
 kw::_sym_angles = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("angles"), true,false);
 kw::_sym_zConstants = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("zConstants"), true,false);
 kw::_sym_cConstants = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("cConstants"), true,false);
 kw::_sym_level = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("level"), true,false);
 kw::_sym_forceField = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("forceField"), true,false);
 kw::_sym_itors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("itors"), true,false);
 kw::_sym_type1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type1"), true,false);
 kw::_sym_type2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type2"), true,false);
 kw::_sym_type3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type3"), true,false);
 kw::_sym_type4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type4"), true,false);
 kw::_sym_v0 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v0"), true,false);
 kw::_sym_ph0 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph0"), true,false);
 kw::_sym_v1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v1"), true,false);
 kw::_sym_ph1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph1"), true,false);
 kw::_sym_v2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v2"), true,false);
 kw::_sym_ph2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph2"), true,false);
 kw::_sym_v3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v3"), true,false);
 kw::_sym_ph3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph3"), true,false);
 kw::_sym_v4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v4"), true,false);
 kw::_sym_ph4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph4"), true,false);
 kw::_sym_v5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("v5"), true,false);
 kw::_sym_ph5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ph5"), true,false);
 kw::_sym_ptors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ptors"), true,false);
 kw::_sym_radius = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("radius"), true,false);
 kw::_sym_well = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("well"), true,false);
 kw::_sym_apol = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("apol"), true,false);
 kw::_sym_neff = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("neff"), true,false);
 kw::_sym_mass = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("mass"), true,false);
 kw::_sym_pol = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pol"), true,false);
 kw::_sym_initCharge = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("initCharge"), true,false);
 kw::_sym_fcadj = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("fcadj"), true,false);
 kw::_sym_pbci = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pbci"), true,false);
 kw::_sym_da = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("da"), true,false);
 kw::_sym_eleDielectricValue = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eleDielectricValue"), true,false);
 kw::_sym_eleBuffer = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eleBuffer"), true,false);
 kw::_sym_eleScale14 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eleScale14"), true,false);
 kw::_sym_eleChargeFcn = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eleChargeFcn"), true,false);
 kw::_sym_vdwScale14 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdwScale14"), true,false);
 kw::_sym_vdwScaleBufferA = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdwScaleBufferA"), true,false);
 kw::_sym_vdwScaleBufferB = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdwScaleBufferB"), true,false);
 kw::_sym_nonbonds = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("nonbonds"), true,false);
 kw::_sym_map = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("map"), true,false);
 kw::_sym_eleDielectricCode = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("eleDielectricCode"), true,false);
 kw::_sym_vdwMixRadius = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdwMixRadius"), true,false);
 kw::_sym_vdwMixWell = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("vdwMixWell"), true,false);
 kw::_sym_name = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("name"), true,false);
 kw::_sym_id = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("id"), true,false);
 kw::_sym_restraints = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("restraints"), true,false);
 kw::_sym_contents = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("contents"), true,false);
 kw::_sym_pdbName = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pdbName"), true,false);
 kw::_sym_uniqueLabel = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("uniqueLabel"), true,false);
 kw::_sym_NetCharge = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("NetCharge"), true,false);
 kw::_sym_fileSeqNum = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("fileSeqNum"), true,false);
 kw::_sym_monomerAliases = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("monomerAliases"), true,false);
 kw::_sym_bl = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bl"), true,false);
 kw::_sym_alias = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("alias"), true,false);
 kw::_sym_flags = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("flags"), true,false);
 kw::_sym_element = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("element"), true,false);
 kw::_sym_hybridization = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("hybridization"), true,false);
 kw::_sym_priority = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("priority"), true,false);
 kw::_sym_hintLP = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("hintLP"), true,false);
 kw::_sym_chg = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("chg"), true,false);
 kw::_sym_ion = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ion"), true,false);
 kw::_sym_rings = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("rings"), true,false);
 kw::_sym_tempInt = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("tempInt"), true,false);
 kw::_sym_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("type"), true,false);
 kw::_sym_ar1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ar1"), true,false);
 kw::_sym_ar2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ar2"), true,false);
 kw::_sym_ar3 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ar3"), true,false);
 kw::_sym_ar4 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ar4"), true,false);
 kw::_sym_ar5 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ar5"), true,false);
 kw::_sym_mask = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("mask"), true,false);
 kw::_sym_configuration = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("configuration"), true,false);
 kw::_sym_stereochemistryType = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("stereochemistryType"), true,false);
 kw::_sym_pos = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("pos"), true,false);
 kw::_sym_order = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("order"), true,false);
 kw::_sym_properties = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("properties"), true,false);
 kw::_sym_a1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("a1"), true,false);
 kw::_sym_a2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("a2"), true,false);
 kw::_sym_bonds = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bonds"), true,false);
 kw::_sym_atom = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atom"), true,false);
 kw::_sym_position = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("position"), true,false);
 kw::_sym_weight = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("weight"), true,false);
 kw::_sym_atoms = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("atoms"), true,false);
 kw::_sym_k = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("k"), true,false);
 kw::_sym_title = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("title"), true,false);
 kw::_sym_ref = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("ref"), true,false);
 kw::_sym_bondDistinctions = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("bondDistinctions"), true,false);
 kw::_sym_Info = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Info"), true,false);
 kw::_sym_Types = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Types"), true,false);
 kw::_sym_Stretches = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Stretches"), true,false);
 kw::_sym_Angles = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Angles"), true,false);
 kw::_sym_Itors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Itors"), true,false);
 kw::_sym_Ptors = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Ptors"), true,false);
 kw::_sym_Nonbonds = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Nonbonds"), true,false);
 kw::_sym_Vdws = bootStrapSymbolMap->maybe_allocate_unique_symbol("KEYWORD",core::lispify_symbol_name("Vdws"), true,false);
 core::_sym_STARwatchDynamicBindingStackSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARwatchDynamicBindingStackSTAR"), true,false);
 core::_sym_symbolMacro = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("symbolMacro"), false,false);
 core::_sym_whole = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("whole"), false,false);
 core::_sym_env = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("env"), false,false);
 core::_sym_processDeclarations = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("processDeclarations"), false,false);
 core::_sym_evaluateVerbosity = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("evaluateVerbosity"), false,false);
 core::_sym_evaluateDepth = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("evaluateDepth"), false,false);
 core::_sym_classifyLetVariablesAndDeclares = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("classifyLetVariablesAndDeclares"), false,false);
 core::_sym_STAReval_with_env_hookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STAReval_with_env_hookSTAR"), true,false);
 core::_sym_eval_with_env_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("eval_with_env_default"), true,false);
 core::_sym_dlopen = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dlopen"), false,false);
 core::_sym_dlsym = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dlsym"), false,false);
 core::_sym_dladdr = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dladdr"), false,false);
 core::_sym_callWithVariableBound = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("callWithVariableBound"), true,false);
 core::_sym_instanceClassSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceClassSet"), true,false);
 core::_sym_intrusiveReferenceCountedPointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("intrusiveReferenceCountedPointer"), false,false);
 core::_sym_sharedReferenceCountedPointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharedReferenceCountedPointer"), false,false);
 core::_sym_mpsGarbageCollection = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("mpsGarbageCollection"), false,false);
 core::_sym_makeInvocationHistoryFrameIterator = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("makeInvocationHistoryFrameIterator"), false,false);
 core::_sym_STARbacktraceFrameSelectorHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbacktraceFrameSelectorHookSTAR"), true,false);
 core::_sym_smartPointerDetails = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("smartPointerDetails"), false,false);
 core::_sym_STARfset = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARfset"), false,false);
 core::_sym_unbound = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("unbound"), false,false);
 core::_sym_mapappend = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("mapappend"), false,false);
 core::_sym_macroexpand_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("macroexpand_default"), false,false);
 core::_sym_sequence_start_end = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sequence_start_end"), false,false);
 core::_sym_type_to_symbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("type_to_symbol"), false,false);
 core::_sym_gdb = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("gdb"), false,false);
 core::_sym_gdbInspect = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("gdbInspect"), false,false);
 core::_sym_separatePairList = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("separatePairList"), false,false);
 core::_sym_testMemoryError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("testMemoryError"), false,false);
 core::_sym_functionBlockName = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("functionBlockName"), false,false);
 core::_sym_validFunctionNameP = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("validFunctionNameP"), false,false);
 core::_sym_pointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("pointer"), true,false);
 core::_sym_toTaggedFixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("toTaggedFixnum"), true,false);
 core::_sym_fromTaggedFixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("fromTaggedFixnum"), true,false);
 core::_sym_dumpTaggedFixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dumpTaggedFixnum"), true,false);
 core::_sym_ihsBacktrace = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsBacktrace"), false,false);
 core::_sym_ihsTop = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsTop"), false,false);
 core::_sym_ihsPrev = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsPrev"), false,false);
 core::_sym_ihsNext = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsNext"), false,false);
 core::_sym_ihsFun = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsFun"), false,false);
 core::_sym_ihsEnv = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ihsEnv"), false,false);
 core::_sym_bdsTop = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bdsTop"), false,false);
 core::_sym_bdsVar = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bdsVar"), false,false);
 core::_sym_bdsVal = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bdsVal"), false,false);
 core::_sym_theClibBacktraceFunctionSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("theClibBacktraceFunctionSymbol"), true,false);
 core::_sym_printCurrentIhsFrameEnvironment = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("printCurrentIhsFrameEnvironment"), true,false);
 core::_sym_rehash_size = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("rehash_size"), true,false);
 core::_sym_rehash_threshold = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("rehash_threshold"), true,false);
 core::_sym_data = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("data"), true,false);
 core::_sym_hash_eql = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("hash_eql"), false,false);
 core::_sym_hash_equal = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("hash_equal"), false,false);
 core::_sym_hash_equalp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("hash_equalp"), false,false);
 core::_sym_fixnum_number_of_bits = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("fixnum_number_of_bits"), false,false);
 core::_sym_nan = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("nan"), false,false);
 core::_sym_log1p = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("log1p"), true,false);
 core::_sym_integer_divide = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("integer_divide"), true,false);
 core::_sym_integerToString = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("integerToString"), true,false);
 core::_sym_printUnreadableObjectFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("printUnreadableObjectFunction"), true,false);
 core::_sym_walkToFindSourceInfo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("walkToFindSourceInfo"), true,false);
 core::_sym_lookupSourceFileInfo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lookupSourceFileInfo"), true,false);
 core::_sym_STARmonitorRegisterSourceInfoSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARmonitorRegisterSourceInfoSTAR"), true,false);
 core::_sym_currentDir = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("currentDir"), true,false);
 core::_sym_file_kind = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("file_kind"), true,false);
 core::_sym_environmentActivationFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("environmentActivationFrame"), false,false);
 core::_sym_currentVisibleEnvironment = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("currentVisibleEnvironment"), false,false);
 core::_sym_runtimeEnvironment = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("runtimeEnvironment"), false,false);
 core::_sym_environmentList = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("environmentList"), false,false);
 core::_sym_environmentTypeList = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("environmentTypeList"), false,false);
 core::_sym_environmentId = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("environmentId"), false,false);
 core::_sym_singleDispatchWrongNumberArgumentsError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("singleDispatchWrongNumberArgumentsError"), false,false);
 core::_sym_singleDispatchTooManyArgumentsError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("singleDispatchTooManyArgumentsError"), false,false);
 core::_sym_singleDispatchBadLambdaListError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("singleDispatchBadLambdaListError"), false,false);
 core::_sym_singleDispatchMissingDispatchArgumentError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("singleDispatchMissingDispatchArgumentError"), false,false);
 core::_sym_tooFewArguments = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("tooFewArguments"), false,false);
 core::_sym_process_macro_lambda_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("process_macro_lambda_list"), false,false);
 core::_sym_process_single_dispatch_lambda_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("process_single_dispatch_lambda_list"), false,false);
 core::_sym_makeLambdaListHandler = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("makeLambdaListHandler"), false,false);
 core::_sym_processLambdaList = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("processLambdaList"), false,false);
 core::_sym_dispatchTable = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dispatchTable"), true,false);
 core::_sym_fileColumn = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("fileColumn"), true,false);
 core::_sym_makeStringOutputStreamFromString = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("makeStringOutputStreamFromString"), true,false);
 core::_sym_do_write_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("do_write_sequence"), true,false);
 core::_sym_streamLinenumber = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("streamLinenumber"), true,false);
 core::_sym_streamColumn = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("streamColumn"), true,false);
 core::_sym_single_dispatch_method = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("single_dispatch_method"), true,false);
 core::_sym_setf_documentation = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setf_documentation"), true,false);
 core::_sym_STARcxxDocumentationSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcxxDocumentationSTAR"), true,false);
 core::_sym_topLevel = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("topLevel"), true,false);
 core::_sym_scharSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("scharSet"), true,false);
 core::_sym_STARuseInterpreterForEvalSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARuseInterpreterForEvalSTAR"), true,false);
 core::_sym_STARnotify_on_compileSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARnotify_on_compileSTAR"), true,false);
 core::_sym_STARtrace_startupSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARtrace_startupSTAR"), true,false);
 core::_sym_STARdebugInterpretedClosureSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugInterpretedClosureSTAR"), true,false);
 core::_sym_STARdebugFlowControlSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugFlowControlSTAR"), true,false);
 core::_sym_STARdebugStartupSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugStartupSTAR"), true,false);
 core::_sym__BANG_unbound_BANG_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_BANG_unbound_BANG_"), true,false);
 core::_sym_bitArrayOp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bitArrayOp"), true,false);
 core::_sym_lambdaName = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lambdaName"), true,false);
 core::_sym_printf = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("printf"), false,false);
 core::_sym_asin = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("asin"), true,false);
 core::_sym_asinh = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("asinh"), true,false);
 core::_sym_acos = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("acos"), true,false);
 core::_sym_acosh = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("acosh"), true,false);
 core::_sym_atanh = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("atanh"), true,false);
 core::_sym_STARpollTicksPerGcSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARpollTicksPerGcSTAR"), true,false);
 core::_sym__PLUS_standardReadtable_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_standardReadtable_PLUS_"), true,false);
 core::_sym_closedStream = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("closedStream"), true,false);
 core::_sym__PLUS_numberOfFixedArguments_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_numberOfFixedArguments_PLUS_"), true,false);
 core::_sym_STARinterpreterTraceSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARinterpreterTraceSTAR"), true,false);
 core::_sym_STARdebugLoadTimeValuesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugLoadTimeValuesSTAR"), true,false);
 core::_sym_STARdebugEvalSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugEvalSTAR"), true,false);
 core::_sym_STARdebugInterpretedFunctionsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugInterpretedFunctionsSTAR"), true,false);
 core::_sym_STARdebugMonitorSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugMonitorSTAR"), false,false);
 core::_sym_monitorReader = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("monitorReader"), false,false);
 core::_sym_tsp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("tsp"), true,false);
 core::_sym_tmv = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("tmv"), true,false);
 core::_sym_invocationHistoryFrame = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("invocationHistoryFrame"), true,false);
 core::_sym_size_t = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("size_t"), true,false);
 core::_sym_threadInfo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("threadInfo"), true,false);
 core::_sym_circle_subst = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("circle_subst"), true,false);
 core::_sym_STARsourceDatabaseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsourceDatabaseSTAR"), true,false);
 core::_sym_STARstartRunTimeSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARstartRunTimeSTAR"), true,false);
 core::_sym_STARcommandLineLoadSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcommandLineLoadSTAR"), true,false);
 core::_sym_STARihsCurrentSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARihsCurrentSTAR"), true,false);
 core::_sym_STARllvmFunctionNameHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARllvmFunctionNameHookSTAR"), true,false);
 core::_sym_STARtopLevelCommandHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARtopLevelCommandHookSTAR"), true,false);
 core::_sym_STARloadSearchListSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARloadSearchListSTAR"), true,false);
 core::_sym_loadBitcode = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("loadBitcode"), true,false);
 core::_sym_loadSource = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("loadSource"), true,false);
 core::_sym_loadBundle = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("loadBundle"), true,false);
 core::_sym_STARallCxxClassesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARallCxxClassesSTAR"), true,false);
 core::_sym_simpleProgramError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("simpleProgramError"), true,false);
 core::_sym_STARdebugReaderSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugReaderSTAR"), true,false);
 core::_sym_STARenablePrintPrettySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARenablePrintPrettySTAR"), true,false);
 core::_sym_STARcircle_counterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcircle_counterSTAR"), true,false);
 core::_sym_STARcircle_stackSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcircle_stackSTAR"), true,false);
 core::_sym_dynamicGo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dynamicGo"), true,false);
 core::_sym_localGo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("localGo"), true,false);
 core::_sym__PLUS_ecl_syntax_progv_list_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_ecl_syntax_progv_list_PLUS_"), true,false);
 core::_sym__PLUS_io_syntax_progv_list_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_io_syntax_progv_list_PLUS_"), true,false);
 core::_sym_STARprintPackageSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARprintPackageSTAR"), false,false);
 core::_sym_STARsharpEqContextSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharpEqContextSTAR"), false,false);
 core::_sym_STARcircleCounterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcircleCounterSTAR"), true,false);
 core::_sym_STARnestedErrorDepthSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARnestedErrorDepthSTAR"), false,false);
 core::_sym_setThrowPosition = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setThrowPosition"), false,false);
 core::_sym_tooFewArgumentsError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("tooFewArgumentsError"), true,false);
 core::_sym_tooManyArgumentsError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("tooManyArgumentsError"), true,false);
 core::_sym_unrecognizedKeywordArgumentError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("unrecognizedKeywordArgumentError"), false,false);
 core::_sym_invalidKeywordArgumentError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("invalidKeywordArgumentError"), false,false);
 core::_sym__PLUS_llvmTargetTriple_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_llvmTargetTriple_PLUS_"), false,false);
 core::_sym__PLUS_executableName_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_executableName_PLUS_"), false,false);
 core::_sym_STARcodeWalkerSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcodeWalkerSTAR"), true,false);
 core::_sym_STARcurrentSourceFileInfoSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcurrentSourceFileInfoSTAR"), true,false);
 core::_sym_STARcurrentSourcePosInfoSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcurrentSourcePosInfoSTAR"), true,false);
 core::_sym_STARdebugMacroexpandSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdebugMacroexpandSTAR"), false,false);
 core::_sym_STARenvironmentPrintingTabSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARenvironmentPrintingTabSTAR"), false,false);
 core::_sym_STARenvironmentPrintingTabIncrementSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARenvironmentPrintingTabIncrementSTAR"), false,false);
 core::_sym__PLUS_activationFrameNil_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_PLUS_activationFrameNil_PLUS_"), false,false);
 core::_sym_parse_macro = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("parse_macro"), false,false);
 core::_sym_globalFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("globalFunction"), false,false);
 core::_sym_globalSetfFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("globalSetfFunction"), false,false);
 core::_sym_lexicalFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lexicalFunction"), false,false);
 core::_sym_declaredSpecial = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("declaredSpecial"), false,false);
 core::_sym_lexical = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lexical"), false,false);
 core::_sym_STARsystem_defsetf_update_functionsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsystem_defsetf_update_functionsSTAR"), false,false);
 core::_sym_STARbackquote_expand_hookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbackquote_expand_hookSTAR"), false,false);
 core::_sym_single_dispatch_on = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("single_dispatch_on"), false,false);
 core::_sym_STARdocumentation_poolSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdocumentation_poolSTAR"), false,false);
 core::_sym_STARexecutable_nameSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARexecutable_nameSTAR"), false,false);
 core::_sym_generic = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("generic"), false,false);
 core::_sym_DOT = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("DOT"), false,false);
 core::_sym_AMPva_rest = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("AMPva_rest"), true,false);
 core::_sym_anonymous = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("anonymous"), false,false);
 core::_sym_macro = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("macro"), false,false);
 core::_sym_STARdocumentation_databaseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARdocumentation_databaseSTAR"), false,false);
 core::_sym___init__ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("__init__"), false,false);
 core::_sym_input_stream_designator = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("input_stream_designator"), false,false);
 core::_sym_STARprint_source_code_consSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARprint_source_code_consSTAR"), false,false);
 core::_sym_STARechoReplReadSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARechoReplReadSTAR"), false,false);
 core::_sym_eof_error_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("eof_error_p"), false,false);
 core::_sym_eof_value = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("eof_value"), false,false);
 core::_sym_start = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("start"), false,false);
 core::_sym_end = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("end"), false,false);
 core::_sym_preserve_whitespace = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("preserve_whitespace"), false,false);
 core::_sym_io = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("io"), false,false);
 core::_sym_probe = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("probe"), false,false);
 core::_sym_newVersion = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("newVersion"), false,false);
 core::_sym_renameAndDelete = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("renameAndDelete"), false,false);
 core::_sym_overwrite = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("overwrite"), false,false);
 core::_sym_supersede = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("supersede"), false,false);
 core::_sym_create = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("create"), false,false);
 core::_sym_input_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("input_stream"), false,false);
 core::_sym_recursive_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("recursive_p"), false,false);
 core::_sym_dimensions = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dimensions"), false,false);
 core::_sym_element_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("element_type"), false,false);
 core::_sym_initial_element = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("initial_element"), false,false);
 core::_sym_adjustable = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("adjustable"), false,false);
 core::_sym_object = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("object"), false,false);
 core::_sym_okey = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("okey"), false,false);
 core::_sym_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("default"), false,false);
 core::_sym_dot = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dot"), false,false);
 core::_sym_ifDoesNotExist = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ifDoesNotExist"), false,false);
 core::_sym_symbolMacroletLambda = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("symbolMacroletLambda"), true,false);
 core::_sym_lambda_with_handler = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lambda_with_handler"), false,false);
 core::_sym_color = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("color"), false,false);
 core::_sym_foreach = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("foreach"), false,false);
 core::_sym_STARPATHSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARPATHSTAR"), false,false);
 core::_sym_STARargsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARargsSTAR"), false,false);
 core::_sym_STARcurrent_working_directorySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcurrent_working_directorySTAR"), false,false);
 core::_sym_backquote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote"), false,false);
 core::_sym_double_backquote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("double_backquote"), false,false);
 core::_sym_unquote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("unquote"), false,false);
 core::_sym_unquote_splice = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("unquote_splice"), false,false);
 core::_sym_unquote_nsplice = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("unquote_nsplice"), false,false);
 core::_sym_slot = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("slot"), false,false);
 core::_sym_item = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("item"), false,false);
 core::_sym_alist = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("alist"), false,false);
 core::_sym_key = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("key"), false,false);
 core::_sym_test_not = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("test_not"), false,false);
 core::_sym_forward_referenced_class = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("forward_referenced_class"), true,false);
 core::_sym_instance = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instance"), true,false);
 core::_sym_all_keys = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("all_keys"), false,false);
 core::_sym_cl_fixnum_bits = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("cl_fixnum_bits"), true,false);
 core::_sym_cArgumentsLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("cArgumentsLimit"), false,false);
 core::_sym_STARcommandLineArgumentsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcommandLineArgumentsSTAR"), true,false);
 core::_sym_STARprintVersionOnStartupSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARprintVersionOnStartupSTAR"), true,false);
 core::_sym_STARsilentStartupSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsilentStartupSTAR"), true,false);
 core::_sym_STARcommandLineLoadEvalSequenceSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcommandLineLoadEvalSequenceSTAR"), true,false);
 core::_sym_STARcommandLineImageSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARcommandLineImageSTAR"), true,false);
 core::_sym_STARclassNameHashTableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARclassNameHashTableSTAR"), true,false);
 core::_sym_selectPackage = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("selectPackage"), true,false);
 core::_sym_find_single_dispatch_generic_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("find_single_dispatch_generic_function"), false,false);
 core::_sym_setf_find_single_dispatch_generic_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setf_find_single_dispatch_generic_function"), false,false);
 core::_sym_forget_all_single_dispatch_generic_functions = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("forget_all_single_dispatch_generic_functions"), false,false);
 core::_sym_stackMonitor = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("stackMonitor"), false,false);
 core::_sym_setupStackMonitor = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setupStackMonitor"), false,false);
 core::_sym_invokeInternalDebugger = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("invokeInternalDebugger"), false,false);
 core::_sym_invokeInternalDebuggerFromGdb = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("invokeInternalDebuggerFromGdb"), false,false);
 core::_sym_universalErrorHandler = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("universalErrorHandler"), false,false);
 core::_sym_stackUsed = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("stackUsed"), false,false);
 core::_sym_exit = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("exit"), false,false);
 core::_sym_quit = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("quit"), false,false);
 core::_sym_getline = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("getline"), false,false);
 core::_sym_isTopLevelScript = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isTopLevelScript"), false,false);
 core::_sym_sourceFileName = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sourceFileName"), false,false);
 core::_sym_sourceLineColumn = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sourceLineColumn"), false,false);
 core::_sym_findFileInLispPath = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("findFileInLispPath"), false,false);
 core::_sym_setf_findClass = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setf_findClass"), false,false);
 core::_sym_isAssignableTo = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isAssignableTo"), false,false);
 core::_sym_isSubClassOf = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isSubClassOf"), false,false);
 core::_sym_repr = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("repr"), false,false);
 core::_sym_debugLogOn = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("debugLogOn"), false,false);
 core::_sym_debugLogOff = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("debugLogOff"), false,false);
 core::_sym_mpi_enabled = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("mpi_enabled"), false,false);
 core::_sym_mpi_rank = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("mpi_rank"), false,false);
 core::_sym_mpi_size = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("mpi_size"), false,false);
 core::_sym_sorted = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sorted"), false,false);
 core::_sym_database_dir = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("database_dir"), false,false);
 core::_sym_script_dir = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("script_dir"), false,false);
 core::_sym_libraryPath = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("libraryPath"), false,false);
 core::_sym_lispCodePath = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lispCodePath"), false,false);
 core::_sym_setCurrentWorkingDirectory = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setCurrentWorkingDirectory"), false,false);
 core::_sym_member1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("member1"), false,false);
 core::_sym_exportToPython = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("exportToPython"), false,false);
 core::_sym_slBoundp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("slBoundp"), false,false);
 core::_sym_isNil = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isNil"), false,false);
 core::_sym_instanceRef = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceRef"), false,false);
 core::_sym_instanceSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceSet"), false,false);
 core::_sym_instancep = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instancep"), false,false);
 core::_sym_instanceSigSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceSigSet"), false,false);
 core::_sym_instanceSig = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceSig"), false,false);
 core::_sym_instanceClass = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("instanceClass"), true,false);
 core::_sym_implementationClass = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("implementationClass"), true,false);
 core::_sym_classNameAsString = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("classNameAsString"), true,false);
 core::_sym_clock_gettime_nanoseconds = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("clock_gettime_nanoseconds"), false,false);
 core::_sym_testProfileTimer = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("testProfileTimer"), false,false);
 core::_sym_structure_print_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structure_print_function"), true,false);
 core::_sym_STARprint_structureSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARprint_structureSTAR"), true,false);
 core::_sym_makeRegex = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("makeRegex"), true,false);
 core::_sym_serialize = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("serialize"), true,false);
 core::_sym_STARserializerArchiveSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARserializerArchiveSTAR"), true,false);
 core::_sym_STARsharp_equal_alistSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharp_equal_alistSTAR"), false,false);
 core::_sym_STARsharp_sharp_alistSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharp_sharp_alistSTAR"), false,false);
 core::_sym_STARconsing_dot_allowedSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARconsing_dot_allowedSTAR"), false,false);
 core::_sym_STARconsing_dotSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARconsing_dotSTAR"), false,false);
 core::_sym_STARpreserve_whitespace_pSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARpreserve_whitespace_pSTAR"), false,false);
 core::_sym_STARinput_streamSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARinput_streamSTAR"), false,false);
 core::_sym_STARbackquote_levelSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbackquote_levelSTAR"), false,false);
 core::_sym_STARstandard_readtableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARstandard_readtableSTAR"), false,false);
 core::_sym_read_list_allow_consing_dot = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("read_list_allow_consing_dot"), false,false);
 core::_sym_reader_read_double_quote_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_read_double_quote_string"), false,false);
 core::_sym_reader_backquoted_expression = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_backquoted_expression"), false,false);
 core::_sym_sharp_backslash = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_backslash"), false,false);
 core::_sym_sharp_single_quote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_single_quote"), false,false);
 core::_sym_sharp_left_parenthesis = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_left_parenthesis"), false,false);
 core::_sym_sharp_asterisk = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_asterisk"), false,false);
 core::_sym_sharp_colon = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_colon"), false,false);
 core::_sym_sharp_dot = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_dot"), false,false);
 core::_sym_sharp_b = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_b"), false,false);
 core::_sym_sharp_o = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_o"), false,false);
 core::_sym_sharp_x = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_x"), false,false);
 core::_sym_sharp_r = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_r"), false,false);
 core::_sym_sharp_c = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_c"), false,false);
 core::_sym_sharp_a = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_a"), false,false);
 core::_sym_sharp_s = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_s"), false,false);
 core::_sym_sharp_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_p"), false,false);
 core::_sym_sharp_plus = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_plus"), false,false);
 core::_sym_sharp_minus = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_minus"), false,false);
 core::_sym_sharp_vertical_bar = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("sharp_vertical_bar"), false,false);
 core::_sym_dispatch_macro_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("dispatch_macro_character"), false,false);
 core::_sym_reader_double_quote_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_double_quote_string"), false,false);
 core::_sym_reader_comma_form = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_comma_form"), false,false);
 core::_sym_reader_list_allow_consing_dot = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_list_allow_consing_dot"), false,false);
 core::_sym_reader_error_unmatched_close_parenthesis = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_error_unmatched_close_parenthesis"), false,false);
 core::_sym_reader_quote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_quote"), false,false);
 core::_sym_reader_skip_semicolon_comment = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_skip_semicolon_comment"), false,false);
 core::_sym_reader_feature_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("reader_feature_p"), false,false);
 core::_sym_float_to_digits = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("float_to_digits"), true,false);
 core::_sym_defaultPathnameDefaults = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("defaultPathnameDefaults"), false,false);
 core::_sym_coerceToFilename = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("coerceToFilename"), true,false);
 core::_sym_coerceToFilePathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("coerceToFilePathname"), true,false);
 core::_sym_pathnameTranslations = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("pathnameTranslations"), true,false);
 core::_sym_coerceToPhysicalPathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("coerceToPhysicalPathname"), true,false);
 core::_sym_argument_number_error = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("argument_number_error"), true,false);
 core::_sym_signalSimpleError = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("signalSimpleError"), true,false);
 core::_sym_wrongTypeNthArg = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("wrongTypeNthArg"), true,false);
 core::_sym_wrongIndex = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("wrongIndex"), true,false);
 core::_sym_subclassp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("subclassp"), false,false);
 core::_sym_allocateRawClass = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("allocateRawClass"), false,false);
 core::_sym_inheritDefaultAllocator = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("inheritDefaultAllocator"), true,false);
 core::_sym_isString = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isString"), true,false);
 core::_sym_isArray = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("isArray"), true,false);
 core::_sym_testVal = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("testVal"), true,false);
 core::_sym__SHARP__BANG_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("_SHARP__BANG_"), true,false);
 core::_sym_base_string_concatenate = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("base_string_concatenate"), false,false);
 core::_sym_calculateMissingCommonLispSymbols = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("calculateMissingCommonLispSymbols"), true,false);
 core::_sym_copy_subarray = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("copy_subarray"), false,false);
 core::_sym_aset = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("aset"), false,false);
 core::_sym_rem_f = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("rem_f"), true,false);
 core::_sym_put_f = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("put_f"), false,false);
 core::_sym_conditionMessage = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("conditionMessage"), false,false);
 core::_sym_put_sysprop = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("put_sysprop"), false,false);
 core::_sym_get_sysprop = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("get_sysprop"), false,false);
 core::_sym_rem_sysprop = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("rem_sysprop"), false,false);
 core::_sym_bformat = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bformat"), false,false);
 core::_sym_STARbq_listSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_listSTAR"), false,false);
 core::_sym_STARbq_appendSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_appendSTAR"), false,false);
 core::_sym_STARbq_listSTARSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_listSTARSTAR"), false,false);
 core::_sym_STARbq_nconcSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_nconcSTAR"), false,false);
 core::_sym_STARbq_clobberableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_clobberableSTAR"), false,false);
 core::_sym_STARbq_quoteSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_quoteSTAR"), false,false);
 core::_sym_STARbq_quote_nilSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_quote_nilSTAR"), false,false);
 core::_sym_bq_simplify = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bq_simplify"), false,false);
 core::_sym_bq_remove_tokens = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("bq_remove_tokens"), false,false);
 core::_sym_backquote_maptree = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_maptree"), false,false);
 core::_sym_backquote_simplify = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_simplify"), false,false);
 core::_sym_backquote_completely_process = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_completely_process"), false,false);
 core::_sym_backquote_process = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_process"), false,false);
 core::_sym_backquote_bracket = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_bracket"), false,false);
 core::_sym_backquote_null_or_quoted = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_null_or_quoted"), false,false);
 core::_sym_backquote_attach_append = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_attach_append"), false,false);
 core::_sym_backquote_attach_conses = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_attach_conses"), false,false);
 core::_sym_backquote_remove_tokens = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_remove_tokens"), false,false);
 core::_sym_backquote_frob = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_frob"), false,false);
 core::_sym_backquote_splicing_frob = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_splicing_frob"), false,false);
 core::_sym_backquote_append = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("backquote_append"), false,false);
 core::_sym_quasiquote = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("quasiquote"), false,false);
 core::_sym_STARbq_simplifySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARbq_simplifySTAR"), false,false);
 core::_sym_record_cons = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("record_cons"), false,false);
 core::_sym_record_field = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("record_field"), false,false);
 core::_sym_set_record_field = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("set_record_field"), false,false);
 core::_sym_rem_record_field = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("rem_record_field"), false,false);
 core::_sym_ensure_documentation = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ensure_documentation"), false,false);
 core::_sym_STARsharp_equal_final_tableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharp_equal_final_tableSTAR"), false,false);
 core::_sym_STARsharp_equal_temp_tableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharp_equal_temp_tableSTAR"), false,false);
 core::_sym_STARsharp_equal_repl_tableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("STARsharp_equal_repl_tableSTAR"), false,false);
 core::_sym_ensureSingleDispatchGenericFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ensureSingleDispatchGenericFunction"), true,false);
 core::_sym_ensureSingleDispatchMethod = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ensureSingleDispatchMethod"), true,false);
 core::_sym_structure_include = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structure_include"), true,false);
 core::_sym_structure_slot_descriptions = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structure_slot_descriptions"), true,false);
 core::_sym_structureRef = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structureRef"), true,false);
 core::_sym_structureSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structureSet"), true,false);
 core::_sym_makeStructure = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("makeStructure"), true,false);
 core::_sym_structurep = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structurep"), true,false);
 core::_sym_structureSubtypep = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("structureSubtypep"), true,false);
 core::_sym_setfElt = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setfElt"), true,false);
 core::_sym_eltSet = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("eltSet"), true,false);
 core::_sym_setfSubseq = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setfSubseq"), true,false);
 core::_sym_make_vector = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("make_vector"), false,false);
 core::_sym_adjustVector = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("adjustVector"), true,false);
 core::_sym_loadTimeValuesIds = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("loadTimeValuesIds"), false,false);
 core::_sym_loadTimeValueArray = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("loadTimeValueArray"), false,false);
 core::_sym_lookupLoadTimeValue = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lookupLoadTimeValue"), false,false);
 core::_sym_lookupLoadTimeSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("lookupLoadTimeSymbol"), false,false);
 core::_sym_setRunTimeValuesVector = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("setRunTimeValuesVector"), true,false);
 core::_sym_ExternalObject_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ExternalObject"), true,false);
 core::_sym_ForeignData_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ForeignData"), true,false);
 core::_sym_LambdaListHandler_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LambdaListHandler"), true,false);
 core::_sym_LightUserData_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LightUserData"), true,false);
 core::_sym_UserData_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("UserData"), true,false);
 core::_sym_LoadTimeValues_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LoadTimeValues"), true,false);
 core::_sym_MultiStringBuffer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("MultiStringBuffer"), true,false);
 core::_sym_PosixTime_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("PosixTime"), true,false);
 core::_sym_PosixTimeDuration_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("PosixTimeDuration"), true,false);
 core::_sym_RegexMatch_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("RegexMatch"), true,false);
 core::_sym_Regex_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Regex"), true,false);
 core::_sym_SingleDispatchMethod_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SingleDispatchMethod"), true,false);
 core::_sym_SmallMultimap_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SmallMultimap"), true,false);
 core::_sym_WeakKeyMapping_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("WeakKeyMapping"), true,false);
 core::_sym_WeakPointer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("WeakPointer"), true,false);
 core::_sym_Instance_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Instance"), true,false);
 core::_sym_WrappedPointer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("WrappedPointer"), true,false);
 core::_sym_ArrayDisplaced_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ArrayDisplaced"), true,false);
 core::_sym_ArrayObjects_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ArrayObjects"), true,false);
 core::_sym_HashTableEqualp_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("HashTableEqualp"), true,false);
 core::_sym_SingleDispatchEffectiveMethodFunction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SingleDispatchEffectiveMethodFunction"), true,false);
 core::_sym_SingleDispatchGenericFunction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("single-dispatch-generic-function"), true,false);
 core::_sym_SpecialForm_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SpecialForm"), true,false);
 core::_sym_SexpLoadArchive_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SexpLoadArchive"), true,false);
 core::_sym_SexpSaveArchive_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SexpSaveArchive"), true,false);
 core::_sym_VectorDisplaced_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("VectorDisplaced"), true,false);
 core::_sym_CxxClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("CxxClass"), true,false);
 core::_sym_ForwardReferencedClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ForwardReferencedClass"), true,false);
 core::_sym_StrWithFillPtr_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("base-string-with-fill-ptr"), true,false);
 core::_sym_InvocationHistoryFrameIterator_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("InvocationHistoryFrameIterator"), true,false);
 core::_sym_Reader_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Reader"), true,false);
 core::_sym_HashTableEqual_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("HashTableEqual"), true,false);
 core::_sym_Binder_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Binder"), true,false);
 core::_sym_Path_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("path"), true,false);
 core::_sym_DirectoryIterator_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("DirectoryIterator"), true,false);
 core::_sym_RecursiveDirectoryIterator_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("RecursiveDirectoryIterator"), true,false);
 core::_sym_DirectoryEntry_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("DirectoryEntry"), true,false);
 core::_sym_FileStatus_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("FileStatus"), true,false);
 core::_sym_IntArray_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("IntArray"), true,false);
 core::_sym_Iterator_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Iterator"), true,false);
 core::_sym_IOFileStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("iofile-stream"), true,false);
 core::_sym_IOStreamStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("iostream-stream"), true,false);
 core::_sym_StringOutputStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("string-output-stream"), true,false);
 core::_sym_StringInputStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("string-input-stream"), true,false);
 core::_sym_CandoException_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("CandoException"), true,false);
 core::_sym_VaList_dummy_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("VA-LIST"), true,false);
 core::_sym_Pointer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Pointer"), true,false);
 core::_sym_Environment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Environment"), true,false);
 core::_sym_LexicalEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LexicalEnvironment"), true,false);
 core::_sym_RuntimeVisibleEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("RuntimeVisibleEnvironment"), true,false);
 core::_sym_ValueEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ValueEnvironment"), true,false);
 core::_sym_FunctionValueEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("FunctionValueEnvironment"), true,false);
 core::_sym_CompileTimeEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("CompileTimeEnvironment"), true,false);
 core::_sym_UnwindProtectEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("UnwindProtectEnvironment"), true,false);
 core::_sym_BlockEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("BlockEnvironment"), true,false);
 core::_sym_CatchEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("CatchEnvironment"), true,false);
 core::_sym_FunctionContainerEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("FunctionContainerEnvironment"), true,false);
 core::_sym_TagbodyEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("TagbodyEnvironment"), true,false);
 core::_sym_MacroletEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("MacroletEnvironment"), true,false);
 core::_sym_SymbolMacroletEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SymbolMacroletEnvironment"), true,false);
 core::_sym_StackValueEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("StackValueEnvironment"), true,false);
 core::_sym_GlueEnvironment_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("GlueEnvironment"), true,false);
 core::_sym_ActivationFrame_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ActivationFrame"), true,false);
 core::_sym_ValueFrame_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("ValueFrame"), true,false);
 core::_sym_FunctionFrame_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("FunctionFrame"), true,false);
 core::_sym_TagbodyFrame_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("TagbodyFrame"), true,false);
 core::_sym_Metaobject_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("metaobject"), true,false);
 core::_sym_Specializer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("specializer"), true,false);
 core::_sym_WeakHashTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("WeakHashTable"), true,false);
 core::_sym_WeakKeyHashTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("WeakKeyHashTable"), true,false);
 core::_sym_SourceFileInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SourceFileInfo"), true,false);
 core::_sym_SourcePosInfo_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SourcePosInfo"), true,false);
 core::_sym_SourceManager_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SourceManager"), true,false);
 core::_sym_CxxObject_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("CxxObject"), true,false);
 core::_sym_Record_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Record"), true,false);
 core::_sym_HashTableEql_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("HashTableEql"), true,false);
 core::_sym_HashTableEq_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("HashTableEq"), true,false);
 core::_sym_VectorObjects_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("VectorObjects"), true,false);
 core::_sym_VectorObjectsWithFillPtr_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("VectorObjectsWithFillPtr"), true,false);
 core::_sym_SymbolToEnumConverter_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SymbolToEnumConverter"), true,false);
 core::_sym_SNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SNode"), true,false);
 core::_sym_LeafSNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LeafSNode"), true,false);
 core::_sym_BranchSNode_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("BranchSNode"), true,false);
 core::_sym_Archive_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("Archive"), true,false);
 core::_sym_LoadArchive_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("LoadArchive"), true,false);
 core::_sym_SaveArchive_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SaveArchive"), true,false);
 core::_sym_SmallMap_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CORE",core::lispify_symbol_name("SmallMap"), true,false);
 cl::_sym_case = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("case"), true,false);
 cl::_sym_otherwise = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("otherwise"), true,false);
 cl::_sym_ignore = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ignore"), true,false);
 cl::_sym_multipleValueSetq = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("multipleValueSetq"), true,false);
 cl::_sym_prog1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("prog1"), true,false);
 cl::_sym_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("block"), true,false);
 cl::_sym_throw = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("throw"), true,false);
 cl::_sym_apply = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("apply"), true,false);
 cl::_sym_funcall = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("funcall"), true,false);
 cl::_sym_compute_applicable_methods = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("compute_applicable_methods"), true,false);
 cl::_sym_no_applicable_method = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("no_applicable_method"), true,false);
 cl::_sym_standardGenericFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("standardGenericFunction"), true,false);
 cl::_sym_sleep = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sleep"), true,false);
 cl::_sym_let = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("let"), true,false);
 cl::_sym_letSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("letSTAR"), true,false);
 cl::_sym_return_from = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("return_from"), true,false);
 cl::_sym_catch = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("catch"), true,false);
 cl::_sym_load_time_value = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("load_time_value"), true,false);
 cl::_sym_setq = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("setq"), true,false);
 cl::_sym_eval_when = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("eval_when"), true,false);
 cl::_sym_locally = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("locally"), true,false);
 cl::_sym_symbol_macrolet = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbol_macrolet"), true,false);
 cl::_sym_flet = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("flet"), true,false);
 cl::_sym_macrolet = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("macrolet"), true,false);
 cl::_sym_tagbody = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("tagbody"), true,false);
 cl::_sym_multiple_value_call = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("multiple_value_call"), true,false);
 cl::_sym_the = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("the"), true,false);
 cl::_sym_go = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("go"), true,false);
 cl::_sym_multiple_value_prog1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("multiple_value_prog1"), true,false);
 cl::_sym_if = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("if"), true,false);
 cl::_sym_unwind_protect = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unwind_protect"), true,false);
 cl::_sym_labels = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("labels"), true,false);
 cl::_sym_progv = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("progv"), true,false);
 cl::_sym_setf = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("setf"), true,false);
 cl::_sym_read = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read"), true,false);
 cl::_sym_read_preserving_whitespace = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read_preserving_whitespace"), true,false);
 cl::_sym_read_delimited_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read_delimited_list"), true,false);
 cl::_sym_every = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("every"), true,false);
 cl::_sym_some = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("some"), true,false);
 cl::_sym_notevery = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("notevery"), true,false);
 cl::_sym_notany = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("notany"), true,false);
 cl::_sym_mapcar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mapcar"), true,false);
 cl::_sym_mapc = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mapc"), true,false);
 cl::_sym_maplist = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("maplist"), true,false);
 cl::_sym_mapl = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mapl"), true,false);
 cl::_sym_mapcan = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mapcan"), true,false);
 cl::_sym_mapcon = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mapcon"), true,false);
 cl::_sym_classOf = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("classOf"), true,false);
 cl::_sym_identity = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("identity"), true,false);
 cl::_sym_constantp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("constantp"), true,false);
 cl::_sym_ash = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ash"), true,false);
 cl::_sym_specialOperatorP = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("specialOperatorP"), true,false);
 cl::_sym_macroFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("macroFunction"), true,false);
 cl::_sym_gensym = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("gensym"), true,false);
 cl::_sym_type_of = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("type_of"), true,false);
 cl::_sym_fdefinition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fdefinition"), true,false);
 cl::_sym_fboundp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fboundp"), true,false);
 cl::_sym_fmakunbound = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fmakunbound"), true,false);
 cl::_sym_values_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("values_list"), true,false);
 cl::_sym_make_hash_table = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_hash_table"), true,false);
 cl::_sym_maphash = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("maphash"), true,false);
 cl::_sym_clrhash = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("clrhash"), true,false);
 cl::_sym_remhash = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("remhash"), true,false);
 cl::_sym_max = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("max"), true,false);
 cl::_sym_min = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("min"), true,false);
 cl::_sym_zerop = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("zerop"), true,false);
 cl::_sym__LT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_LT_"), true,false);
 cl::_sym__GT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_GT_"), true,false);
 cl::_sym__LE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_LE_"), true,false);
 cl::_sym__GE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_GE_"), true,false);
 cl::_sym__EQ_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_EQ_"), true,false);
 cl::_sym__NE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_NE_"), true,false);
 cl::_sym__PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_PLUS_"), true,false);
 cl::_sym__TIMES_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_TIMES_"), true,false);
 cl::_sym__MINUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_MINUS_"), true,false);
 cl::_sym_logand = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logand"), true,false);
 cl::_sym_logior = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logior"), true,false);
 cl::_sym_logandc1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logandc1"), true,false);
 cl::_sym_logandc2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logandc2"), true,false);
 cl::_sym_logeqv = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logeqv"), true,false);
 cl::_sym_lognand = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lognand"), true,false);
 cl::_sym_lognor = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lognor"), true,false);
 cl::_sym_lognot = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lognot"), true,false);
 cl::_sym_logorc1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logorc1"), true,false);
 cl::_sym_logorc2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logorc2"), true,false);
 cl::_sym_logxor = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logxor"), true,false);
 cl::_sym_sqrt = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sqrt"), true,false);
 cl::_sym_cos = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cos"), true,false);
 cl::_sym_tan = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("tan"), true,false);
 cl::_sym_sinh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sinh"), true,false);
 cl::_sym_cosh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cosh"), true,false);
 cl::_sym_tanh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("tanh"), true,false);
 cl::_sym_conjugate = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("conjugate"), true,false);
 cl::_sym_log = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("log"), true,false);
 cl::_sym_expt = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("expt"), true,false);
 cl::_sym_exp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("exp"), true,false);
 cl::_sym_getUniversalTime = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getUniversalTime"), true,false);
 cl::_sym_leastPositiveSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveSingleFloat"), true,false);
 cl::_sym_leastNegativeSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeSingleFloat"), true,false);
 cl::_sym_mostPositiveSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostPositiveSingleFloat"), true,false);
 cl::_sym_mostNegativeSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostNegativeSingleFloat"), true,false);
 cl::_sym_leastPositiveShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveShortFloat"), true,false);
 cl::_sym_leastNegativeShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeShortFloat"), true,false);
 cl::_sym_mostPositiveShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostPositiveShortFloat"), true,false);
 cl::_sym_mostNegativeShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostNegativeShortFloat"), true,false);
 cl::_sym_leastPositiveDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveDoubleFloat"), true,false);
 cl::_sym_leastNegativeDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeDoubleFloat"), true,false);
 cl::_sym_mostPositiveDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostPositiveDoubleFloat"), true,false);
 cl::_sym_mostNegativeDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostNegativeDoubleFloat"), true,false);
 cl::_sym_leastPositiveLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveLongFloat"), true,false);
 cl::_sym_leastNegativeLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeLongFloat"), true,false);
 cl::_sym_mostPositiveLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostPositiveLongFloat"), true,false);
 cl::_sym_mostNegativeLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mostNegativeLongFloat"), true,false);
 cl::_sym_leastNegativeNormalizedSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeNormalizedSingleFloat"), true,false);
 cl::_sym_leastNegativeNormalizedShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeNormalizedShortFloat"), true,false);
 cl::_sym_leastNegativeNormalizedDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeNormalizedDoubleFloat"), true,false);
 cl::_sym_leastNegativeNormalizedLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastNegativeNormalizedLongFloat"), true,false);
 cl::_sym_leastPositiveNormalizedSingleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveNormalizedSingleFloat"), true,false);
 cl::_sym_leastPositiveNormalizedShortFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveNormalizedShortFloat"), true,false);
 cl::_sym_leastPositiveNormalizedDoubleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveNormalizedDoubleFloat"), true,false);
 cl::_sym_leastPositiveNormalizedLongFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("leastPositiveNormalizedLongFloat"), true,false);
 cl::_sym_pi = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pi"), true,false);
 cl::_sym_gcd = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("gcd"), true,false);
 cl::_sym_lcm = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lcm"), true,false);
 cl::_sym_numerator = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("numerator"), true,false);
 cl::_sym_denominator = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("denominator"), true,false);
 cl::_sym_floor = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floor"), true,false);
 cl::_sym_ceiling = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ceiling"), true,false);
 cl::_sym_truncate = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("truncate"), true,false);
 cl::_sym_round = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("round"), true,false);
 cl::_sym_mod = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mod"), true,false);
 cl::_sym_rem = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("rem"), true,false);
 cl::_sym_decodeFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("decodeFloat"), true,false);
 cl::_sym_scaleFloat = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("scaleFloat"), true,false);
 cl::_sym_floatSign = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatSign"), true,false);
 cl::_sym_floatDigits = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatDigits"), true,false);
 cl::_sym_floatPrecision = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatPrecision"), true,false);
 cl::_sym_integer_decode_float = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("integer_decode_float"), true,false);
 cl::_sym_complex = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("complex"), true,false);
 cl::_sym_realpart = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("realpart"), true,false);
 cl::_sym_imagpart = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("imagpart"), true,false);
 cl::_sym_print = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("print"), true,false);
 cl::_sym_prin1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("prin1"), true,false);
 cl::_sym_princ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("princ"), true,false);
 cl::_sym_truename = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("truename"), true,false);
 cl::_sym_probe_file = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("probe_file"), true,false);
 cl::_sym_deleteFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("deleteFile"), true,false);
 cl::_sym_file_write_date = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("file_write_date"), true,false);
 cl::_sym_userHomedirPathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("userHomedirPathname"), true,false);
 cl::_sym_revappend = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("revappend"), true,false);
 cl::_sym_nreconc = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nreconc"), true,false);
 cl::_sym_listSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("listSTAR"), true,false);
 cl::_sym_butlast = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("butlast"), true,false);
 cl::_sym_nbutlast = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nbutlast"), true,false);
 cl::_sym_nthcdr = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nthcdr"), true,false);
 cl::_sym_copyList = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("copyList"), true,false);
 cl::_sym_last = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("last"), true,false);
 cl::_sym_filePosition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("filePosition"), true,false);
 cl::_sym_readSequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readSequence"), true,false);
 cl::_sym_read_from_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read_from_string"), true,false);
 cl::_sym_read_line = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read_line"), true,false);
 cl::_sym_terpri = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("terpri"), true,false);
 cl::_sym_freshLine = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("freshLine"), true,false);
 cl::_sym_writeString = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("writeString"), true,false);
 cl::_sym_writeLine = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("writeLine"), true,false);
 cl::_sym_writeChar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("writeChar"), true,false);
 cl::_sym_clearInput = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("clearInput"), true,false);
 cl::_sym_clearOutput = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("clearOutput"), true,false);
 cl::_sym_readByte = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readByte"), true,false);
 cl::_sym_peekChar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("peekChar"), true,false);
 cl::_sym_readChar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readChar"), true,false);
 cl::_sym_readCharNoHang = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readCharNoHang"), true,false);
 cl::_sym_force_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("force_output"), true,false);
 cl::_sym_finish_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("finish_output"), true,false);
 cl::_sym_listen = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("listen"), true,false);
 cl::_sym_unread_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unread_char"), true,false);
 cl::_sym_makeStringOutputStream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("makeStringOutputStream"), true,false);
 cl::_sym_writeByte = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("writeByte"), true,false);
 cl::_sym_interactive_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("interactive_stream_p"), true,false);
 cl::_sym_streamp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("streamp"), true,false);
 cl::_sym_close = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("close"), true,false);
 cl::_sym_get_output_stream_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("get_output_stream_string"), true,false);
 cl::_sym_synonymStreamSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("synonymStreamSymbol"), true,false);
 cl::_sym_boole_1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_1"), true,false);
 cl::_sym_boole_2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_2"), true,false);
 cl::_sym_boole_and = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_and"), true,false);
 cl::_sym_boole_andc1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_andc1"), true,false);
 cl::_sym_boole_andc2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_andc2"), true,false);
 cl::_sym_boole_c1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_c1"), true,false);
 cl::_sym_boole_c2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_c2"), true,false);
 cl::_sym_boole_clr = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_clr"), true,false);
 cl::_sym_boole_eqv = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_eqv"), true,false);
 cl::_sym_boole_ior = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_ior"), true,false);
 cl::_sym_boole_nand = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_nand"), true,false);
 cl::_sym_boole_nor = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_nor"), true,false);
 cl::_sym_boole_orc1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_orc1"), true,false);
 cl::_sym_boole_orc2 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_orc2"), true,false);
 cl::_sym_boole_set = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_set"), true,false);
 cl::_sym_boole_xor = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole_xor"), true,false);
 cl::_sym_printNotReadableObject = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("printNotReadableObject"), true,false);
 cl::_sym_provide = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("provide"), true,false);
 cl::_sym_seriousCondition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("seriousCondition"), true,false);
 cl::_sym_warn = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("warn"), true,false);
 cl::_sym_programError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("programError"), true,false);
 cl::_sym_cellError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cellError"), true,false);
 cl::_sym_unboundVariable = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unboundVariable"), true,false);
 cl::_sym_unboundSlot = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unboundSlot"), true,false);
 cl::_sym_undefinedFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("undefinedFunction"), true,false);
 cl::_sym_package_error = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("package_error"), true,false);
 cl::_sym_arithmeticError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("arithmeticError"), true,false);
 cl::_sym_floatingPointOverflow = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatingPointOverflow"), true,false);
 cl::_sym_floatingPointInexact = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatingPointInexact"), true,false);
 cl::_sym_floatingPointInvalidOperation = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatingPointInvalidOperation"), true,false);
 cl::_sym_floatingPointUnderflow = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatingPointUnderflow"), true,false);
 cl::_sym_divisionByZero = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("divisionByZero"), true,false);
 cl::_sym_printNotReadable = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("printNotReadable"), true,false);
 cl::_sym_streamError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("streamError"), true,false);
 cl::_sym_endOfFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("endOfFile"), true,false);
 cl::_sym_parseError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("parseError"), true,false);
 cl::_sym_readerError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readerError"), true,false);
 cl::_sym_STARrandom_stateSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARrandom_stateSTAR"), true,false);
 cl::_sym_simpleError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simpleError"), true,false);
 cl::_sym_storageCondition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("storageCondition"), true,false);
 cl::_sym_simpleCondition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simpleCondition"), true,false);
 cl::_sym_simpleWarning = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simpleWarning"), true,false);
 cl::_sym_warning = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("warning"), true,false);
 cl::_sym_styleWarning = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("styleWarning"), true,false);
 cl::_sym_asin = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("asin"), true,false);
 cl::_sym_acos = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("acos"), true,false);
 cl::_sym_asinh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("asinh"), true,false);
 cl::_sym_acosh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("acosh"), true,false);
 cl::_sym_atanh = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("atanh"), true,false);
 cl::_sym_dynamic_extent = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("dynamic_extent"), true,false);
 cl::_sym_ftype = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ftype"), true,false);
 cl::_sym_boole = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boole"), true,false);
 cl::_sym_callArgumentsLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("callArgumentsLimit"), true,false);
 cl::_sym_arrayDimensionLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("arrayDimensionLimit"), true,false);
 cl::_sym_arrayTotalSizeLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("arrayTotalSizeLimit"), true,false);
 cl::_sym_lambdaParametersLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lambdaParametersLimit"), true,false);
 cl::_sym_schar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("schar"), true,false);
 cl::_sym_fixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fixnum"), true,false);
 cl::_sym_nil = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nil"), true,false);
 cl::_sym_stream_element_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stream_element_type"), true,false);
 cl::_sym_stream_external_format = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stream_external_format"), true,false);
 cl::_sym_open_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("open_stream_p"), true,false);
 cl::_sym_write_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("write_sequence"), true,false);
 cl::_sym_read_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("read_sequence"), true,false);
 cl::_sym_file_string_length = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("file_string_length"), true,false);
 cl::_sym_echo_stream_input_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("echo_stream_input_stream"), true,false);
 cl::_sym_echo_stream_output_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("echo_stream_output_stream"), true,false);
 cl::_sym_concatenated_stream_streams = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("concatenated_stream_streams"), true,false);
 cl::_sym_synonym_stream_symbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("synonym_stream_symbol"), true,false);
 cl::_sym_broadcast_stream_streams = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("broadcast_stream_streams"), true,false);
 cl::_sym_getOutputStreamString = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getOutputStreamString"), true,false);
 cl::_sym_elt = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("elt"), true,false);
 cl::_sym_callNextMethod = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("callNextMethod"), true,false);
 cl::_sym_nextMethodP = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nextMethodP"), true,false);
 cl::_sym_internalTimeUnitsPerSecond = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("internalTimeUnitsPerSecond"), true,false);
 cl::_sym_getInternalRealTime = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getInternalRealTime"), true,false);
 cl::_sym_getInternalRunTime = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getInternalRunTime"), true,false);
 cl::_sym_logicalPathnameTranslations = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logicalPathnameTranslations"), true,false);
 cl::_sym_set = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("set"), true,false);
 cl::_sym_restartName = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("restartName"), true,false);
 cl::_sym_position = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("position"), true,false);
 cl::_sym_compileFile = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("compileFile"), true,false);
 cl::_sym_first = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("first"), true,false);
 cl::_sym_float = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("float"), true,false);
 cl::_sym_logical_pathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logical_pathname"), true,false);
 cl::_sym_pathnamep = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnamep"), true,false);
 cl::_sym_STARloadPathnameSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARloadPathnameSTAR"), true,false);
 cl::_sym_STARloadTruenameSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARloadTruenameSTAR"), true,false);
 cl::_sym_makeArray = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("makeArray"), true,false);
 cl::_sym_makePathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("makePathname"), true,false);
 cl::_sym_mismatch = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mismatch"), true,false);
 cl::_sym_SignedByte = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("SignedByte"), true,false);
 cl::_sym_UnsignedByte = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("UnsignedByte"), true,false);
 cl::_sym_Bit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Bit"), true,false);
 cl::_sym_STARdefaultPathnameDefaultsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARdefaultPathnameDefaultsSTAR"), true,false);
 cl::_sym_simpleTypeError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simpleTypeError"), true,false);
 cl::_sym_MultipleValuesLimit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("MultipleValuesLimit"), true,false);
 cl::_sym_keywordp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("keywordp"), true,false);
 cl::_sym_null = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("null"), true,false);
 cl::_sym_endp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("endp"), true,false);
 cl::_sym_symbolp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbolp"), true,false);
 cl::_sym_atom = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("atom"), true,false);
 cl::_sym_consp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("consp"), true,false);
 cl::_sym_listp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("listp"), true,false);
 cl::_sym_numberp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("numberp"), true,false);
 cl::_sym_integerp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("integerp"), true,false);
 cl::_sym_rationalp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("rationalp"), true,false);
 cl::_sym_floatp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("floatp"), true,false);
 cl::_sym_realp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("realp"), true,false);
 cl::_sym_complexp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("complexp"), true,false);
 cl::_sym_character = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("character"), true,false);
 cl::_sym_base_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("base_char"), true,false);
 cl::_sym_single_float = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("single_float"), true,false);
 cl::_sym_characterp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("characterp"), true,false);
 cl::_sym_stringp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stringp"), true,false);
 cl::_sym_bit_vector_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("bit_vector_p"), true,false);
 cl::_sym_vectorp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("vectorp"), true,false);
 cl::_sym_simple_vector_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple_vector_p"), true,false);
 cl::_sym_simple_string_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple_string_p"), true,false);
 cl::_sym_simple_bit_vector_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple_bit_vector_p"), true,false);
 cl::_sym_arrayp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("arrayp"), true,false);
 cl::_sym_packagep = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("packagep"), true,false);
 cl::_sym_functionp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("functionp"), true,false);
 cl::_sym_compiled_function_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("compiled_function_p"), true,false);
 cl::_sym_hash_table_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("hash_table_p"), true,false);
 cl::_sym__DIVIDE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("_DIVIDE_"), true,false);
 cl::_sym_typep = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("typep"), true,false);
 cl::_sym_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("type"), true,false);
 cl::_sym_step = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("step"), true,false);
 cl::_sym_speed = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("speed"), true,false);
 cl::_sym_space = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("space"), true,false);
 cl::_sym_sin = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sin"), true,false);
 cl::_sym_safety = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("safety"), true,false);
 cl::_sym_restart_bind = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("restart_bind"), true,false);
 cl::_sym_restart = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("restart"), true,false);
 cl::_sym_describe = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("describe"), true,false);
 cl::_sym_disassemble = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("disassemble"), true,false);
 cl::_sym_rename_file = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("rename_file"), true,false);
 cl::_sym_random = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("random"), true,false);
 cl::_sym_optimize = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("optimize"), true,false);
 cl::_sym_two_way_stream_input_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("two_way_stream_input_stream"), true,false);
 cl::_sym_two_way_stream_output_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("two_way_stream_output_stream"), true,false);
 cl::_sym_two_way_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("two_way_stream"), true,false);
 cl::_sym_make_two_way_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_two_way_stream"), true,false);
 cl::_sym_make_synonym_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_synonym_stream"), true,false);
 cl::_sym_invoke_restart = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("invoke_restart"), true,false);
 cl::_sym_get = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("get"), true,false);
 cl::_sym_find_restart = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("find_restart"), true,false);
 cl::_sym_fill_pointer = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fill_pointer"), true,false);
 cl::_sym_directory = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("directory"), true,false);
 cl::_sym_defun = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("defun"), true,false);
 cl::_sym_debug = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("debug"), true,false);
 cl::_sym_count = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("count"), true,false);
 cl::_sym_compute_restarts = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("compute_restarts"), true,false);
 cl::_sym_write = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("write"), true,false);
 cl::_sym_STARreadDefaultFloatFormatSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARreadDefaultFloatFormatSTAR"), true,false);
 cl::_sym_STARprint_baseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_baseSTAR"), true,false);
 cl::_sym_STARprint_levelSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_levelSTAR"), true,false);
 cl::_sym_STARprint_lengthSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_lengthSTAR"), true,false);
 cl::_sym_STARprint_radixSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_radixSTAR"), true,false);
 cl::_sym_STARprint_caseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_caseSTAR"), true,false);
 cl::_sym_STARprint_gensymSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_gensymSTAR"), true,false);
 cl::_sym_STARprint_arraySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_arraySTAR"), true,false);
 cl::_sym_STARprint_readablySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_readablySTAR"), true,false);
 cl::_sym_STARprint_escapeSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_escapeSTAR"), true,false);
 cl::_sym_STARprint_circleSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_circleSTAR"), true,false);
 cl::_sym_STARprint_linesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_linesSTAR"), true,false);
 cl::_sym_STARprint_right_marginSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_right_marginSTAR"), true,false);
 cl::_sym_STARprint_prettySTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_prettySTAR"), true,false);
 cl::_sym_STARprint_miser_widthSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_miser_widthSTAR"), true,false);
 cl::_sym_STARprint_pprint_dispatchSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARprint_pprint_dispatchSTAR"), true,false);
 cl::_sym_STARdebuggerHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARdebuggerHookSTAR"), true,false);
 cl::_sym_break = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("break"), true,false);
 cl::_sym_STARbreakOnSignalsSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARbreakOnSignalsSTAR"), true,false);
 cl::_sym_typeError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("typeError"), true,false);
 cl::_sym_printObject = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("printObject"), true,false);
 cl::_sym_controlError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("controlError"), true,false);
 cl::_sym_fileError = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fileError"), true,false);
 cl::_sym_satisfies = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("satisfies"), true,false);
 cl::_sym_T = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("T"), true,false);
 cl::_sym_method = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("method"), true,false);
 cl::_sym_generic_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("generic_function"), true,false);
 cl::_sym_cond = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cond"), true,false);
 cl::_sym_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stream"), true,false);
 cl::_sym_boolean = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boolean"), true,false);
 cl::_sym_keyword = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("keyword"), true,false);
 cl::_sym_array = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("array"), true,false);
 cl::_sym_simple_array = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple_array"), true,false);
 cl::_sym_vector = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("vector"), true,false);
 cl::_sym_simple_vector = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple_vector"), true,false);
 cl::_sym_input_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("input_stream_p"), true,false);
 cl::_sym_output_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("output_stream_p"), true,false);
 cl::_sym_STARstandard_inputSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARstandard_inputSTAR"), true,false);
 cl::_sym_STARstandard_outputSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARstandard_outputSTAR"), true,false);
 cl::_sym_STARerror_outputSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARerror_outputSTAR"), true,false);
 cl::_sym_STARtrace_outputSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARtrace_outputSTAR"), true,false);
 cl::_sym_STARdebug_ioSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARdebug_ioSTAR"), true,false);
 cl::_sym_STARquery_ioSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARquery_ioSTAR"), true,false);
 cl::_sym_STARterminal_ioSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARterminal_ioSTAR"), true,false);
 cl::_sym_STARgensym_counterSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARgensym_counterSTAR"), true,false);
 cl::_sym_standard_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("standard_char"), true,false);
 cl::_sym_extended_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("extended_char"), true,false);
 cl::_sym_special = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("special"), true,false);
 cl::_sym_nconc = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nconc"), true,false);
 cl::_sym_cadr = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cadr"), true,false);
 cl::_sym_STARmacroexpand_hookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARmacroexpand_hookSTAR"), true,false);
 cl::_sym_STARread_baseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARread_baseSTAR"), true,false);
 cl::_sym_compile = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("compile"), true,false);
 cl::_sym_load = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("load"), true,false);
 cl::_sym_eval = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("eval"), true,false);
 cl::_sym_STARread_evalSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARread_evalSTAR"), true,false);
 cl::_sym_define_modify_macro = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("define_modify_macro"), true,false);
 cl::_sym_destructuring_bind = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("destructuring_bind"), true,false);
 cl::_sym_deftype = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("deftype"), true,false);
 cl::_sym_define_method_combination = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("define_method_combination"), true,false);
 cl::_sym_defsetf = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("defsetf"), true,false);
 cl::_sym_AMPwhole = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPwhole"), true,false);
 cl::_sym_AMPenvironment = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPenvironment"), true,false);
 cl::_sym_AMPoptional = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPoptional"), true,false);
 cl::_sym_AMPkey = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPkey"), true,false);
 cl::_sym_AMPallow_other_keys = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPallow_other_keys"), true,false);
 cl::_sym_AMPaux = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPaux"), true,false);
 cl::_sym_AMPrest = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPrest"), true,false);
 cl::_sym_AMPbody = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("AMPbody"), true,false);
 cl::_sym_integer = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("integer"), true,false);
 cl::_sym_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sequence"), true,false);
 cl::_sym_declare = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("declare"), true,false);
 cl::_sym_variable = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("variable"), true,false);
 cl::_sym_bit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("bit"), true,false);
 cl::_sym_STARreadtableSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARreadtableSTAR"), true,false);
 cl::_sym_and = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("and"), true,false);
 cl::_sym_or = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("or"), true,false);
 cl::_sym_car = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("car"), true,false);
 cl::_sym_cdr = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cdr"), true,false);
 cl::_sym_dotimes = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("dotimes"), true,false);
 cl::_sym_dolist = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("dolist"), true,false);
 cl::_sym_do = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("do"), true,false);
 cl::_sym_package = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("package"), true,false);
 cl::_sym_aref = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("aref"), true,false);
 cl::_sym_nth = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nth"), true,false);
 cl::_sym_append = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("append"), true,false);
 cl::_sym_gethash = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("gethash"), true,false);
 cl::_sym_hash_table = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("hash_table"), true,false);
 cl::_sym_STARfeaturesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARfeaturesSTAR"), true,false);
 cl::_sym_STARload_printSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARload_printSTAR"), true,false);
 cl::_sym_STARload_verboseSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARload_verboseSTAR"), true,false);
 cl::_sym_lambda = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("lambda"), true,false);
 cl::_sym_symbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbol"), true,false);
 cl::_sym_STARpackageSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARpackageSTAR"), true,false);
 cl::_sym_STARmodulesSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARmodulesSTAR"), true,false);
 cl::_sym_progn = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("progn"), true,false);
 cl::_sym_quote = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("quote"), true,false);
 cl::_sym_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("function"), true,false);
 cl::_sym_slot_value = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("slot_value"), true,false);
 cl::_sym_values = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("values"), true,false);
 cl::_sym_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("list"), true,false);
 cl::_sym_standard_class = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("standard_class"), true,false);
 cl::_sym_rest = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("rest"), true,false);
 cl::_sym_most_negative_fixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("most_negative_fixnum"), true,false);
 cl::_sym_most_positive_fixnum = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("most_positive_fixnum"), true,false);
 cl::_sym_array_rank_limit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("array_rank_limit"), true,false);
 cl::_sym_char_code_limit = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_code_limit"), true,false);
 cl::_sym_apropos = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("apropos"), true,false);
 cl::_sym_export = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("export"), true,false);
 cl::_sym_intern = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("intern"), true,false);
 cl::_sym_findClass = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("findClass"), true,false);
 cl::_sym_error = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("error"), true,false);
 cl::_sym_cerror = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cerror"), true,false);
 cl::_sym_not = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("not"), true,false);
 cl::_sym_sort = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("sort"), true,false);
 cl::_sym_macroexpand_1 = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("macroexpand_1"), true,false);
 cl::_sym_macroexpand = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("macroexpand"), true,false);
 cl::_sym_acons = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("acons"), true,false);
 cl::_sym_assoc = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("assoc"), true,false);
 cl::_sym_member = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("member"), true,false);
 cl::_sym_find_package = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("find_package"), true,false);
 cl::_sym_copyTree = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("copyTree"), true,false);
 cl::_sym_eq = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("eq"), true,false);
 cl::_sym_eql = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("eql"), true,false);
 cl::_sym_equal = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("equal"), true,false);
 cl::_sym_equalp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("equalp"), true,false);
 cl::_sym_setMacroCharacter = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("setMacroCharacter"), true,false);
 cl::_sym_setDispatchMacroCharacter = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("setDispatchMacroCharacter"), true,false);
 cl::_sym_getDispatchMacroCharacter = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getDispatchMacroCharacter"), true,false);
 cl::_sym_pathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathname"), true,false);
 cl::_sym_mergePathnames = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("mergePathnames"), true,false);
 cl::_sym_wildPathnameP = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("wildPathnameP"), true,false);
 cl::_sym_make_pathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_pathname"), true,false);
 cl::_sym_pathnameHost = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameHost"), true,false);
 cl::_sym_pathnameDevice = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameDevice"), true,false);
 cl::_sym_pathnameDirectory = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameDirectory"), true,false);
 cl::_sym_pathnameName = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameName"), true,false);
 cl::_sym_pathnameType = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameType"), true,false);
 cl::_sym_pathnameVersion = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameVersion"), true,false);
 cl::_sym_pathnameMatchP = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathnameMatchP"), true,false);
 cl::_sym_translatePathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("translatePathname"), true,false);
 cl::_sym_translateLogicalPathname = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("translateLogicalPathname"), true,false);
 cl::_sym_namestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("namestring"), true,false);
 cl::_sym_parseNamestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("parseNamestring"), true,false);
 cl::_sym_fileNamestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fileNamestring"), true,false);
 cl::_sym_directoryNamestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("directoryNamestring"), true,false);
 cl::_sym_hostNamestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("hostNamestring"), true,false);
 cl::_sym_enoughNamestring = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("enoughNamestring"), true,false);
 cl::_sym_package_use_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("package_use_list"), true,false);
 cl::_sym_gentemp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("gentemp"), true,false);
 cl::_sym_makePackage = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("makePackage"), true,false);
 cl::_sym_listAllPackages = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("listAllPackages"), true,false);
 cl::_sym_use_package = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("use_package"), true,false);
 cl::_sym_unuse_package = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unuse_package"), true,false);
 cl::_sym_package_shadowing_symbols = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("package_shadowing_symbols"), true,false);
 cl::_sym_import = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("import"), true,false);
 cl::_sym_shadow = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("shadow"), true,false);
 cl::_sym_shadowing_import = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("shadowing_import"), true,false);
 cl::_sym_findSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("findSymbol"), true,false);
 cl::_sym_unintern = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("unintern"), true,false);
 cl::_sym_condition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("condition"), true,false);
 cl::_sym_defvar = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("defvar"), true,false);
 cl::_sym_defconstant = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("defconstant"), true,false);
 cl::_sym_defparameter = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("defparameter"), true,false);
 cl::_sym_intersection = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("intersection"), true,false);
 cl::_sym_union = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("union"), true,false);
 cl::_sym_remove = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("remove"), true,false);
 cl::_sym_pprint_dispatch = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pprint_dispatch"), true,false);
 cl::_sym_fileStream = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fileStream"), true,false);
 cl::_sym_make_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_list"), true,false);
 cl::_sym_cons = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("cons"), true,false);
 cl::_sym_getf = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("getf"), true,false);
 cl::_sym_make_symbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_symbol"), true,false);
 cl::_sym_symbolName = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbolName"), true,false);
 cl::_sym_symbolValue = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbolValue"), true,false);
 cl::_sym_symbolPackage = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbolPackage"), true,false);
 cl::_sym_symbolFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("symbolFunction"), true,false);
 cl::_sym_boundp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("boundp"), true,false);
 cl::_sym_makeCondition = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("makeCondition"), true,false);
 cl::_sym_format = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("format"), true,false);
 cl::_sym_documentation = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("documentation"), true,false);
 cl::_sym_copyStructure = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("copyStructure"), true,false);
 cl::_sym_char_code = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_code"), true,false);
 cl::_sym_code_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("code_char"), true,false);
 cl::_sym_char_int = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_int"), true,false);
 cl::_sym_name_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("name_char"), true,false);
 cl::_sym_char_name = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_name"), true,false);
 cl::_sym_alpha_char_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("alpha_char_p"), true,false);
 cl::_sym_standard_char_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("standard_char_p"), true,false);
 cl::_sym_charUpcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charUpcase"), true,false);
 cl::_sym_charDowncase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charDowncase"), true,false);
 cl::_sym_char_LT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_LT_"), true,false);
 cl::_sym_char_GT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_GT_"), true,false);
 cl::_sym_char_LE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_LE_"), true,false);
 cl::_sym_char_GE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_GE_"), true,false);
 cl::_sym_char_NE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_NE_"), true,false);
 cl::_sym_char_EQ_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char_EQ_"), true,false);
 cl::_sym_charLessp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charLessp"), true,false);
 cl::_sym_charGreaterp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charGreaterp"), true,false);
 cl::_sym_charNotGreaterp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charNotGreaterp"), true,false);
 cl::_sym_charNotLessp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charNotLessp"), true,false);
 cl::_sym_charNotEqual = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charNotEqual"), true,false);
 cl::_sym_charEqual = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("charEqual"), true,false);
 cl::_sym_digitCharP = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("digitCharP"), true,false);
 cl::_sym_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string"), true,false);
 cl::_sym_string_upcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_upcase"), true,false);
 cl::_sym_string_downcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_downcase"), true,false);
 cl::_sym_nstring_upcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nstring_upcase"), true,false);
 cl::_sym_nstring_downcase = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nstring_downcase"), true,false);
 cl::_sym_stringTrim = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stringTrim"), true,false);
 cl::_sym_stringLeftTrim = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stringLeftTrim"), true,false);
 cl::_sym_stringRightTrim = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stringRightTrim"), true,false);
 cl::_sym_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("char"), true,false);
 cl::_sym_string_EQ_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_EQ_"), true,false);
 cl::_sym_string_NE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_NE_"), true,false);
 cl::_sym_string_LT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_LT_"), true,false);
 cl::_sym_string_GT_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_GT_"), true,false);
 cl::_sym_string_LE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_LE_"), true,false);
 cl::_sym_string_GE_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_GE_"), true,false);
 cl::_sym_string_equal = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_equal"), true,false);
 cl::_sym_string_not_equal = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_not_equal"), true,false);
 cl::_sym_string_lessp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_lessp"), true,false);
 cl::_sym_string_greaterp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_greaterp"), true,false);
 cl::_sym_string_not_greaterp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_not_greaterp"), true,false);
 cl::_sym_string_not_lessp = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string_not_lessp"), true,false);
 cl::_sym_make_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_string"), true,false);
 cl::_sym_parseInteger = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("parseInteger"), true,false);
 cl::_sym_make_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("make_sequence"), true,false);
 cl::_sym_reverse = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("reverse"), true,false);
 cl::_sym_nreverse = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("nreverse"), true,false);
 cl::_sym_subseq = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("subseq"), true,false);
 cl::_sym_copySeq = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("copySeq"), true,false);
 cl::_sym_length = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("length"), true,false);
 cl::_sym_subtypep = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("subtypep"), true,false);
 cl::_sym_vectorPush = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("vectorPush"), true,false);
 cl::_sym_vectorPushExtend = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("vectorPushExtend"), true,false);
 cl::_sym_STARread_suppressSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("STARread_suppressSTAR"), true,false);
 cl::_sym_RandomState_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("random-state"), true,false);
 cl::_sym_ReadTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("readtable"), true,false);
 cl::_sym_StructureObject_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("structure-object"), true,false);
 cl::_sym_Null_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("null"), true,false);
 cl::_sym_StructureClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("structure-class"), true,false);
 cl::_sym_StandardClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("StandardClass"), true,false);
 cl::_sym_BuiltInClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("BuiltInClass"), true,false);
 cl::_sym_Package_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Package"), true,false);
 cl::_sym_Pathname_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("pathname"), true,false);
 cl::_sym_LogicalPathname_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("logical-pathname"), true,false);
 cl::_sym_Character_dummy_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("character"), true,false);
 cl::_sym_Stream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("stream"), true,false);
 cl::_sym_FileStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("file-stream"), true,false);
 cl::_sym_StringStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("string-stream"), true,false);
 cl::_sym_SynonymStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("synonym-stream"), true,false);
 cl::_sym_TwoWayStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("two-way-stream"), true,false);
 cl::_sym_BroadcastStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("BroadcastStream"), true,false);
 cl::_sym_ConcatenatedStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ConcatenatedStream"), true,false);
 cl::_sym_EchoStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("EchoStream"), true,false);
 cl::_sym_T_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("T"), true,false);
 cl::_sym_Cons_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Cons"), true,false);
 cl::_sym_Number_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("number"), true,false);
 cl::_sym_Real_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("real"), true,false);
 cl::_sym_Rational_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("rational"), true,false);
 cl::_sym_Integer_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("integer"), true,false);
 cl::_sym_Fixnum_dummy_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("fixnum"), true,false);
 cl::_sym_Float_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("float"), true,false);
 cl::_sym_ShortFloat_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ShortFloat"), true,false);
 cl::_sym_SingleFloat_dummy_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("SingleFloat"), true,false);
 cl::_sym_DoubleFloat_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("double-float"), true,false);
 cl::_sym_LongFloat_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("LongFloat"), true,false);
 cl::_sym_Complex_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("complex"), true,false);
 cl::_sym_Ratio_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("ratio"), true,false);
 cl::_sym_Bignum_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Bignum"), true,false);
 cl::_sym_Symbol_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Symbol"), true,false);
 cl::_sym_Function_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("Function"), true,false);
 cl::_sym_CompiledFunction_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("CompiledFunction"), true,false);
 cl::_sym_StandardObject_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("standard-object"), true,false);
 cl::_sym_Class_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("class"), true,false);
 cl::_sym_Array_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("array"), true,false);
 cl::_sym_Vector_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("vector"), true,false);
 cl::_sym_String_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("String"), true,false);
 cl::_sym_Str_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("base-string"), true,false);
 cl::_sym_HashTable_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("HashTable"), true,false);
 cl::_sym_BitVector_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("bit-vector"), true,false);
 cl::_sym_SimpleBitVector_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("simple-bit-vector"), true,false);
 cl::_sym_BitVectorWithFillPtr_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMMON-LISP",core::lispify_symbol_name("bit-vector-with-fill-ptr"), true,false);
 gray::_sym_aSingleGraySymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("aSingleGraySymbol"), false,false);
 gray::_sym_open_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("open_stream_p"), true,true);
 gray::_sym_stream_read_byte = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_read_byte"), true,false);
 gray::_sym_stream_write_byte = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_write_byte"), true,false);
 gray::_sym_stream_read_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_read_char"), true,false);
 gray::_sym_stream_read_char_no_hang = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_read_char_no_hang"), true,false);
 gray::_sym_stream_write_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_write_char"), true,false);
 gray::_sym_stream_write_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_write_string"), true,false);
 gray::_sym_stream_terpri = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_terpri"), true,false);
 gray::_sym_stream_fresh_line = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_fresh_line"), true,false);
 gray::_sym_stream_read_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_read_sequence"), true,false);
 gray::_sym_stream_write_sequence = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_write_sequence"), true,false);
 gray::_sym_stream_unread_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_unread_char"), true,false);
 gray::_sym_stream_peek_char = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_peek_char"), true,false);
 gray::_sym_stream_listen = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_listen"), true,false);
 gray::_sym_streamClearInput = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("streamClearInput"), true,false);
 gray::_sym_stream_clear_input = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_clear_input"), true,false);
 gray::_sym_stream_clear_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_clear_output"), true,false);
 gray::_sym_stream_force_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_force_output"), true,false);
 gray::_sym_stream_finish_output = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_finish_output"), true,false);
 gray::_sym_streamp = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("streamp"), true,true);
 gray::_sym_input_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("input_stream_p"), true,true);
 gray::_sym_output_stream_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("output_stream_p"), true,true);
 gray::_sym_stream_interactive_p = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_interactive_p"), true,false);
 gray::_sym_stream_element_type = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_element_type"), true,true);
 gray::_sym_stream_file_position = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_file_position"), true,false);
 gray::_sym_stream_line_column = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_line_column"), true,false);
 gray::_sym_stream_advance_to_column = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("stream_advance_to_column"), true,false);
 gray::_sym_close = bootStrapSymbolMap->maybe_allocate_unique_symbol("GRAY",core::lispify_symbol_name("close"), true,true);
 clos::_sym_compute_applicable_methods_using_classes = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("compute_applicable_methods_using_classes"), false,false);
 clos::_sym_compute_effective_method_function = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("compute_effective_method_function"), false,false);
 clos::_sym_std_compute_applicable_methods = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("std_compute_applicable_methods"), false,false);
 clos::_sym_std_compute_effective_method = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("std_compute_effective_method"), false,false);
 clos::_sym_clearGfunHash = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("clearGfunHash"), false,false);
 clos::_sym_setFuncallableInstanceFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("setFuncallableInstanceFunction"), true,false);
 clos::_sym_standardOptimizedReaderMethod = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("standardOptimizedReaderMethod"), false,false);
 clos::_sym_standardOptimizedWriterMethod = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("standardOptimizedWriterMethod"), false,false);
 clos::_sym_standardOptimizedReaderFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("standardOptimizedReaderFunction"), false,false);
 clos::_sym_standardOptimizedWriterFunction = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("standardOptimizedWriterFunction"), false,false);
 clos::_sym_classp = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("classp"), true,false);
 clos::_sym_aSingleClosSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("aSingleClosSymbol"), false,false);
 clos::_sym_class_precedence_list = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("class_precedence_list"), true,false);
 clos::_sym_StdClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("STD-CLASS"), true,false);
 clos::_sym_FuncallableStandardClass_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("CLOS",core::lispify_symbol_name("FuncallableStandardClass"), true,false);
 comp::_sym_compileInEnv = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("compileInEnv"), true,false);
 comp::_sym_compileFormAndEvalWithEnv = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("compileFormAndEvalWithEnv"), true,false);
 comp::_sym_STARimplicit_compile_hookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("STARimplicit_compile_hookSTAR"), true,false);
 comp::_sym_implicit_compile_hook_default = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("implicit_compile_hook_default"), true,false);
 comp::_sym_STARall_functions_for_one_compileSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("STARall_functions_for_one_compileSTAR"), true,false);
 comp::_sym_aSingleCompilerSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("aSingleCompilerSymbol"), false,false);
 comp::_sym_STARlowLevelTraceSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("STARlowLevelTraceSTAR"), true,false);
 comp::_sym_STARlowLevelTracePrintSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("COMPILER",core::lispify_symbol_name("STARlowLevelTracePrintSTAR"), true,false);
 ext::_sym_STARinspectorHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("STARinspectorHookSTAR"), true,false);
 ext::_sym_integer8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("integer8"), false,false);
 ext::_sym_byte8 = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("byte8"), false,false);
 ext::_sym_float_nan_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("float_nan_string"), true,false);
 ext::_sym_float_infinity_string = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("float_infinity_string"), true,false);
 ext::_sym_STARdefault_external_formatSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("STARdefault_external_formatSTAR"), true,false);
 ext::_sym_truly_the = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("truly_the"), true,false);
 ext::_sym_specialVar = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("specialVar"), true,false);
 ext::_sym_lexicalVar = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("lexicalVar"), true,false);
 ext::_sym_stackVar = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("stackVar"), true,false);
 ext::_sym__PLUS_processStandardInput_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("_PLUS_processStandardInput_PLUS_"), true,false);
 ext::_sym__PLUS_processStandardOutput_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("_PLUS_processStandardOutput_PLUS_"), true,false);
 ext::_sym__PLUS_processErrorOutput_PLUS_ = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("_PLUS_processErrorOutput_PLUS_"), true,false);
 ext::_sym_lambda_block = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("lambda_block"), true,false);
 ext::_sym_system = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("system"), false,false);
 ext::_sym_setenv = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("setenv"), true,false);
 ext::_sym_getenv = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("getenv"), true,false);
 ext::_sym_STARloadHooksSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("STARloadHooksSTAR"), true,false);
 ext::_sym_aSingleExtSymbol = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("aSingleExtSymbol"), false,false);
 ext::_sym_STARinvokeDebuggerHookSTAR = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("STARinvokeDebuggerHookSTAR"), true,false);
 ext::_sym_compiledFunctionName = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("compiledFunctionName"), true,false);
 ext::_sym_ansi_stream = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("ansi_stream"), true,false);
 ext::_sym_maybeQuote = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("maybeQuote"), true,false);
 ext::_sym_annotate = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("annotate"), true,false);
 ext::_sym_AnsiStream_O = bootStrapSymbolMap->maybe_allocate_unique_symbol("EXT",core::lispify_symbol_name("AnsiStream"), true,false);
#endif
#if defined(GARBAGE_COLLECT_ALL_SYMBOLS)
SMART_PTR_FIX(chem::_sym_iterateMatterSymbolConverter);
SMART_PTR_FIX(chem::_sym_allMatter);
SMART_PTR_FIX(chem::_sym_atoms);
SMART_PTR_FIX(chem::_sym_residues);
SMART_PTR_FIX(chem::_sym_molecules);
SMART_PTR_FIX(chem::_sym_bonds);
SMART_PTR_FIX(chem::_sym_name);
SMART_PTR_FIX(chem::_sym__PLUS_validChemdrawKeywords_PLUS_);
SMART_PTR_FIX(chem::_sym_STARparserNodeHolderSTAR);
SMART_PTR_FIX(chem::_sym_STARSabBondEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_STARLogicalOperatorTypeConverterSTAR);
SMART_PTR_FIX(chem::_sym_STARAtomTestEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_STARDonorAcceptorEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_STAREleDielectricEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_STARVdwMixRadiusEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_STARVdwMixWellEnumConverterSTAR);
SMART_PTR_FIX(chem::_sym_CDNode_O);
SMART_PTR_FIX(chem::_sym_CDBond_O);
SMART_PTR_FIX(chem::_sym_CDFragment_O);
SMART_PTR_FIX(chem::_sym_CDText_O);
SMART_PTR_FIX(chem::_sym_ChemDraw_O);
SMART_PTR_FIX(chem::_sym_Command_O);
SMART_PTR_FIX(chem::_sym_MacroModelFile_O);
SMART_PTR_FIX(chem::_sym_ReadAmberParameters_O);
SMART_PTR_FIX(chem::_sym_StructureComparer_O);
SMART_PTR_FIX(chem::_sym_Structure_Old_ListEntry_O);
SMART_PTR_FIX(chem::_sym_Structure_Old_List_O);
SMART_PTR_FIX(chem::_sym_Twister_O);
SMART_PTR_FIX(chem::_sym_TwisterDriver_O);
SMART_PTR_FIX(chem::_sym_ZMatrixInternal_O);
SMART_PTR_FIX(chem::_sym_ZMatrixBondInternal_O);
SMART_PTR_FIX(chem::_sym_ZMatrixAngleInternal_O);
SMART_PTR_FIX(chem::_sym_ZMatrixDihedralInternal_O);
SMART_PTR_FIX(chem::_sym_ZMatrixEntry_O);
SMART_PTR_FIX(chem::_sym_ZMatrix_O);
SMART_PTR_FIX(chem::_sym_R);
SMART_PTR_FIX(chem::_sym_S);
SMART_PTR_FIX(chem::_sym_UnknownConfiguration);
SMART_PTR_FIX(chem::_sym_candoDatabase);
SMART_PTR_FIX(chem::_sym_AM1_BCC_ar5);
SMART_PTR_FIX(chem::_sym_AM1_BCC_ar6);
SMART_PTR_FIX(chem::_sym_AM1_BCC_ar7);
SMART_PTR_FIX(chem::_sym_Alias_O);
SMART_PTR_FIX(chem::_sym__PLUS_configurationEnumConverter_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_stereochemistryTypeConverter_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_atomFlagSymbolConverter_PLUS_);
SMART_PTR_FIX(chem::_sym_configurationToSymbolConverter);
SMART_PTR_FIX(chem::_sym_stereochemistryToSymbolConverter);
SMART_PTR_FIX(chem::_sym_atomNeedsMinimizer);
SMART_PTR_FIX(chem::_sym_selected);
SMART_PTR_FIX(chem::_sym_onGrid);
SMART_PTR_FIX(chem::_sym_atomFixed);
SMART_PTR_FIX(chem::_sym_in3MemberRing);
SMART_PTR_FIX(chem::_sym_in4MemberRing);
SMART_PTR_FIX(chem::_sym_in5MemberRing);
SMART_PTR_FIX(chem::_sym_in6MemberRing);
SMART_PTR_FIX(chem::_sym_in7MemberRing);
SMART_PTR_FIX(chem::_sym_in8MemberRing);
SMART_PTR_FIX(chem::_sym_inRing);
SMART_PTR_FIX(chem::_sym__PLUS_bondOrderToSymbolConverter_PLUS_);
SMART_PTR_FIX(chem::_sym_AtomIdToAtomMap_O);
SMART_PTR_FIX(chem::_sym_AtomId_O);
SMART_PTR_FIX(chem::_sym__PLUS_elementToSymbolConverter_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_hybridizationToSymbolConverter_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_elementColors_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_minimizerStatusConverter_PLUS_);
SMART_PTR_FIX(chem::_sym__PLUS_preconditionerTypeConverter_PLUS_);
SMART_PTR_FIX(chem::_sym_MinimizerExceededMaxStepsError);
SMART_PTR_FIX(chem::_sym_MinimizerStuckError);
SMART_PTR_FIX(chem::_sym_MinimizerError);
SMART_PTR_FIX(chem::_sym_noPreconditioner);
SMART_PTR_FIX(chem::_sym_hessianPreconditioner);
SMART_PTR_FIX(chem::_sym_minimizerError);
SMART_PTR_FIX(chem::_sym_minimizerSucceeded);
SMART_PTR_FIX(chem::_sym_truncatedNewtonRunning);
SMART_PTR_FIX(chem::_sym_conjugateGradientRunning);
SMART_PTR_FIX(chem::_sym_steepestDescentRunning);
SMART_PTR_FIX(chem::_sym_minimizerIdle);
SMART_PTR_FIX(chem::_sym_Angle_O);
SMART_PTR_FIX(chem::_sym_ProperTorsion_O);
SMART_PTR_FIX(chem::_sym_ImproperTorsion_O);
SMART_PTR_FIX(chem::_sym_AtomIndexer_O);
SMART_PTR_FIX(chem::_sym_MapOfMonomerNamesToAtomIndexers_O);
SMART_PTR_FIX(chem::_sym_MonomerPack_O);
SMART_PTR_FIX(chem::_sym_StereoConfiguration_O);
SMART_PTR_FIX(chem::_sym_Stereoisomer_O);
SMART_PTR_FIX(chem::_sym_StereoInformation_O);
SMART_PTR_FIX(chem::_sym_ConformationExplorerEntryStage_O);
SMART_PTR_FIX(chem::_sym_ConformationExplorerEntry_O);
SMART_PTR_FIX(chem::_sym_ConformationExplorer_O);
SMART_PTR_FIX(chem::_sym_ConformationExplorerMatch_O);
SMART_PTR_FIX(chem::_sym_MonomerCoordinates_O);
SMART_PTR_FIX(chem::_sym_ConformationCollectionEntry_O);
SMART_PTR_FIX(chem::_sym_ConformationCollection_O);
SMART_PTR_FIX(chem::_sym_SuperposableConformationCollection_O);
SMART_PTR_FIX(chem::_sym_FrameRecognizer_O);
SMART_PTR_FIX(chem::_sym_Rotamer_O);
SMART_PTR_FIX(chem::_sym_AtomReferenceBase_O);
SMART_PTR_FIX(chem::_sym_AtomReference_O);
SMART_PTR_FIX(chem::_sym_RepresentedEntityNameSet_O);
SMART_PTR_FIX(chem::_sym_CoordinateSystem_O);
SMART_PTR_FIX(chem::_sym_PdbMonomerConnectivity_O);
SMART_PTR_FIX(chem::_sym_PdbMonomerDatabase_O);
SMART_PTR_FIX(chem::_sym_StereoisomerAtom_O);
SMART_PTR_FIX(chem::_sym_StereoisomerVirtualAtom_O);
SMART_PTR_FIX(chem::_sym_StereoisomerAtoms_O);
SMART_PTR_FIX(chem::_sym_ConstitutionBond_O);
SMART_PTR_FIX(chem::_sym_ConstitutionAtom_O);
SMART_PTR_FIX(chem::_sym_ConstitutionVirtualAtom_O);
SMART_PTR_FIX(chem::_sym_ConstitutionAtoms_O);
SMART_PTR_FIX(chem::_sym_TrajectoryFrame_O);
SMART_PTR_FIX(chem::_sym_Trajectory_O);
SMART_PTR_FIX(chem::_sym_CipPrioritizer_O);
SMART_PTR_FIX(chem::_sym_AtomTable_O);
SMART_PTR_FIX(chem::_sym_EnergyComponent_O);
SMART_PTR_FIX(chem::_sym_EnergyStretch_O);
SMART_PTR_FIX(chem::_sym_EnergyAngle_O);
SMART_PTR_FIX(chem::_sym_EnergyDihedral_O);
SMART_PTR_FIX(chem::_sym_EnergyNonbond_O);
SMART_PTR_FIX(chem::_sym_EnergyImproperRestraint_O);
SMART_PTR_FIX(chem::_sym_EnergyChiralRestraint_O);
SMART_PTR_FIX(chem::_sym_EnergyAnchorRestraint_O);
SMART_PTR_FIX(chem::_sym_EnergyFixedNonbondRestraint_O);
SMART_PTR_FIX(chem::_sym_nonbondTerm);
SMART_PTR_FIX(chem::_sym_restraintAnchor);
SMART_PTR_FIX(chem::_sym_InteractionError);
SMART_PTR_FIX(chem::_sym_LinearAngleError);
SMART_PTR_FIX(chem::_sym_LinearDihedralError);
SMART_PTR_FIX(chem::_sym_LinearImproperRestraintError);
SMART_PTR_FIX(chem::_sym_OverlappingNonbondError);
SMART_PTR_FIX(chem::_sym_ComplexRestraint_O);
SMART_PTR_FIX(chem::_sym_RestrainedExoCyclicAtom_O);
SMART_PTR_FIX(chem::_sym_RestrainedPiBond_O);
SMART_PTR_FIX(chem::_sym_SearchStatistics_O);
SMART_PTR_FIX(chem::_sym_Constitution_O);
SMART_PTR_FIX(chem::_sym_CalculatePosition_O);
SMART_PTR_FIX(chem::_sym_CalculatePositionUsingInternals_O);
SMART_PTR_FIX(chem::_sym_CalculatePositionAlongBond_O);
SMART_PTR_FIX(chem::_sym_CalculatePositionRelativeToOrigin_O);
SMART_PTR_FIX(chem::_sym_Oligomer_O);
SMART_PTR_FIX(chem::_sym_OligomerPart_Base_O);
SMART_PTR_FIX(chem::_sym_OligomerPart_Monomer_O);
SMART_PTR_FIX(chem::_sym_OligomerPart_Link_O);
SMART_PTR_FIX(chem::_sym_Entity_O);
SMART_PTR_FIX(chem::_sym_Monomer_O);
SMART_PTR_FIX(chem::_sym_OneMonomer_O);
SMART_PTR_FIX(chem::_sym_MultiMonomer_O);
SMART_PTR_FIX(chem::_sym_CandoDatabase_O);
SMART_PTR_FIX(chem::_sym_Topology_O);
SMART_PTR_FIX(chem::_sym_StatusTracker_O);
SMART_PTR_FIX(chem::_sym_EntityNameSetBase_O);
SMART_PTR_FIX(chem::_sym_EntityNameSet_O);
SMART_PTR_FIX(chem::_sym_EntityNameSetWithCap_O);
SMART_PTR_FIX(chem::_sym_MonomerContext_O);
SMART_PTR_FIX(chem::_sym_Coupling_O);
SMART_PTR_FIX(chem::_sym_DirectionalCoupling_O);
SMART_PTR_FIX(chem::_sym_RingCoupling_O);
SMART_PTR_FIX(chem::_sym_Mate_O);
SMART_PTR_FIX(chem::_sym_RingClosingMate_O);
SMART_PTR_FIX(chem::_sym_Plug_O);
SMART_PTR_FIX(chem::_sym_PlugWithMates_O);
SMART_PTR_FIX(chem::_sym_OutPlug_O);
SMART_PTR_FIX(chem::_sym_InPlug_O);
SMART_PTR_FIX(chem::_sym_JumpPlug_O);
SMART_PTR_FIX(chem::_sym_RingClosingPlug_O);
SMART_PTR_FIX(chem::_sym_SpecificContext_O);
SMART_PTR_FIX(chem::_sym_SpecificContextSet_O);
SMART_PTR_FIX(chem::_sym_SpanningLoop_O);
SMART_PTR_FIX(chem::_sym_SuperposeEngine_O);
SMART_PTR_FIX(chem::_sym_SuperposeSelectedAtoms_O);
SMART_PTR_FIX(chem::_sym_superpose);
SMART_PTR_FIX(chem::_sym_VirtualSphere_O);
SMART_PTR_FIX(chem::_sym_idle);
SMART_PTR_FIX(chem::_sym_translate);
SMART_PTR_FIX(chem::_sym_rotate);
SMART_PTR_FIX(chem::_sym_scale);
SMART_PTR_FIX(chem::_sym_OneTypeRule_O);
SMART_PTR_FIX(chem::_sym_TypeAssignmentRules_O);
SMART_PTR_FIX(chem::_sym_STARsybyl_type_assignment_rulesSTAR);
SMART_PTR_FIX(chem::_sym_FFParameter_O);
SMART_PTR_FIX(chem::_sym_FFBaseDb_O);
SMART_PTR_FIX(chem::_sym_ChemInfoMatch_O);
SMART_PTR_FIX(chem::_sym_WildElementDict_O);
SMART_PTR_FIX(chem::_sym_ChemInfoNode_O);
SMART_PTR_FIX(chem::_sym_ResidueList_O);
SMART_PTR_FIX(chem::_sym_RootMatchNode_O);
SMART_PTR_FIX(chem::_sym_BondMatchNode_O);
SMART_PTR_FIX(chem::_sym_AtomOrBondMatchNode_O);
SMART_PTR_FIX(chem::_sym_BondListMatchNode_O);
SMART_PTR_FIX(chem::_sym_Logical_O);
SMART_PTR_FIX(chem::_sym_TagSet_O);
SMART_PTR_FIX(chem::_sym_RingTest_O);
SMART_PTR_FIX(chem::_sym_ResidueTest_O);
SMART_PTR_FIX(chem::_sym_BondTest_O);
SMART_PTR_FIX(chem::_sym_AntechamberBondTest_O);
SMART_PTR_FIX(chem::_sym_AtomTest_O);
SMART_PTR_FIX(chem::_sym_AntechamberFocusAtomMatch_O);
SMART_PTR_FIX(chem::_sym_Chain_O);
SMART_PTR_FIX(chem::_sym_Branch_O);
SMART_PTR_FIX(chem::_sym_AfterMatchBondTest_O);
SMART_PTR_FIX(chem::_sym_Root_O);
SMART_PTR_FIX(chem::_sym_SmartsRoot_O);
SMART_PTR_FIX(chem::_sym_AntechamberRoot_O);
SMART_PTR_FIX(chem::_sym_ChemInfo_O);
SMART_PTR_FIX(chem::_sym_FFTypesDb_O);
SMART_PTR_FIX(chem::_sym_FFStretch_O);
SMART_PTR_FIX(chem::_sym_FFStretchDb_O);
SMART_PTR_FIX(chem::_sym_FFAngle_O);
SMART_PTR_FIX(chem::_sym_FFAngleDb_O);
SMART_PTR_FIX(chem::_sym_FFItor_O);
SMART_PTR_FIX(chem::_sym_FFItorDb_O);
SMART_PTR_FIX(chem::_sym_FFPtor_O);
SMART_PTR_FIX(chem::_sym_FFPtorDb_O);
SMART_PTR_FIX(chem::_sym_FFNonbondCrossTermTable_O);
SMART_PTR_FIX(chem::_sym_FFNonbond_O);
SMART_PTR_FIX(chem::_sym_FFNonbondDb_O);
SMART_PTR_FIX(chem::_sym_FFVdw_O);
SMART_PTR_FIX(chem::_sym_FFVdwDb_O);
SMART_PTR_FIX(chem::_sym_InfoDb_O);
SMART_PTR_FIX(chem::_sym_ForceField_O);
SMART_PTR_FIX(chem::_sym_EnergyFunction_O);
SMART_PTR_FIX(chem::_sym_AbstractLargeSquareMatrix_O);
SMART_PTR_FIX(chem::_sym_FullLargeSquareMatrix_O);
SMART_PTR_FIX(chem::_sym_SparseLargeSquareMatrix_O);
SMART_PTR_FIX(chem::_sym_NumericalFunction_O);
SMART_PTR_FIX(chem::_sym_NVector_O);
SMART_PTR_FIX(chem::_sym_ReportBase_O);
SMART_PTR_FIX(chem::_sym_MessageReport_O);
SMART_PTR_FIX(chem::_sym_ForceMatchReport_O);
SMART_PTR_FIX(chem::_sym_StepReport_O);
SMART_PTR_FIX(chem::_sym_MinimizerLog_O);
SMART_PTR_FIX(chem::_sym_Minimizer_O);
SMART_PTR_FIX(chem::_sym_IterateMatter_O);
SMART_PTR_FIX(chem::_sym_IterateAtoms_O);
SMART_PTR_FIX(chem::_sym_IterateResidues_O);
SMART_PTR_FIX(chem::_sym_IterateBonds_O);
SMART_PTR_FIX(chem::_sym_IterateRestraints_O);
SMART_PTR_FIX(chem::_sym_Restraint_O);
SMART_PTR_FIX(chem::_sym_RestraintAnchor_O);
SMART_PTR_FIX(chem::_sym_RestraintChiral_O);
SMART_PTR_FIX(chem::_sym_RestraintDistance_O);
SMART_PTR_FIX(chem::_sym_RestraintAngle_O);
SMART_PTR_FIX(chem::_sym_RestraintDihedral_O);
SMART_PTR_FIX(chem::_sym_RestraintFixedNonbond_O);
SMART_PTR_FIX(chem::_sym_RestraintList_O);
SMART_PTR_FIX(chem::_sym_PdbReader_O);
SMART_PTR_FIX(chem::_sym_PdbWriter_O);
SMART_PTR_FIX(chem::_sym_PathMessage_O);
SMART_PTR_FIX(chem::_sym_AGVertex_O);
SMART_PTR_FIX(chem::_sym_AGEdge_O);
SMART_PTR_FIX(chem::_sym_RingFinder_O);
SMART_PTR_FIX(chem::_sym_Matter_O);
SMART_PTR_FIX(chem::_sym_Atom_O);
SMART_PTR_FIX(chem::_sym_Residue_O);
SMART_PTR_FIX(chem::_sym_Molecule_O);
SMART_PTR_FIX(chem::_sym_Aggregate_O);
SMART_PTR_FIX(chem::_sym_VirtualAtom_O);
SMART_PTR_FIX(chem::_sym_Bond_O);
SMART_PTR_FIX(chem::_sym_BondList_O);
SMART_PTR_FIX(adapt::_sym_SymbolList_O);
SMART_PTR_FIX(adapt::_sym_StringList_O);
SMART_PTR_FIX(adapt::_sym_IterateCons_O);
SMART_PTR_FIX(adapt::_sym_StringSet_O);
SMART_PTR_FIX(adapt::_sym_IndexedObjectBag_O);
SMART_PTR_FIX(adapt::_sym_QDomNode_O);
SMART_PTR_FIX(adapt::_sym_SymbolSet_O);
SMART_PTR_FIX(adapt::_sym_ObjectSet_O);
SMART_PTR_FIX(core::_sym_STARwatchDynamicBindingStackSTAR);
SMART_PTR_FIX(core::_sym_symbolMacro);
SMART_PTR_FIX(core::_sym_whole);
SMART_PTR_FIX(core::_sym_env);
SMART_PTR_FIX(core::_sym_processDeclarations);
SMART_PTR_FIX(core::_sym_evaluateVerbosity);
SMART_PTR_FIX(core::_sym_evaluateDepth);
SMART_PTR_FIX(core::_sym_classifyLetVariablesAndDeclares);
SMART_PTR_FIX(core::_sym_STAReval_with_env_hookSTAR);
SMART_PTR_FIX(core::_sym_eval_with_env_default);
SMART_PTR_FIX(core::_sym_dlopen);
SMART_PTR_FIX(core::_sym_dlsym);
SMART_PTR_FIX(core::_sym_dladdr);
SMART_PTR_FIX(core::_sym_callWithVariableBound);
SMART_PTR_FIX(core::_sym_instanceClassSet);
SMART_PTR_FIX(core::_sym_intrusiveReferenceCountedPointer);
SMART_PTR_FIX(core::_sym_sharedReferenceCountedPointer);
SMART_PTR_FIX(core::_sym_mpsGarbageCollection);
SMART_PTR_FIX(core::_sym_makeInvocationHistoryFrameIterator);
SMART_PTR_FIX(core::_sym_STARbacktraceFrameSelectorHookSTAR);
SMART_PTR_FIX(core::_sym_smartPointerDetails);
SMART_PTR_FIX(core::_sym_STARfset);
SMART_PTR_FIX(core::_sym_unbound);
SMART_PTR_FIX(core::_sym_mapappend);
SMART_PTR_FIX(core::_sym_macroexpand_default);
SMART_PTR_FIX(core::_sym_sequence_start_end);
SMART_PTR_FIX(core::_sym_type_to_symbol);
SMART_PTR_FIX(core::_sym_gdb);
SMART_PTR_FIX(core::_sym_gdbInspect);
SMART_PTR_FIX(core::_sym_separatePairList);
SMART_PTR_FIX(core::_sym_testMemoryError);
SMART_PTR_FIX(core::_sym_functionBlockName);
SMART_PTR_FIX(core::_sym_validFunctionNameP);
SMART_PTR_FIX(core::_sym_pointer);
SMART_PTR_FIX(core::_sym_toTaggedFixnum);
SMART_PTR_FIX(core::_sym_fromTaggedFixnum);
SMART_PTR_FIX(core::_sym_dumpTaggedFixnum);
SMART_PTR_FIX(core::_sym_ihsBacktrace);
SMART_PTR_FIX(core::_sym_ihsTop);
SMART_PTR_FIX(core::_sym_ihsPrev);
SMART_PTR_FIX(core::_sym_ihsNext);
SMART_PTR_FIX(core::_sym_ihsFun);
SMART_PTR_FIX(core::_sym_ihsEnv);
SMART_PTR_FIX(core::_sym_bdsTop);
SMART_PTR_FIX(core::_sym_bdsVar);
SMART_PTR_FIX(core::_sym_bdsVal);
SMART_PTR_FIX(core::_sym_theClibBacktraceFunctionSymbol);
SMART_PTR_FIX(core::_sym_printCurrentIhsFrameEnvironment);
SMART_PTR_FIX(core::_sym_rehash_size);
SMART_PTR_FIX(core::_sym_rehash_threshold);
SMART_PTR_FIX(core::_sym_data);
SMART_PTR_FIX(core::_sym_hash_eql);
SMART_PTR_FIX(core::_sym_hash_equal);
SMART_PTR_FIX(core::_sym_hash_equalp);
SMART_PTR_FIX(core::_sym_fixnum_number_of_bits);
SMART_PTR_FIX(core::_sym_nan);
SMART_PTR_FIX(core::_sym_log1p);
SMART_PTR_FIX(core::_sym_integer_divide);
SMART_PTR_FIX(core::_sym_integerToString);
SMART_PTR_FIX(core::_sym_printUnreadableObjectFunction);
SMART_PTR_FIX(core::_sym_walkToFindSourceInfo);
SMART_PTR_FIX(core::_sym_lookupSourceFileInfo);
SMART_PTR_FIX(core::_sym_STARmonitorRegisterSourceInfoSTAR);
SMART_PTR_FIX(core::_sym_currentDir);
SMART_PTR_FIX(core::_sym_file_kind);
SMART_PTR_FIX(core::_sym_environmentActivationFrame);
SMART_PTR_FIX(core::_sym_currentVisibleEnvironment);
SMART_PTR_FIX(core::_sym_runtimeEnvironment);
SMART_PTR_FIX(core::_sym_environmentList);
SMART_PTR_FIX(core::_sym_environmentTypeList);
SMART_PTR_FIX(core::_sym_environmentId);
SMART_PTR_FIX(core::_sym_singleDispatchWrongNumberArgumentsError);
SMART_PTR_FIX(core::_sym_singleDispatchTooManyArgumentsError);
SMART_PTR_FIX(core::_sym_singleDispatchBadLambdaListError);
SMART_PTR_FIX(core::_sym_singleDispatchMissingDispatchArgumentError);
SMART_PTR_FIX(core::_sym_tooFewArguments);
SMART_PTR_FIX(core::_sym_process_macro_lambda_list);
SMART_PTR_FIX(core::_sym_process_single_dispatch_lambda_list);
SMART_PTR_FIX(core::_sym_makeLambdaListHandler);
SMART_PTR_FIX(core::_sym_processLambdaList);
SMART_PTR_FIX(core::_sym_dispatchTable);
SMART_PTR_FIX(core::_sym_fileColumn);
SMART_PTR_FIX(core::_sym_makeStringOutputStreamFromString);
SMART_PTR_FIX(core::_sym_do_write_sequence);
SMART_PTR_FIX(core::_sym_streamLinenumber);
SMART_PTR_FIX(core::_sym_streamColumn);
SMART_PTR_FIX(core::_sym_single_dispatch_method);
SMART_PTR_FIX(core::_sym_setf_documentation);
SMART_PTR_FIX(core::_sym_STARcxxDocumentationSTAR);
SMART_PTR_FIX(core::_sym_topLevel);
SMART_PTR_FIX(core::_sym_scharSet);
SMART_PTR_FIX(core::_sym_STARuseInterpreterForEvalSTAR);
SMART_PTR_FIX(core::_sym_STARnotify_on_compileSTAR);
SMART_PTR_FIX(core::_sym_STARtrace_startupSTAR);
SMART_PTR_FIX(core::_sym_STARdebugInterpretedClosureSTAR);
SMART_PTR_FIX(core::_sym_STARdebugFlowControlSTAR);
SMART_PTR_FIX(core::_sym_STARdebugStartupSTAR);
SMART_PTR_FIX(core::_sym__BANG_unbound_BANG_);
SMART_PTR_FIX(core::_sym_bitArrayOp);
SMART_PTR_FIX(core::_sym_lambdaName);
SMART_PTR_FIX(core::_sym_printf);
SMART_PTR_FIX(core::_sym_asin);
SMART_PTR_FIX(core::_sym_asinh);
SMART_PTR_FIX(core::_sym_acos);
SMART_PTR_FIX(core::_sym_acosh);
SMART_PTR_FIX(core::_sym_atanh);
SMART_PTR_FIX(core::_sym_STARpollTicksPerGcSTAR);
SMART_PTR_FIX(core::_sym__PLUS_standardReadtable_PLUS_);
SMART_PTR_FIX(core::_sym_closedStream);
SMART_PTR_FIX(core::_sym__PLUS_numberOfFixedArguments_PLUS_);
SMART_PTR_FIX(core::_sym_STARinterpreterTraceSTAR);
SMART_PTR_FIX(core::_sym_STARdebugLoadTimeValuesSTAR);
SMART_PTR_FIX(core::_sym_STARdebugEvalSTAR);
SMART_PTR_FIX(core::_sym_STARdebugInterpretedFunctionsSTAR);
SMART_PTR_FIX(core::_sym_STARdebugMonitorSTAR);
SMART_PTR_FIX(core::_sym_monitorReader);
SMART_PTR_FIX(core::_sym_tsp);
SMART_PTR_FIX(core::_sym_tmv);
SMART_PTR_FIX(core::_sym_invocationHistoryFrame);
SMART_PTR_FIX(core::_sym_size_t);
SMART_PTR_FIX(core::_sym_threadInfo);
SMART_PTR_FIX(core::_sym_circle_subst);
SMART_PTR_FIX(core::_sym_STARsourceDatabaseSTAR);
SMART_PTR_FIX(core::_sym_STARstartRunTimeSTAR);
SMART_PTR_FIX(core::_sym_STARcommandLineLoadSTAR);
SMART_PTR_FIX(core::_sym_STARihsCurrentSTAR);
SMART_PTR_FIX(core::_sym_STARllvmFunctionNameHookSTAR);
SMART_PTR_FIX(core::_sym_STARtopLevelCommandHookSTAR);
SMART_PTR_FIX(core::_sym_STARloadSearchListSTAR);
SMART_PTR_FIX(core::_sym_loadBitcode);
SMART_PTR_FIX(core::_sym_loadSource);
SMART_PTR_FIX(core::_sym_loadBundle);
SMART_PTR_FIX(core::_sym_STARallCxxClassesSTAR);
SMART_PTR_FIX(core::_sym_simpleProgramError);
SMART_PTR_FIX(core::_sym_STARdebugReaderSTAR);
SMART_PTR_FIX(core::_sym_STARenablePrintPrettySTAR);
SMART_PTR_FIX(core::_sym_STARcircle_counterSTAR);
SMART_PTR_FIX(core::_sym_STARcircle_stackSTAR);
SMART_PTR_FIX(core::_sym_dynamicGo);
SMART_PTR_FIX(core::_sym_localGo);
SMART_PTR_FIX(core::_sym__PLUS_ecl_syntax_progv_list_PLUS_);
SMART_PTR_FIX(core::_sym__PLUS_io_syntax_progv_list_PLUS_);
SMART_PTR_FIX(core::_sym_STARprintPackageSTAR);
SMART_PTR_FIX(core::_sym_STARsharpEqContextSTAR);
SMART_PTR_FIX(core::_sym_STARcircleCounterSTAR);
SMART_PTR_FIX(core::_sym_STARnestedErrorDepthSTAR);
SMART_PTR_FIX(core::_sym_setThrowPosition);
SMART_PTR_FIX(core::_sym_tooFewArgumentsError);
SMART_PTR_FIX(core::_sym_tooManyArgumentsError);
SMART_PTR_FIX(core::_sym_unrecognizedKeywordArgumentError);
SMART_PTR_FIX(core::_sym_invalidKeywordArgumentError);
SMART_PTR_FIX(core::_sym__PLUS_llvmTargetTriple_PLUS_);
SMART_PTR_FIX(core::_sym__PLUS_executableName_PLUS_);
SMART_PTR_FIX(core::_sym_STARcodeWalkerSTAR);
SMART_PTR_FIX(core::_sym_STARcurrentSourceFileInfoSTAR);
SMART_PTR_FIX(core::_sym_STARcurrentSourcePosInfoSTAR);
SMART_PTR_FIX(core::_sym_STARdebugMacroexpandSTAR);
SMART_PTR_FIX(core::_sym_STARenvironmentPrintingTabSTAR);
SMART_PTR_FIX(core::_sym_STARenvironmentPrintingTabIncrementSTAR);
SMART_PTR_FIX(core::_sym__PLUS_activationFrameNil_PLUS_);
SMART_PTR_FIX(core::_sym_parse_macro);
SMART_PTR_FIX(core::_sym_globalFunction);
SMART_PTR_FIX(core::_sym_globalSetfFunction);
SMART_PTR_FIX(core::_sym_lexicalFunction);
SMART_PTR_FIX(core::_sym_declaredSpecial);
SMART_PTR_FIX(core::_sym_lexical);
SMART_PTR_FIX(core::_sym_STARsystem_defsetf_update_functionsSTAR);
SMART_PTR_FIX(core::_sym_STARbackquote_expand_hookSTAR);
SMART_PTR_FIX(core::_sym_single_dispatch_on);
SMART_PTR_FIX(core::_sym_STARdocumentation_poolSTAR);
SMART_PTR_FIX(core::_sym_STARexecutable_nameSTAR);
SMART_PTR_FIX(core::_sym_generic);
SMART_PTR_FIX(core::_sym_DOT);
SMART_PTR_FIX(core::_sym_AMPva_rest);
SMART_PTR_FIX(core::_sym_anonymous);
SMART_PTR_FIX(core::_sym_macro);
SMART_PTR_FIX(core::_sym_STARdocumentation_databaseSTAR);
SMART_PTR_FIX(core::_sym___init__);
SMART_PTR_FIX(core::_sym_input_stream_designator);
SMART_PTR_FIX(core::_sym_STARprint_source_code_consSTAR);
SMART_PTR_FIX(core::_sym_STARechoReplReadSTAR);
SMART_PTR_FIX(core::_sym_eof_error_p);
SMART_PTR_FIX(core::_sym_eof_value);
SMART_PTR_FIX(core::_sym_start);
SMART_PTR_FIX(core::_sym_end);
SMART_PTR_FIX(core::_sym_preserve_whitespace);
SMART_PTR_FIX(core::_sym_io);
SMART_PTR_FIX(core::_sym_probe);
SMART_PTR_FIX(core::_sym_newVersion);
SMART_PTR_FIX(core::_sym_renameAndDelete);
SMART_PTR_FIX(core::_sym_overwrite);
SMART_PTR_FIX(core::_sym_supersede);
SMART_PTR_FIX(core::_sym_create);
SMART_PTR_FIX(core::_sym_input_stream);
SMART_PTR_FIX(core::_sym_recursive_p);
SMART_PTR_FIX(core::_sym_dimensions);
SMART_PTR_FIX(core::_sym_element_type);
SMART_PTR_FIX(core::_sym_initial_element);
SMART_PTR_FIX(core::_sym_adjustable);
SMART_PTR_FIX(core::_sym_object);
SMART_PTR_FIX(core::_sym_okey);
SMART_PTR_FIX(core::_sym_default);
SMART_PTR_FIX(core::_sym_dot);
SMART_PTR_FIX(core::_sym_ifDoesNotExist);
SMART_PTR_FIX(core::_sym_symbolMacroletLambda);
SMART_PTR_FIX(core::_sym_lambda_with_handler);
SMART_PTR_FIX(core::_sym_color);
SMART_PTR_FIX(core::_sym_foreach);
SMART_PTR_FIX(core::_sym_STARPATHSTAR);
SMART_PTR_FIX(core::_sym_STARargsSTAR);
SMART_PTR_FIX(core::_sym_STARcurrent_working_directorySTAR);
SMART_PTR_FIX(core::_sym_backquote);
SMART_PTR_FIX(core::_sym_double_backquote);
SMART_PTR_FIX(core::_sym_unquote);
SMART_PTR_FIX(core::_sym_unquote_splice);
SMART_PTR_FIX(core::_sym_unquote_nsplice);
SMART_PTR_FIX(core::_sym_slot);
SMART_PTR_FIX(core::_sym_item);
SMART_PTR_FIX(core::_sym_alist);
SMART_PTR_FIX(core::_sym_key);
SMART_PTR_FIX(core::_sym_test_not);
SMART_PTR_FIX(core::_sym_forward_referenced_class);
SMART_PTR_FIX(core::_sym_instance);
SMART_PTR_FIX(core::_sym_all_keys);
SMART_PTR_FIX(core::_sym_cl_fixnum_bits);
SMART_PTR_FIX(core::_sym_cArgumentsLimit);
SMART_PTR_FIX(core::_sym_STARcommandLineArgumentsSTAR);
SMART_PTR_FIX(core::_sym_STARprintVersionOnStartupSTAR);
SMART_PTR_FIX(core::_sym_STARsilentStartupSTAR);
SMART_PTR_FIX(core::_sym_STARcommandLineLoadEvalSequenceSTAR);
SMART_PTR_FIX(core::_sym_STARcommandLineImageSTAR);
SMART_PTR_FIX(core::_sym_STARclassNameHashTableSTAR);
SMART_PTR_FIX(core::_sym_selectPackage);
SMART_PTR_FIX(core::_sym_find_single_dispatch_generic_function);
SMART_PTR_FIX(core::_sym_setf_find_single_dispatch_generic_function);
SMART_PTR_FIX(core::_sym_forget_all_single_dispatch_generic_functions);
SMART_PTR_FIX(core::_sym_stackMonitor);
SMART_PTR_FIX(core::_sym_setupStackMonitor);
SMART_PTR_FIX(core::_sym_invokeInternalDebugger);
SMART_PTR_FIX(core::_sym_invokeInternalDebuggerFromGdb);
SMART_PTR_FIX(core::_sym_universalErrorHandler);
SMART_PTR_FIX(core::_sym_stackUsed);
SMART_PTR_FIX(core::_sym_exit);
SMART_PTR_FIX(core::_sym_quit);
SMART_PTR_FIX(core::_sym_getline);
SMART_PTR_FIX(core::_sym_isTopLevelScript);
SMART_PTR_FIX(core::_sym_sourceFileName);
SMART_PTR_FIX(core::_sym_sourceLineColumn);
SMART_PTR_FIX(core::_sym_findFileInLispPath);
SMART_PTR_FIX(core::_sym_setf_findClass);
SMART_PTR_FIX(core::_sym_isAssignableTo);
SMART_PTR_FIX(core::_sym_isSubClassOf);
SMART_PTR_FIX(core::_sym_repr);
SMART_PTR_FIX(core::_sym_debugLogOn);
SMART_PTR_FIX(core::_sym_debugLogOff);
SMART_PTR_FIX(core::_sym_mpi_enabled);
SMART_PTR_FIX(core::_sym_mpi_rank);
SMART_PTR_FIX(core::_sym_mpi_size);
SMART_PTR_FIX(core::_sym_sorted);
SMART_PTR_FIX(core::_sym_database_dir);
SMART_PTR_FIX(core::_sym_script_dir);
SMART_PTR_FIX(core::_sym_libraryPath);
SMART_PTR_FIX(core::_sym_lispCodePath);
SMART_PTR_FIX(core::_sym_setCurrentWorkingDirectory);
SMART_PTR_FIX(core::_sym_member1);
SMART_PTR_FIX(core::_sym_exportToPython);
SMART_PTR_FIX(core::_sym_slBoundp);
SMART_PTR_FIX(core::_sym_isNil);
SMART_PTR_FIX(core::_sym_instanceRef);
SMART_PTR_FIX(core::_sym_instanceSet);
SMART_PTR_FIX(core::_sym_instancep);
SMART_PTR_FIX(core::_sym_instanceSigSet);
SMART_PTR_FIX(core::_sym_instanceSig);
SMART_PTR_FIX(core::_sym_instanceClass);
SMART_PTR_FIX(core::_sym_implementationClass);
SMART_PTR_FIX(core::_sym_classNameAsString);
SMART_PTR_FIX(core::_sym_clock_gettime_nanoseconds);
SMART_PTR_FIX(core::_sym_testProfileTimer);
SMART_PTR_FIX(core::_sym_structure_print_function);
SMART_PTR_FIX(core::_sym_STARprint_structureSTAR);
SMART_PTR_FIX(core::_sym_makeRegex);
SMART_PTR_FIX(core::_sym_serialize);
SMART_PTR_FIX(core::_sym_STARserializerArchiveSTAR);
SMART_PTR_FIX(core::_sym_STARsharp_equal_alistSTAR);
SMART_PTR_FIX(core::_sym_STARsharp_sharp_alistSTAR);
SMART_PTR_FIX(core::_sym_STARconsing_dot_allowedSTAR);
SMART_PTR_FIX(core::_sym_STARconsing_dotSTAR);
SMART_PTR_FIX(core::_sym_STARpreserve_whitespace_pSTAR);
SMART_PTR_FIX(core::_sym_STARinput_streamSTAR);
SMART_PTR_FIX(core::_sym_STARbackquote_levelSTAR);
SMART_PTR_FIX(core::_sym_STARstandard_readtableSTAR);
SMART_PTR_FIX(core::_sym_read_list_allow_consing_dot);
SMART_PTR_FIX(core::_sym_reader_read_double_quote_string);
SMART_PTR_FIX(core::_sym_reader_backquoted_expression);
SMART_PTR_FIX(core::_sym_sharp_backslash);
SMART_PTR_FIX(core::_sym_sharp_single_quote);
SMART_PTR_FIX(core::_sym_sharp_left_parenthesis);
SMART_PTR_FIX(core::_sym_sharp_asterisk);
SMART_PTR_FIX(core::_sym_sharp_colon);
SMART_PTR_FIX(core::_sym_sharp_dot);
SMART_PTR_FIX(core::_sym_sharp_b);
SMART_PTR_FIX(core::_sym_sharp_o);
SMART_PTR_FIX(core::_sym_sharp_x);
SMART_PTR_FIX(core::_sym_sharp_r);
SMART_PTR_FIX(core::_sym_sharp_c);
SMART_PTR_FIX(core::_sym_sharp_a);
SMART_PTR_FIX(core::_sym_sharp_s);
SMART_PTR_FIX(core::_sym_sharp_p);
SMART_PTR_FIX(core::_sym_sharp_plus);
SMART_PTR_FIX(core::_sym_sharp_minus);
SMART_PTR_FIX(core::_sym_sharp_vertical_bar);
SMART_PTR_FIX(core::_sym_dispatch_macro_character);
SMART_PTR_FIX(core::_sym_reader_double_quote_string);
SMART_PTR_FIX(core::_sym_reader_comma_form);
SMART_PTR_FIX(core::_sym_reader_list_allow_consing_dot);
SMART_PTR_FIX(core::_sym_reader_error_unmatched_close_parenthesis);
SMART_PTR_FIX(core::_sym_reader_quote);
SMART_PTR_FIX(core::_sym_reader_skip_semicolon_comment);
SMART_PTR_FIX(core::_sym_reader_feature_p);
SMART_PTR_FIX(core::_sym_float_to_digits);
SMART_PTR_FIX(core::_sym_defaultPathnameDefaults);
SMART_PTR_FIX(core::_sym_coerceToFilename);
SMART_PTR_FIX(core::_sym_coerceToFilePathname);
SMART_PTR_FIX(core::_sym_pathnameTranslations);
SMART_PTR_FIX(core::_sym_coerceToPhysicalPathname);
SMART_PTR_FIX(core::_sym_argument_number_error);
SMART_PTR_FIX(core::_sym_signalSimpleError);
SMART_PTR_FIX(core::_sym_wrongTypeNthArg);
SMART_PTR_FIX(core::_sym_wrongIndex);
SMART_PTR_FIX(core::_sym_subclassp);
SMART_PTR_FIX(core::_sym_allocateRawClass);
SMART_PTR_FIX(core::_sym_inheritDefaultAllocator);
SMART_PTR_FIX(core::_sym_isString);
SMART_PTR_FIX(core::_sym_isArray);
SMART_PTR_FIX(core::_sym_testVal);
SMART_PTR_FIX(core::_sym__SHARP__BANG_);
SMART_PTR_FIX(core::_sym_base_string_concatenate);
SMART_PTR_FIX(core::_sym_calculateMissingCommonLispSymbols);
SMART_PTR_FIX(core::_sym_copy_subarray);
SMART_PTR_FIX(core::_sym_aset);
SMART_PTR_FIX(core::_sym_rem_f);
SMART_PTR_FIX(core::_sym_put_f);
SMART_PTR_FIX(core::_sym_conditionMessage);
SMART_PTR_FIX(core::_sym_put_sysprop);
SMART_PTR_FIX(core::_sym_get_sysprop);
SMART_PTR_FIX(core::_sym_rem_sysprop);
SMART_PTR_FIX(core::_sym_bformat);
SMART_PTR_FIX(core::_sym_STARbq_listSTAR);
SMART_PTR_FIX(core::_sym_STARbq_appendSTAR);
SMART_PTR_FIX(core::_sym_STARbq_listSTARSTAR);
SMART_PTR_FIX(core::_sym_STARbq_nconcSTAR);
SMART_PTR_FIX(core::_sym_STARbq_clobberableSTAR);
SMART_PTR_FIX(core::_sym_STARbq_quoteSTAR);
SMART_PTR_FIX(core::_sym_STARbq_quote_nilSTAR);
SMART_PTR_FIX(core::_sym_bq_simplify);
SMART_PTR_FIX(core::_sym_bq_remove_tokens);
SMART_PTR_FIX(core::_sym_backquote_maptree);
SMART_PTR_FIX(core::_sym_backquote_simplify);
SMART_PTR_FIX(core::_sym_backquote_completely_process);
SMART_PTR_FIX(core::_sym_backquote_process);
SMART_PTR_FIX(core::_sym_backquote_bracket);
SMART_PTR_FIX(core::_sym_backquote_null_or_quoted);
SMART_PTR_FIX(core::_sym_backquote_attach_append);
SMART_PTR_FIX(core::_sym_backquote_attach_conses);
SMART_PTR_FIX(core::_sym_backquote_remove_tokens);
SMART_PTR_FIX(core::_sym_backquote_frob);
SMART_PTR_FIX(core::_sym_backquote_splicing_frob);
SMART_PTR_FIX(core::_sym_backquote_append);
SMART_PTR_FIX(core::_sym_quasiquote);
SMART_PTR_FIX(core::_sym_STARbq_simplifySTAR);
SMART_PTR_FIX(core::_sym_record_cons);
SMART_PTR_FIX(core::_sym_record_field);
SMART_PTR_FIX(core::_sym_set_record_field);
SMART_PTR_FIX(core::_sym_rem_record_field);
SMART_PTR_FIX(core::_sym_ensure_documentation);
SMART_PTR_FIX(core::_sym_STARsharp_equal_final_tableSTAR);
SMART_PTR_FIX(core::_sym_STARsharp_equal_temp_tableSTAR);
SMART_PTR_FIX(core::_sym_STARsharp_equal_repl_tableSTAR);
SMART_PTR_FIX(core::_sym_ensureSingleDispatchGenericFunction);
SMART_PTR_FIX(core::_sym_ensureSingleDispatchMethod);
SMART_PTR_FIX(core::_sym_structure_include);
SMART_PTR_FIX(core::_sym_structure_slot_descriptions);
SMART_PTR_FIX(core::_sym_structureRef);
SMART_PTR_FIX(core::_sym_structureSet);
SMART_PTR_FIX(core::_sym_makeStructure);
SMART_PTR_FIX(core::_sym_structurep);
SMART_PTR_FIX(core::_sym_structureSubtypep);
SMART_PTR_FIX(core::_sym_setfElt);
SMART_PTR_FIX(core::_sym_eltSet);
SMART_PTR_FIX(core::_sym_setfSubseq);
SMART_PTR_FIX(core::_sym_make_vector);
SMART_PTR_FIX(core::_sym_adjustVector);
SMART_PTR_FIX(core::_sym_loadTimeValuesIds);
SMART_PTR_FIX(core::_sym_loadTimeValueArray);
SMART_PTR_FIX(core::_sym_lookupLoadTimeValue);
SMART_PTR_FIX(core::_sym_lookupLoadTimeSymbol);
SMART_PTR_FIX(core::_sym_setRunTimeValuesVector);
SMART_PTR_FIX(core::_sym_ExternalObject_O);
SMART_PTR_FIX(core::_sym_ForeignData_O);
SMART_PTR_FIX(core::_sym_LambdaListHandler_O);
SMART_PTR_FIX(core::_sym_LightUserData_O);
SMART_PTR_FIX(core::_sym_UserData_O);
SMART_PTR_FIX(core::_sym_LoadTimeValues_O);
SMART_PTR_FIX(core::_sym_MultiStringBuffer_O);
SMART_PTR_FIX(core::_sym_PosixTime_O);
SMART_PTR_FIX(core::_sym_PosixTimeDuration_O);
SMART_PTR_FIX(core::_sym_RegexMatch_O);
SMART_PTR_FIX(core::_sym_Regex_O);
SMART_PTR_FIX(core::_sym_SingleDispatchMethod_O);
SMART_PTR_FIX(core::_sym_SmallMultimap_O);
SMART_PTR_FIX(core::_sym_WeakKeyMapping_O);
SMART_PTR_FIX(core::_sym_WeakPointer_O);
SMART_PTR_FIX(core::_sym_Instance_O);
SMART_PTR_FIX(core::_sym_WrappedPointer_O);
SMART_PTR_FIX(core::_sym_ArrayDisplaced_O);
SMART_PTR_FIX(core::_sym_ArrayObjects_O);
SMART_PTR_FIX(core::_sym_HashTableEqualp_O);
SMART_PTR_FIX(core::_sym_SingleDispatchEffectiveMethodFunction_O);
SMART_PTR_FIX(core::_sym_SingleDispatchGenericFunction_O);
SMART_PTR_FIX(core::_sym_SpecialForm_O);
SMART_PTR_FIX(core::_sym_SexpLoadArchive_O);
SMART_PTR_FIX(core::_sym_SexpSaveArchive_O);
SMART_PTR_FIX(core::_sym_VectorDisplaced_O);
SMART_PTR_FIX(core::_sym_CxxClass_O);
SMART_PTR_FIX(core::_sym_ForwardReferencedClass_O);
SMART_PTR_FIX(core::_sym_StrWithFillPtr_O);
SMART_PTR_FIX(core::_sym_InvocationHistoryFrameIterator_O);
SMART_PTR_FIX(core::_sym_Reader_O);
SMART_PTR_FIX(core::_sym_HashTableEqual_O);
SMART_PTR_FIX(core::_sym_Binder_O);
SMART_PTR_FIX(core::_sym_Path_O);
SMART_PTR_FIX(core::_sym_DirectoryIterator_O);
SMART_PTR_FIX(core::_sym_RecursiveDirectoryIterator_O);
SMART_PTR_FIX(core::_sym_DirectoryEntry_O);
SMART_PTR_FIX(core::_sym_FileStatus_O);
SMART_PTR_FIX(core::_sym_IntArray_O);
SMART_PTR_FIX(core::_sym_Iterator_O);
SMART_PTR_FIX(core::_sym_IOFileStream_O);
SMART_PTR_FIX(core::_sym_IOStreamStream_O);
SMART_PTR_FIX(core::_sym_StringOutputStream_O);
SMART_PTR_FIX(core::_sym_StringInputStream_O);
SMART_PTR_FIX(core::_sym_CandoException_O);
SMART_PTR_FIX(core::_sym_VaList_dummy_O);
SMART_PTR_FIX(core::_sym_Pointer_O);
SMART_PTR_FIX(core::_sym_Environment_O);
SMART_PTR_FIX(core::_sym_LexicalEnvironment_O);
SMART_PTR_FIX(core::_sym_RuntimeVisibleEnvironment_O);
SMART_PTR_FIX(core::_sym_ValueEnvironment_O);
SMART_PTR_FIX(core::_sym_FunctionValueEnvironment_O);
SMART_PTR_FIX(core::_sym_CompileTimeEnvironment_O);
SMART_PTR_FIX(core::_sym_UnwindProtectEnvironment_O);
SMART_PTR_FIX(core::_sym_BlockEnvironment_O);
SMART_PTR_FIX(core::_sym_CatchEnvironment_O);
SMART_PTR_FIX(core::_sym_FunctionContainerEnvironment_O);
SMART_PTR_FIX(core::_sym_TagbodyEnvironment_O);
SMART_PTR_FIX(core::_sym_MacroletEnvironment_O);
SMART_PTR_FIX(core::_sym_SymbolMacroletEnvironment_O);
SMART_PTR_FIX(core::_sym_StackValueEnvironment_O);
SMART_PTR_FIX(core::_sym_GlueEnvironment_O);
SMART_PTR_FIX(core::_sym_ActivationFrame_O);
SMART_PTR_FIX(core::_sym_ValueFrame_O);
SMART_PTR_FIX(core::_sym_FunctionFrame_O);
SMART_PTR_FIX(core::_sym_TagbodyFrame_O);
SMART_PTR_FIX(core::_sym_Metaobject_O);
SMART_PTR_FIX(core::_sym_Specializer_O);
SMART_PTR_FIX(core::_sym_WeakHashTable_O);
SMART_PTR_FIX(core::_sym_WeakKeyHashTable_O);
SMART_PTR_FIX(core::_sym_SourceFileInfo_O);
SMART_PTR_FIX(core::_sym_SourcePosInfo_O);
SMART_PTR_FIX(core::_sym_SourceManager_O);
SMART_PTR_FIX(core::_sym_CxxObject_O);
SMART_PTR_FIX(core::_sym_Record_O);
SMART_PTR_FIX(core::_sym_HashTableEql_O);
SMART_PTR_FIX(core::_sym_HashTableEq_O);
SMART_PTR_FIX(core::_sym_VectorObjects_O);
SMART_PTR_FIX(core::_sym_VectorObjectsWithFillPtr_O);
SMART_PTR_FIX(core::_sym_SymbolToEnumConverter_O);
SMART_PTR_FIX(core::_sym_SNode_O);
SMART_PTR_FIX(core::_sym_LeafSNode_O);
SMART_PTR_FIX(core::_sym_BranchSNode_O);
SMART_PTR_FIX(core::_sym_Archive_O);
SMART_PTR_FIX(core::_sym_LoadArchive_O);
SMART_PTR_FIX(core::_sym_SaveArchive_O);
SMART_PTR_FIX(core::_sym_SmallMap_O);
SMART_PTR_FIX(cl::_sym_case);
SMART_PTR_FIX(cl::_sym_otherwise);
SMART_PTR_FIX(cl::_sym_ignore);
SMART_PTR_FIX(cl::_sym_multipleValueSetq);
SMART_PTR_FIX(cl::_sym_prog1);
SMART_PTR_FIX(cl::_sym_block);
SMART_PTR_FIX(cl::_sym_throw);
SMART_PTR_FIX(cl::_sym_apply);
SMART_PTR_FIX(cl::_sym_funcall);
SMART_PTR_FIX(cl::_sym_compute_applicable_methods);
SMART_PTR_FIX(cl::_sym_no_applicable_method);
SMART_PTR_FIX(cl::_sym_standardGenericFunction);
SMART_PTR_FIX(cl::_sym_sleep);
SMART_PTR_FIX(cl::_sym_let);
SMART_PTR_FIX(cl::_sym_letSTAR);
SMART_PTR_FIX(cl::_sym_return_from);
SMART_PTR_FIX(cl::_sym_catch);
SMART_PTR_FIX(cl::_sym_load_time_value);
SMART_PTR_FIX(cl::_sym_setq);
SMART_PTR_FIX(cl::_sym_eval_when);
SMART_PTR_FIX(cl::_sym_locally);
SMART_PTR_FIX(cl::_sym_symbol_macrolet);
SMART_PTR_FIX(cl::_sym_flet);
SMART_PTR_FIX(cl::_sym_macrolet);
SMART_PTR_FIX(cl::_sym_tagbody);
SMART_PTR_FIX(cl::_sym_multiple_value_call);
SMART_PTR_FIX(cl::_sym_the);
SMART_PTR_FIX(cl::_sym_go);
SMART_PTR_FIX(cl::_sym_multiple_value_prog1);
SMART_PTR_FIX(cl::_sym_if);
SMART_PTR_FIX(cl::_sym_unwind_protect);
SMART_PTR_FIX(cl::_sym_labels);
SMART_PTR_FIX(cl::_sym_progv);
SMART_PTR_FIX(cl::_sym_setf);
SMART_PTR_FIX(cl::_sym_read);
SMART_PTR_FIX(cl::_sym_read_preserving_whitespace);
SMART_PTR_FIX(cl::_sym_read_delimited_list);
SMART_PTR_FIX(cl::_sym_every);
SMART_PTR_FIX(cl::_sym_some);
SMART_PTR_FIX(cl::_sym_notevery);
SMART_PTR_FIX(cl::_sym_notany);
SMART_PTR_FIX(cl::_sym_mapcar);
SMART_PTR_FIX(cl::_sym_mapc);
SMART_PTR_FIX(cl::_sym_maplist);
SMART_PTR_FIX(cl::_sym_mapl);
SMART_PTR_FIX(cl::_sym_mapcan);
SMART_PTR_FIX(cl::_sym_mapcon);
SMART_PTR_FIX(cl::_sym_classOf);
SMART_PTR_FIX(cl::_sym_identity);
SMART_PTR_FIX(cl::_sym_constantp);
SMART_PTR_FIX(cl::_sym_ash);
SMART_PTR_FIX(cl::_sym_specialOperatorP);
SMART_PTR_FIX(cl::_sym_macroFunction);
SMART_PTR_FIX(cl::_sym_gensym);
SMART_PTR_FIX(cl::_sym_type_of);
SMART_PTR_FIX(cl::_sym_fdefinition);
SMART_PTR_FIX(cl::_sym_fboundp);
SMART_PTR_FIX(cl::_sym_fmakunbound);
SMART_PTR_FIX(cl::_sym_values_list);
SMART_PTR_FIX(cl::_sym_make_hash_table);
SMART_PTR_FIX(cl::_sym_maphash);
SMART_PTR_FIX(cl::_sym_clrhash);
SMART_PTR_FIX(cl::_sym_remhash);
SMART_PTR_FIX(cl::_sym_max);
SMART_PTR_FIX(cl::_sym_min);
SMART_PTR_FIX(cl::_sym_zerop);
SMART_PTR_FIX(cl::_sym__LT_);
SMART_PTR_FIX(cl::_sym__GT_);
SMART_PTR_FIX(cl::_sym__LE_);
SMART_PTR_FIX(cl::_sym__GE_);
SMART_PTR_FIX(cl::_sym__EQ_);
SMART_PTR_FIX(cl::_sym__NE_);
SMART_PTR_FIX(cl::_sym__PLUS_);
SMART_PTR_FIX(cl::_sym__TIMES_);
SMART_PTR_FIX(cl::_sym__MINUS_);
SMART_PTR_FIX(cl::_sym_logand);
SMART_PTR_FIX(cl::_sym_logior);
SMART_PTR_FIX(cl::_sym_logandc1);
SMART_PTR_FIX(cl::_sym_logandc2);
SMART_PTR_FIX(cl::_sym_logeqv);
SMART_PTR_FIX(cl::_sym_lognand);
SMART_PTR_FIX(cl::_sym_lognor);
SMART_PTR_FIX(cl::_sym_lognot);
SMART_PTR_FIX(cl::_sym_logorc1);
SMART_PTR_FIX(cl::_sym_logorc2);
SMART_PTR_FIX(cl::_sym_logxor);
SMART_PTR_FIX(cl::_sym_sqrt);
SMART_PTR_FIX(cl::_sym_cos);
SMART_PTR_FIX(cl::_sym_tan);
SMART_PTR_FIX(cl::_sym_sinh);
SMART_PTR_FIX(cl::_sym_cosh);
SMART_PTR_FIX(cl::_sym_tanh);
SMART_PTR_FIX(cl::_sym_conjugate);
SMART_PTR_FIX(cl::_sym_log);
SMART_PTR_FIX(cl::_sym_expt);
SMART_PTR_FIX(cl::_sym_exp);
SMART_PTR_FIX(cl::_sym_getUniversalTime);
SMART_PTR_FIX(cl::_sym_leastPositiveSingleFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeSingleFloat);
SMART_PTR_FIX(cl::_sym_mostPositiveSingleFloat);
SMART_PTR_FIX(cl::_sym_mostNegativeSingleFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveShortFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeShortFloat);
SMART_PTR_FIX(cl::_sym_mostPositiveShortFloat);
SMART_PTR_FIX(cl::_sym_mostNegativeShortFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveDoubleFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeDoubleFloat);
SMART_PTR_FIX(cl::_sym_mostPositiveDoubleFloat);
SMART_PTR_FIX(cl::_sym_mostNegativeDoubleFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveLongFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeLongFloat);
SMART_PTR_FIX(cl::_sym_mostPositiveLongFloat);
SMART_PTR_FIX(cl::_sym_mostNegativeLongFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeNormalizedSingleFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeNormalizedShortFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeNormalizedDoubleFloat);
SMART_PTR_FIX(cl::_sym_leastNegativeNormalizedLongFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveNormalizedSingleFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveNormalizedShortFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveNormalizedDoubleFloat);
SMART_PTR_FIX(cl::_sym_leastPositiveNormalizedLongFloat);
SMART_PTR_FIX(cl::_sym_pi);
SMART_PTR_FIX(cl::_sym_gcd);
SMART_PTR_FIX(cl::_sym_lcm);
SMART_PTR_FIX(cl::_sym_numerator);
SMART_PTR_FIX(cl::_sym_denominator);
SMART_PTR_FIX(cl::_sym_floor);
SMART_PTR_FIX(cl::_sym_ceiling);
SMART_PTR_FIX(cl::_sym_truncate);
SMART_PTR_FIX(cl::_sym_round);
SMART_PTR_FIX(cl::_sym_mod);
SMART_PTR_FIX(cl::_sym_rem);
SMART_PTR_FIX(cl::_sym_decodeFloat);
SMART_PTR_FIX(cl::_sym_scaleFloat);
SMART_PTR_FIX(cl::_sym_floatSign);
SMART_PTR_FIX(cl::_sym_floatDigits);
SMART_PTR_FIX(cl::_sym_floatPrecision);
SMART_PTR_FIX(cl::_sym_integer_decode_float);
SMART_PTR_FIX(cl::_sym_complex);
SMART_PTR_FIX(cl::_sym_realpart);
SMART_PTR_FIX(cl::_sym_imagpart);
SMART_PTR_FIX(cl::_sym_print);
SMART_PTR_FIX(cl::_sym_prin1);
SMART_PTR_FIX(cl::_sym_princ);
SMART_PTR_FIX(cl::_sym_truename);
SMART_PTR_FIX(cl::_sym_probe_file);
SMART_PTR_FIX(cl::_sym_deleteFile);
SMART_PTR_FIX(cl::_sym_file_write_date);
SMART_PTR_FIX(cl::_sym_userHomedirPathname);
SMART_PTR_FIX(cl::_sym_revappend);
SMART_PTR_FIX(cl::_sym_nreconc);
SMART_PTR_FIX(cl::_sym_listSTAR);
SMART_PTR_FIX(cl::_sym_butlast);
SMART_PTR_FIX(cl::_sym_nbutlast);
SMART_PTR_FIX(cl::_sym_nthcdr);
SMART_PTR_FIX(cl::_sym_copyList);
SMART_PTR_FIX(cl::_sym_last);
SMART_PTR_FIX(cl::_sym_filePosition);
SMART_PTR_FIX(cl::_sym_readSequence);
SMART_PTR_FIX(cl::_sym_read_from_string);
SMART_PTR_FIX(cl::_sym_read_line);
SMART_PTR_FIX(cl::_sym_terpri);
SMART_PTR_FIX(cl::_sym_freshLine);
SMART_PTR_FIX(cl::_sym_writeString);
SMART_PTR_FIX(cl::_sym_writeLine);
SMART_PTR_FIX(cl::_sym_writeChar);
SMART_PTR_FIX(cl::_sym_clearInput);
SMART_PTR_FIX(cl::_sym_clearOutput);
SMART_PTR_FIX(cl::_sym_readByte);
SMART_PTR_FIX(cl::_sym_peekChar);
SMART_PTR_FIX(cl::_sym_readChar);
SMART_PTR_FIX(cl::_sym_readCharNoHang);
SMART_PTR_FIX(cl::_sym_force_output);
SMART_PTR_FIX(cl::_sym_finish_output);
SMART_PTR_FIX(cl::_sym_listen);
SMART_PTR_FIX(cl::_sym_unread_char);
SMART_PTR_FIX(cl::_sym_makeStringOutputStream);
SMART_PTR_FIX(cl::_sym_writeByte);
SMART_PTR_FIX(cl::_sym_interactive_stream_p);
SMART_PTR_FIX(cl::_sym_streamp);
SMART_PTR_FIX(cl::_sym_close);
SMART_PTR_FIX(cl::_sym_get_output_stream_string);
SMART_PTR_FIX(cl::_sym_synonymStreamSymbol);
SMART_PTR_FIX(cl::_sym_boole_1);
SMART_PTR_FIX(cl::_sym_boole_2);
SMART_PTR_FIX(cl::_sym_boole_and);
SMART_PTR_FIX(cl::_sym_boole_andc1);
SMART_PTR_FIX(cl::_sym_boole_andc2);
SMART_PTR_FIX(cl::_sym_boole_c1);
SMART_PTR_FIX(cl::_sym_boole_c2);
SMART_PTR_FIX(cl::_sym_boole_clr);
SMART_PTR_FIX(cl::_sym_boole_eqv);
SMART_PTR_FIX(cl::_sym_boole_ior);
SMART_PTR_FIX(cl::_sym_boole_nand);
SMART_PTR_FIX(cl::_sym_boole_nor);
SMART_PTR_FIX(cl::_sym_boole_orc1);
SMART_PTR_FIX(cl::_sym_boole_orc2);
SMART_PTR_FIX(cl::_sym_boole_set);
SMART_PTR_FIX(cl::_sym_boole_xor);
SMART_PTR_FIX(cl::_sym_printNotReadableObject);
SMART_PTR_FIX(cl::_sym_provide);
SMART_PTR_FIX(cl::_sym_seriousCondition);
SMART_PTR_FIX(cl::_sym_warn);
SMART_PTR_FIX(cl::_sym_programError);
SMART_PTR_FIX(cl::_sym_cellError);
SMART_PTR_FIX(cl::_sym_unboundVariable);
SMART_PTR_FIX(cl::_sym_unboundSlot);
SMART_PTR_FIX(cl::_sym_undefinedFunction);
SMART_PTR_FIX(cl::_sym_package_error);
SMART_PTR_FIX(cl::_sym_arithmeticError);
SMART_PTR_FIX(cl::_sym_floatingPointOverflow);
SMART_PTR_FIX(cl::_sym_floatingPointInexact);
SMART_PTR_FIX(cl::_sym_floatingPointInvalidOperation);
SMART_PTR_FIX(cl::_sym_floatingPointUnderflow);
SMART_PTR_FIX(cl::_sym_divisionByZero);
SMART_PTR_FIX(cl::_sym_printNotReadable);
SMART_PTR_FIX(cl::_sym_streamError);
SMART_PTR_FIX(cl::_sym_endOfFile);
SMART_PTR_FIX(cl::_sym_parseError);
SMART_PTR_FIX(cl::_sym_readerError);
SMART_PTR_FIX(cl::_sym_STARrandom_stateSTAR);
SMART_PTR_FIX(cl::_sym_simpleError);
SMART_PTR_FIX(cl::_sym_storageCondition);
SMART_PTR_FIX(cl::_sym_simpleCondition);
SMART_PTR_FIX(cl::_sym_simpleWarning);
SMART_PTR_FIX(cl::_sym_warning);
SMART_PTR_FIX(cl::_sym_styleWarning);
SMART_PTR_FIX(cl::_sym_asin);
SMART_PTR_FIX(cl::_sym_acos);
SMART_PTR_FIX(cl::_sym_asinh);
SMART_PTR_FIX(cl::_sym_acosh);
SMART_PTR_FIX(cl::_sym_atanh);
SMART_PTR_FIX(cl::_sym_dynamic_extent);
SMART_PTR_FIX(cl::_sym_ftype);
SMART_PTR_FIX(cl::_sym_boole);
SMART_PTR_FIX(cl::_sym_callArgumentsLimit);
SMART_PTR_FIX(cl::_sym_arrayDimensionLimit);
SMART_PTR_FIX(cl::_sym_arrayTotalSizeLimit);
SMART_PTR_FIX(cl::_sym_lambdaParametersLimit);
SMART_PTR_FIX(cl::_sym_schar);
SMART_PTR_FIX(cl::_sym_fixnum);
SMART_PTR_FIX(cl::_sym_nil);
SMART_PTR_FIX(cl::_sym_stream_element_type);
SMART_PTR_FIX(cl::_sym_stream_external_format);
SMART_PTR_FIX(cl::_sym_open_stream_p);
SMART_PTR_FIX(cl::_sym_write_sequence);
SMART_PTR_FIX(cl::_sym_read_sequence);
SMART_PTR_FIX(cl::_sym_file_string_length);
SMART_PTR_FIX(cl::_sym_echo_stream_input_stream);
SMART_PTR_FIX(cl::_sym_echo_stream_output_stream);
SMART_PTR_FIX(cl::_sym_concatenated_stream_streams);
SMART_PTR_FIX(cl::_sym_synonym_stream_symbol);
SMART_PTR_FIX(cl::_sym_broadcast_stream_streams);
SMART_PTR_FIX(cl::_sym_getOutputStreamString);
SMART_PTR_FIX(cl::_sym_elt);
SMART_PTR_FIX(cl::_sym_callNextMethod);
SMART_PTR_FIX(cl::_sym_nextMethodP);
SMART_PTR_FIX(cl::_sym_internalTimeUnitsPerSecond);
SMART_PTR_FIX(cl::_sym_getInternalRealTime);
SMART_PTR_FIX(cl::_sym_getInternalRunTime);
SMART_PTR_FIX(cl::_sym_logicalPathnameTranslations);
SMART_PTR_FIX(cl::_sym_set);
SMART_PTR_FIX(cl::_sym_restartName);
SMART_PTR_FIX(cl::_sym_position);
SMART_PTR_FIX(cl::_sym_compileFile);
SMART_PTR_FIX(cl::_sym_first);
SMART_PTR_FIX(cl::_sym_float);
SMART_PTR_FIX(cl::_sym_logical_pathname);
SMART_PTR_FIX(cl::_sym_pathnamep);
SMART_PTR_FIX(cl::_sym_STARloadPathnameSTAR);
SMART_PTR_FIX(cl::_sym_STARloadTruenameSTAR);
SMART_PTR_FIX(cl::_sym_makeArray);
SMART_PTR_FIX(cl::_sym_makePathname);
SMART_PTR_FIX(cl::_sym_mismatch);
SMART_PTR_FIX(cl::_sym_SignedByte);
SMART_PTR_FIX(cl::_sym_UnsignedByte);
SMART_PTR_FIX(cl::_sym_Bit);
SMART_PTR_FIX(cl::_sym_STARdefaultPathnameDefaultsSTAR);
SMART_PTR_FIX(cl::_sym_simpleTypeError);
SMART_PTR_FIX(cl::_sym_MultipleValuesLimit);
SMART_PTR_FIX(cl::_sym_keywordp);
SMART_PTR_FIX(cl::_sym_null);
SMART_PTR_FIX(cl::_sym_endp);
SMART_PTR_FIX(cl::_sym_symbolp);
SMART_PTR_FIX(cl::_sym_atom);
SMART_PTR_FIX(cl::_sym_consp);
SMART_PTR_FIX(cl::_sym_listp);
SMART_PTR_FIX(cl::_sym_numberp);
SMART_PTR_FIX(cl::_sym_integerp);
SMART_PTR_FIX(cl::_sym_rationalp);
SMART_PTR_FIX(cl::_sym_floatp);
SMART_PTR_FIX(cl::_sym_realp);
SMART_PTR_FIX(cl::_sym_complexp);
SMART_PTR_FIX(cl::_sym_character);
SMART_PTR_FIX(cl::_sym_base_char);
SMART_PTR_FIX(cl::_sym_single_float);
SMART_PTR_FIX(cl::_sym_characterp);
SMART_PTR_FIX(cl::_sym_stringp);
SMART_PTR_FIX(cl::_sym_bit_vector_p);
SMART_PTR_FIX(cl::_sym_vectorp);
SMART_PTR_FIX(cl::_sym_simple_vector_p);
SMART_PTR_FIX(cl::_sym_simple_string_p);
SMART_PTR_FIX(cl::_sym_simple_bit_vector_p);
SMART_PTR_FIX(cl::_sym_arrayp);
SMART_PTR_FIX(cl::_sym_packagep);
SMART_PTR_FIX(cl::_sym_functionp);
SMART_PTR_FIX(cl::_sym_compiled_function_p);
SMART_PTR_FIX(cl::_sym_hash_table_p);
SMART_PTR_FIX(cl::_sym__DIVIDE_);
SMART_PTR_FIX(cl::_sym_typep);
SMART_PTR_FIX(cl::_sym_type);
SMART_PTR_FIX(cl::_sym_step);
SMART_PTR_FIX(cl::_sym_speed);
SMART_PTR_FIX(cl::_sym_space);
SMART_PTR_FIX(cl::_sym_sin);
SMART_PTR_FIX(cl::_sym_safety);
SMART_PTR_FIX(cl::_sym_restart_bind);
SMART_PTR_FIX(cl::_sym_restart);
SMART_PTR_FIX(cl::_sym_describe);
SMART_PTR_FIX(cl::_sym_disassemble);
SMART_PTR_FIX(cl::_sym_rename_file);
SMART_PTR_FIX(cl::_sym_random);
SMART_PTR_FIX(cl::_sym_optimize);
SMART_PTR_FIX(cl::_sym_two_way_stream_input_stream);
SMART_PTR_FIX(cl::_sym_two_way_stream_output_stream);
SMART_PTR_FIX(cl::_sym_two_way_stream);
SMART_PTR_FIX(cl::_sym_make_two_way_stream);
SMART_PTR_FIX(cl::_sym_make_synonym_stream);
SMART_PTR_FIX(cl::_sym_invoke_restart);
SMART_PTR_FIX(cl::_sym_get);
SMART_PTR_FIX(cl::_sym_find_restart);
SMART_PTR_FIX(cl::_sym_fill_pointer);
SMART_PTR_FIX(cl::_sym_directory);
SMART_PTR_FIX(cl::_sym_defun);
SMART_PTR_FIX(cl::_sym_debug);
SMART_PTR_FIX(cl::_sym_count);
SMART_PTR_FIX(cl::_sym_compute_restarts);
SMART_PTR_FIX(cl::_sym_write);
SMART_PTR_FIX(cl::_sym_STARreadDefaultFloatFormatSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_baseSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_levelSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_lengthSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_radixSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_caseSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_gensymSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_arraySTAR);
SMART_PTR_FIX(cl::_sym_STARprint_readablySTAR);
SMART_PTR_FIX(cl::_sym_STARprint_escapeSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_circleSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_linesSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_right_marginSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_prettySTAR);
SMART_PTR_FIX(cl::_sym_STARprint_miser_widthSTAR);
SMART_PTR_FIX(cl::_sym_STARprint_pprint_dispatchSTAR);
SMART_PTR_FIX(cl::_sym_STARdebuggerHookSTAR);
SMART_PTR_FIX(cl::_sym_break);
SMART_PTR_FIX(cl::_sym_STARbreakOnSignalsSTAR);
SMART_PTR_FIX(cl::_sym_typeError);
SMART_PTR_FIX(cl::_sym_printObject);
SMART_PTR_FIX(cl::_sym_controlError);
SMART_PTR_FIX(cl::_sym_fileError);
SMART_PTR_FIX(cl::_sym_satisfies);
SMART_PTR_FIX(cl::_sym_T);
SMART_PTR_FIX(cl::_sym_method);
SMART_PTR_FIX(cl::_sym_generic_function);
SMART_PTR_FIX(cl::_sym_cond);
SMART_PTR_FIX(cl::_sym_stream);
SMART_PTR_FIX(cl::_sym_boolean);
SMART_PTR_FIX(cl::_sym_keyword);
SMART_PTR_FIX(cl::_sym_array);
SMART_PTR_FIX(cl::_sym_simple_array);
SMART_PTR_FIX(cl::_sym_vector);
SMART_PTR_FIX(cl::_sym_simple_vector);
SMART_PTR_FIX(cl::_sym_input_stream_p);
SMART_PTR_FIX(cl::_sym_output_stream_p);
SMART_PTR_FIX(cl::_sym_STARstandard_inputSTAR);
SMART_PTR_FIX(cl::_sym_STARstandard_outputSTAR);
SMART_PTR_FIX(cl::_sym_STARerror_outputSTAR);
SMART_PTR_FIX(cl::_sym_STARtrace_outputSTAR);
SMART_PTR_FIX(cl::_sym_STARdebug_ioSTAR);
SMART_PTR_FIX(cl::_sym_STARquery_ioSTAR);
SMART_PTR_FIX(cl::_sym_STARterminal_ioSTAR);
SMART_PTR_FIX(cl::_sym_STARgensym_counterSTAR);
SMART_PTR_FIX(cl::_sym_standard_char);
SMART_PTR_FIX(cl::_sym_extended_char);
SMART_PTR_FIX(cl::_sym_special);
SMART_PTR_FIX(cl::_sym_nconc);
SMART_PTR_FIX(cl::_sym_cadr);
SMART_PTR_FIX(cl::_sym_STARmacroexpand_hookSTAR);
SMART_PTR_FIX(cl::_sym_STARread_baseSTAR);
SMART_PTR_FIX(cl::_sym_compile);
SMART_PTR_FIX(cl::_sym_load);
SMART_PTR_FIX(cl::_sym_eval);
SMART_PTR_FIX(cl::_sym_STARread_evalSTAR);
SMART_PTR_FIX(cl::_sym_define_modify_macro);
SMART_PTR_FIX(cl::_sym_destructuring_bind);
SMART_PTR_FIX(cl::_sym_deftype);
SMART_PTR_FIX(cl::_sym_define_method_combination);
SMART_PTR_FIX(cl::_sym_defsetf);
SMART_PTR_FIX(cl::_sym_AMPwhole);
SMART_PTR_FIX(cl::_sym_AMPenvironment);
SMART_PTR_FIX(cl::_sym_AMPoptional);
SMART_PTR_FIX(cl::_sym_AMPkey);
SMART_PTR_FIX(cl::_sym_AMPallow_other_keys);
SMART_PTR_FIX(cl::_sym_AMPaux);
SMART_PTR_FIX(cl::_sym_AMPrest);
SMART_PTR_FIX(cl::_sym_AMPbody);
SMART_PTR_FIX(cl::_sym_integer);
SMART_PTR_FIX(cl::_sym_sequence);
SMART_PTR_FIX(cl::_sym_declare);
SMART_PTR_FIX(cl::_sym_variable);
SMART_PTR_FIX(cl::_sym_bit);
SMART_PTR_FIX(cl::_sym_STARreadtableSTAR);
SMART_PTR_FIX(cl::_sym_and);
SMART_PTR_FIX(cl::_sym_or);
SMART_PTR_FIX(cl::_sym_car);
SMART_PTR_FIX(cl::_sym_cdr);
SMART_PTR_FIX(cl::_sym_dotimes);
SMART_PTR_FIX(cl::_sym_dolist);
SMART_PTR_FIX(cl::_sym_do);
SMART_PTR_FIX(cl::_sym_package);
SMART_PTR_FIX(cl::_sym_aref);
SMART_PTR_FIX(cl::_sym_nth);
SMART_PTR_FIX(cl::_sym_append);
SMART_PTR_FIX(cl::_sym_gethash);
SMART_PTR_FIX(cl::_sym_hash_table);
SMART_PTR_FIX(cl::_sym_STARfeaturesSTAR);
SMART_PTR_FIX(cl::_sym_STARload_printSTAR);
SMART_PTR_FIX(cl::_sym_STARload_verboseSTAR);
SMART_PTR_FIX(cl::_sym_lambda);
SMART_PTR_FIX(cl::_sym_symbol);
SMART_PTR_FIX(cl::_sym_STARpackageSTAR);
SMART_PTR_FIX(cl::_sym_STARmodulesSTAR);
SMART_PTR_FIX(cl::_sym_progn);
SMART_PTR_FIX(cl::_sym_quote);
SMART_PTR_FIX(cl::_sym_function);
SMART_PTR_FIX(cl::_sym_slot_value);
SMART_PTR_FIX(cl::_sym_values);
SMART_PTR_FIX(cl::_sym_list);
SMART_PTR_FIX(cl::_sym_standard_class);
SMART_PTR_FIX(cl::_sym_rest);
SMART_PTR_FIX(cl::_sym_most_negative_fixnum);
SMART_PTR_FIX(cl::_sym_most_positive_fixnum);
SMART_PTR_FIX(cl::_sym_array_rank_limit);
SMART_PTR_FIX(cl::_sym_char_code_limit);
SMART_PTR_FIX(cl::_sym_apropos);
SMART_PTR_FIX(cl::_sym_export);
SMART_PTR_FIX(cl::_sym_intern);
SMART_PTR_FIX(cl::_sym_findClass);
SMART_PTR_FIX(cl::_sym_error);
SMART_PTR_FIX(cl::_sym_cerror);
SMART_PTR_FIX(cl::_sym_not);
SMART_PTR_FIX(cl::_sym_sort);
SMART_PTR_FIX(cl::_sym_macroexpand_1);
SMART_PTR_FIX(cl::_sym_macroexpand);
SMART_PTR_FIX(cl::_sym_acons);
SMART_PTR_FIX(cl::_sym_assoc);
SMART_PTR_FIX(cl::_sym_member);
SMART_PTR_FIX(cl::_sym_find_package);
SMART_PTR_FIX(cl::_sym_copyTree);
SMART_PTR_FIX(cl::_sym_eq);
SMART_PTR_FIX(cl::_sym_eql);
SMART_PTR_FIX(cl::_sym_equal);
SMART_PTR_FIX(cl::_sym_equalp);
SMART_PTR_FIX(cl::_sym_setMacroCharacter);
SMART_PTR_FIX(cl::_sym_setDispatchMacroCharacter);
SMART_PTR_FIX(cl::_sym_getDispatchMacroCharacter);
SMART_PTR_FIX(cl::_sym_pathname);
SMART_PTR_FIX(cl::_sym_mergePathnames);
SMART_PTR_FIX(cl::_sym_wildPathnameP);
SMART_PTR_FIX(cl::_sym_make_pathname);
SMART_PTR_FIX(cl::_sym_pathnameHost);
SMART_PTR_FIX(cl::_sym_pathnameDevice);
SMART_PTR_FIX(cl::_sym_pathnameDirectory);
SMART_PTR_FIX(cl::_sym_pathnameName);
SMART_PTR_FIX(cl::_sym_pathnameType);
SMART_PTR_FIX(cl::_sym_pathnameVersion);
SMART_PTR_FIX(cl::_sym_pathnameMatchP);
SMART_PTR_FIX(cl::_sym_translatePathname);
SMART_PTR_FIX(cl::_sym_translateLogicalPathname);
SMART_PTR_FIX(cl::_sym_namestring);
SMART_PTR_FIX(cl::_sym_parseNamestring);
SMART_PTR_FIX(cl::_sym_fileNamestring);
SMART_PTR_FIX(cl::_sym_directoryNamestring);
SMART_PTR_FIX(cl::_sym_hostNamestring);
SMART_PTR_FIX(cl::_sym_enoughNamestring);
SMART_PTR_FIX(cl::_sym_package_use_list);
SMART_PTR_FIX(cl::_sym_gentemp);
SMART_PTR_FIX(cl::_sym_makePackage);
SMART_PTR_FIX(cl::_sym_listAllPackages);
SMART_PTR_FIX(cl::_sym_use_package);
SMART_PTR_FIX(cl::_sym_unuse_package);
SMART_PTR_FIX(cl::_sym_package_shadowing_symbols);
SMART_PTR_FIX(cl::_sym_import);
SMART_PTR_FIX(cl::_sym_shadow);
SMART_PTR_FIX(cl::_sym_shadowing_import);
SMART_PTR_FIX(cl::_sym_findSymbol);
SMART_PTR_FIX(cl::_sym_unintern);
SMART_PTR_FIX(cl::_sym_condition);
SMART_PTR_FIX(cl::_sym_defvar);
SMART_PTR_FIX(cl::_sym_defconstant);
SMART_PTR_FIX(cl::_sym_defparameter);
SMART_PTR_FIX(cl::_sym_intersection);
SMART_PTR_FIX(cl::_sym_union);
SMART_PTR_FIX(cl::_sym_remove);
SMART_PTR_FIX(cl::_sym_pprint_dispatch);
SMART_PTR_FIX(cl::_sym_fileStream);
SMART_PTR_FIX(cl::_sym_make_list);
SMART_PTR_FIX(cl::_sym_cons);
SMART_PTR_FIX(cl::_sym_getf);
SMART_PTR_FIX(cl::_sym_make_symbol);
SMART_PTR_FIX(cl::_sym_symbolName);
SMART_PTR_FIX(cl::_sym_symbolValue);
SMART_PTR_FIX(cl::_sym_symbolPackage);
SMART_PTR_FIX(cl::_sym_symbolFunction);
SMART_PTR_FIX(cl::_sym_boundp);
SMART_PTR_FIX(cl::_sym_makeCondition);
SMART_PTR_FIX(cl::_sym_format);
SMART_PTR_FIX(cl::_sym_documentation);
SMART_PTR_FIX(cl::_sym_copyStructure);
SMART_PTR_FIX(cl::_sym_char_code);
SMART_PTR_FIX(cl::_sym_code_char);
SMART_PTR_FIX(cl::_sym_char_int);
SMART_PTR_FIX(cl::_sym_name_char);
SMART_PTR_FIX(cl::_sym_char_name);
SMART_PTR_FIX(cl::_sym_alpha_char_p);
SMART_PTR_FIX(cl::_sym_standard_char_p);
SMART_PTR_FIX(cl::_sym_charUpcase);
SMART_PTR_FIX(cl::_sym_charDowncase);
SMART_PTR_FIX(cl::_sym_char_LT_);
SMART_PTR_FIX(cl::_sym_char_GT_);
SMART_PTR_FIX(cl::_sym_char_LE_);
SMART_PTR_FIX(cl::_sym_char_GE_);
SMART_PTR_FIX(cl::_sym_char_NE_);
SMART_PTR_FIX(cl::_sym_char_EQ_);
SMART_PTR_FIX(cl::_sym_charLessp);
SMART_PTR_FIX(cl::_sym_charGreaterp);
SMART_PTR_FIX(cl::_sym_charNotGreaterp);
SMART_PTR_FIX(cl::_sym_charNotLessp);
SMART_PTR_FIX(cl::_sym_charNotEqual);
SMART_PTR_FIX(cl::_sym_charEqual);
SMART_PTR_FIX(cl::_sym_digitCharP);
SMART_PTR_FIX(cl::_sym_string);
SMART_PTR_FIX(cl::_sym_string_upcase);
SMART_PTR_FIX(cl::_sym_string_downcase);
SMART_PTR_FIX(cl::_sym_nstring_upcase);
SMART_PTR_FIX(cl::_sym_nstring_downcase);
SMART_PTR_FIX(cl::_sym_stringTrim);
SMART_PTR_FIX(cl::_sym_stringLeftTrim);
SMART_PTR_FIX(cl::_sym_stringRightTrim);
SMART_PTR_FIX(cl::_sym_char);
SMART_PTR_FIX(cl::_sym_string_EQ_);
SMART_PTR_FIX(cl::_sym_string_NE_);
SMART_PTR_FIX(cl::_sym_string_LT_);
SMART_PTR_FIX(cl::_sym_string_GT_);
SMART_PTR_FIX(cl::_sym_string_LE_);
SMART_PTR_FIX(cl::_sym_string_GE_);
SMART_PTR_FIX(cl::_sym_string_equal);
SMART_PTR_FIX(cl::_sym_string_not_equal);
SMART_PTR_FIX(cl::_sym_string_lessp);
SMART_PTR_FIX(cl::_sym_string_greaterp);
SMART_PTR_FIX(cl::_sym_string_not_greaterp);
SMART_PTR_FIX(cl::_sym_string_not_lessp);
SMART_PTR_FIX(cl::_sym_make_string);
SMART_PTR_FIX(cl::_sym_parseInteger);
SMART_PTR_FIX(cl::_sym_make_sequence);
SMART_PTR_FIX(cl::_sym_reverse);
SMART_PTR_FIX(cl::_sym_nreverse);
SMART_PTR_FIX(cl::_sym_subseq);
SMART_PTR_FIX(cl::_sym_copySeq);
SMART_PTR_FIX(cl::_sym_length);
SMART_PTR_FIX(cl::_sym_subtypep);
SMART_PTR_FIX(cl::_sym_vectorPush);
SMART_PTR_FIX(cl::_sym_vectorPushExtend);
SMART_PTR_FIX(cl::_sym_STARread_suppressSTAR);
SMART_PTR_FIX(cl::_sym_RandomState_O);
SMART_PTR_FIX(cl::_sym_ReadTable_O);
SMART_PTR_FIX(cl::_sym_StructureObject_O);
SMART_PTR_FIX(cl::_sym_Null_O);
SMART_PTR_FIX(cl::_sym_StructureClass_O);
SMART_PTR_FIX(cl::_sym_StandardClass_O);
SMART_PTR_FIX(cl::_sym_BuiltInClass_O);
SMART_PTR_FIX(cl::_sym_Package_O);
SMART_PTR_FIX(cl::_sym_Pathname_O);
SMART_PTR_FIX(cl::_sym_LogicalPathname_O);
SMART_PTR_FIX(cl::_sym_Character_dummy_O);
SMART_PTR_FIX(cl::_sym_Stream_O);
SMART_PTR_FIX(cl::_sym_FileStream_O);
SMART_PTR_FIX(cl::_sym_StringStream_O);
SMART_PTR_FIX(cl::_sym_SynonymStream_O);
SMART_PTR_FIX(cl::_sym_TwoWayStream_O);
SMART_PTR_FIX(cl::_sym_BroadcastStream_O);
SMART_PTR_FIX(cl::_sym_ConcatenatedStream_O);
SMART_PTR_FIX(cl::_sym_EchoStream_O);
SMART_PTR_FIX(cl::_sym_T_O);
SMART_PTR_FIX(cl::_sym_Cons_O);
SMART_PTR_FIX(cl::_sym_Number_O);
SMART_PTR_FIX(cl::_sym_Real_O);
SMART_PTR_FIX(cl::_sym_Rational_O);
SMART_PTR_FIX(cl::_sym_Integer_O);
SMART_PTR_FIX(cl::_sym_Fixnum_dummy_O);
SMART_PTR_FIX(cl::_sym_Float_O);
SMART_PTR_FIX(cl::_sym_ShortFloat_O);
SMART_PTR_FIX(cl::_sym_SingleFloat_dummy_O);
SMART_PTR_FIX(cl::_sym_DoubleFloat_O);
SMART_PTR_FIX(cl::_sym_LongFloat_O);
SMART_PTR_FIX(cl::_sym_Complex_O);
SMART_PTR_FIX(cl::_sym_Ratio_O);
SMART_PTR_FIX(cl::_sym_Bignum_O);
SMART_PTR_FIX(cl::_sym_Symbol_O);
SMART_PTR_FIX(cl::_sym_Function_O);
SMART_PTR_FIX(cl::_sym_CompiledFunction_O);
SMART_PTR_FIX(cl::_sym_StandardObject_O);
SMART_PTR_FIX(cl::_sym_Class_O);
SMART_PTR_FIX(cl::_sym_Array_O);
SMART_PTR_FIX(cl::_sym_Vector_O);
SMART_PTR_FIX(cl::_sym_String_O);
SMART_PTR_FIX(cl::_sym_Str_O);
SMART_PTR_FIX(cl::_sym_HashTable_O);
SMART_PTR_FIX(cl::_sym_BitVector_O);
SMART_PTR_FIX(cl::_sym_SimpleBitVector_O);
SMART_PTR_FIX(cl::_sym_BitVectorWithFillPtr_O);
SMART_PTR_FIX(ext::_sym_STARinspectorHookSTAR);
SMART_PTR_FIX(ext::_sym_integer8);
SMART_PTR_FIX(ext::_sym_byte8);
SMART_PTR_FIX(ext::_sym_float_nan_string);
SMART_PTR_FIX(ext::_sym_float_infinity_string);
SMART_PTR_FIX(ext::_sym_STARdefault_external_formatSTAR);
SMART_PTR_FIX(ext::_sym_truly_the);
SMART_PTR_FIX(ext::_sym_specialVar);
SMART_PTR_FIX(ext::_sym_lexicalVar);
SMART_PTR_FIX(ext::_sym_stackVar);
SMART_PTR_FIX(ext::_sym__PLUS_processStandardInput_PLUS_);
SMART_PTR_FIX(ext::_sym__PLUS_processStandardOutput_PLUS_);
SMART_PTR_FIX(ext::_sym__PLUS_processErrorOutput_PLUS_);
SMART_PTR_FIX(ext::_sym_lambda_block);
SMART_PTR_FIX(ext::_sym_system);
SMART_PTR_FIX(ext::_sym_setenv);
SMART_PTR_FIX(ext::_sym_getenv);
SMART_PTR_FIX(ext::_sym_STARloadHooksSTAR);
SMART_PTR_FIX(ext::_sym_aSingleExtSymbol);
SMART_PTR_FIX(ext::_sym_STARinvokeDebuggerHookSTAR);
SMART_PTR_FIX(ext::_sym_compiledFunctionName);
SMART_PTR_FIX(ext::_sym_ansi_stream);
SMART_PTR_FIX(ext::_sym_maybeQuote);
SMART_PTR_FIX(ext::_sym_annotate);
SMART_PTR_FIX(ext::_sym_AnsiStream_O);
SMART_PTR_FIX(geom::_sym_colorTable);
SMART_PTR_FIX(geom::_sym_OVector2_O);
SMART_PTR_FIX(geom::_sym_BoundingBox_O);
SMART_PTR_FIX(geom::_sym_Color_O);
SMART_PTR_FIX(geom::_sym_OMatrix_O);
SMART_PTR_FIX(geom::_sym_CoordinateArray_O);
SMART_PTR_FIX(geom::_sym_CoordinateArrayWithHash_O);
SMART_PTR_FIX(geom::_sym_OVector3_O);
SMART_PTR_FIX(kw::_sym_catchFrame);
SMART_PTR_FIX(kw::_sym_blockFrame);
SMART_PTR_FIX(kw::_sym_tagbodyFrame);
SMART_PTR_FIX(kw::_sym_landingPadFrame);
SMART_PTR_FIX(kw::_sym_splatted);
SMART_PTR_FIX(kw::_sym_unbound);
SMART_PTR_FIX(kw::_sym_deleted);
SMART_PTR_FIX(kw::_sym_rtld_default);
SMART_PTR_FIX(kw::_sym_rtld_next);
SMART_PTR_FIX(kw::_sym_rtld_self);
SMART_PTR_FIX(kw::_sym_rtld_main_only);
SMART_PTR_FIX(kw::_sym_iclass);
SMART_PTR_FIX(kw::_sym_next);
SMART_PTR_FIX(kw::_sym_prev);
SMART_PTR_FIX(kw::_sym_key);
SMART_PTR_FIX(kw::_sym_defaults);
SMART_PTR_FIX(kw::_sym_error);
SMART_PTR_FIX(kw::_sym_link);
SMART_PTR_FIX(kw::_sym_broken_link);
SMART_PTR_FIX(kw::_sym_special);
SMART_PTR_FIX(kw::_sym_supersede);
SMART_PTR_FIX(kw::_sym_calledFunction);
SMART_PTR_FIX(kw::_sym_givenNumberOfArguments);
SMART_PTR_FIX(kw::_sym_requiredNumberOfArguments);
SMART_PTR_FIX(kw::_sym_unrecognizedKeyword);
SMART_PTR_FIX(kw::_sym_body);
SMART_PTR_FIX(kw::_sym_lambda_list_handler);
SMART_PTR_FIX(kw::_sym_docstring);
SMART_PTR_FIX(kw::_sym_arguments);
SMART_PTR_FIX(kw::_sym_create);
SMART_PTR_FIX(kw::_sym_append);
SMART_PTR_FIX(kw::_sym_debugStartup);
SMART_PTR_FIX(kw::_sym_cclasp);
SMART_PTR_FIX(kw::_sym_bclasp);
SMART_PTR_FIX(kw::_sym_load);
SMART_PTR_FIX(kw::_sym_eval);
SMART_PTR_FIX(kw::_sym_ecl_min);
SMART_PTR_FIX(kw::_sym_use_mps);
SMART_PTR_FIX(kw::_sym_use_boehmdc);
SMART_PTR_FIX(kw::_sym_use_boehm);
SMART_PTR_FIX(kw::_sym_cr);
SMART_PTR_FIX(kw::_sym_lf);
SMART_PTR_FIX(kw::_sym_littleEndian);
SMART_PTR_FIX(kw::_sym_bigEndian);
SMART_PTR_FIX(kw::_sym_crlf);
SMART_PTR_FIX(kw::_sym_latin_1);
SMART_PTR_FIX(kw::_sym_ucs_4);
SMART_PTR_FIX(kw::_sym_passThrough);
SMART_PTR_FIX(kw::_sym_if_does_not_exist);
SMART_PTR_FIX(kw::_sym_new_version);
SMART_PTR_FIX(kw::_sym_rename);
SMART_PTR_FIX(kw::_sym_rename_and_delete);
SMART_PTR_FIX(kw::_sym_overwrite);
SMART_PTR_FIX(kw::_sym_if_exists);
SMART_PTR_FIX(kw::_sym_probe);
SMART_PTR_FIX(kw::_sym_FullDebug);
SMART_PTR_FIX(kw::_sym_LineTablesOnly);
SMART_PTR_FIX(kw::_sym__uid);
SMART_PTR_FIX(kw::_sym_none);
SMART_PTR_FIX(kw::_sym_line);
SMART_PTR_FIX(kw::_sym_full);
SMART_PTR_FIX(kw::_sym_message);
SMART_PTR_FIX(kw::_sym_line_buffered);
SMART_PTR_FIX(kw::_sym_fully_buffered);
SMART_PTR_FIX(kw::_sym_array);
SMART_PTR_FIX(kw::_sym_UnsignedByte);
SMART_PTR_FIX(kw::_sym_junkAllowed);
SMART_PTR_FIX(kw::_sym_absolute);
SMART_PTR_FIX(kw::_sym_relative);
SMART_PTR_FIX(kw::_sym_back);
SMART_PTR_FIX(kw::_sym_operation);
SMART_PTR_FIX(kw::_sym_operands);
SMART_PTR_FIX(kw::_sym_escape);
SMART_PTR_FIX(kw::_sym_capitalize);
SMART_PTR_FIX(kw::_sym_typeError);
SMART_PTR_FIX(kw::_sym_datum);
SMART_PTR_FIX(kw::_sym_expectedType);
SMART_PTR_FIX(kw::_sym_print);
SMART_PTR_FIX(kw::_sym_pathname);
SMART_PTR_FIX(kw::_sym_object);
SMART_PTR_FIX(kw::_sym_formatControl);
SMART_PTR_FIX(kw::_sym_formatArguments);
SMART_PTR_FIX(kw::_sym_stream);
SMART_PTR_FIX(kw::_sym_package);
SMART_PTR_FIX(kw::_sym_compile_toplevel);
SMART_PTR_FIX(kw::_sym_load_toplevel);
SMART_PTR_FIX(kw::_sym_execute);
SMART_PTR_FIX(kw::_sym_allow_other_keys);
SMART_PTR_FIX(kw::_sym_macro);
SMART_PTR_FIX(kw::_sym_function);
SMART_PTR_FIX(kw::_sym_invalid_character);
SMART_PTR_FIX(kw::_sym_brcl);
SMART_PTR_FIX(kw::_sym_not);
SMART_PTR_FIX(kw::_sym_and);
SMART_PTR_FIX(kw::_sym_or);
SMART_PTR_FIX(kw::_sym_class);
SMART_PTR_FIX(kw::_sym_instance);
SMART_PTR_FIX(kw::_sym_output);
SMART_PTR_FIX(kw::_sym_input);
SMART_PTR_FIX(kw::_sym_io);
SMART_PTR_FIX(kw::_sym_default);
SMART_PTR_FIX(kw::_sym_internal);
SMART_PTR_FIX(kw::_sym_external);
SMART_PTR_FIX(kw::_sym_inherited);
SMART_PTR_FIX(kw::_sym_debug);
SMART_PTR_FIX(kw::_sym_direct_super_classes);
SMART_PTR_FIX(kw::_sym_changed);
SMART_PTR_FIX(kw::_sym_address_model_64);
SMART_PTR_FIX(kw::_sym_target_os_darwin);
SMART_PTR_FIX(kw::_sym_podSymbolMap);
SMART_PTR_FIX(kw::_sym_constituent_character);
SMART_PTR_FIX(kw::_sym_syntax);
SMART_PTR_FIX(kw::_sym_whitespace_character);
SMART_PTR_FIX(kw::_sym_single_escape_character);
SMART_PTR_FIX(kw::_sym_multiple_escape_character);
SMART_PTR_FIX(kw::_sym_upcase);
SMART_PTR_FIX(kw::_sym_downcase);
SMART_PTR_FIX(kw::_sym_preserve);
SMART_PTR_FIX(kw::_sym_invert);
SMART_PTR_FIX(kw::_sym_non_terminating_macro_character);
SMART_PTR_FIX(kw::_sym_terminating_macro_character);
SMART_PTR_FIX(kw::_sym_macro_function);
SMART_PTR_FIX(kw::_sym_case);
SMART_PTR_FIX(kw::_sym_file);
SMART_PTR_FIX(kw::_sym_unspecific);
SMART_PTR_FIX(kw::_sym_local);
SMART_PTR_FIX(kw::_sym_common);
SMART_PTR_FIX(kw::_sym_wild_inferiors);
SMART_PTR_FIX(kw::_sym_up);
SMART_PTR_FIX(kw::_sym_wild);
SMART_PTR_FIX(kw::_sym_host);
SMART_PTR_FIX(kw::_sym_device);
SMART_PTR_FIX(kw::_sym_newest);
SMART_PTR_FIX(kw::_sym_version);
SMART_PTR_FIX(kw::_sym_directory);
SMART_PTR_FIX(kw::_sym_supplied);
SMART_PTR_FIX(kw::_sym_min);
SMART_PTR_FIX(kw::_sym_max);
SMART_PTR_FIX(kw::_sym_eof);
SMART_PTR_FIX(kw::_sym_fillPointer);
SMART_PTR_FIX(kw::_sym_elementType);
SMART_PTR_FIX(kw::_sym_adjustable);
SMART_PTR_FIX(kw::_sym_start);
SMART_PTR_FIX(kw::_sym_end);
SMART_PTR_FIX(kw::_sym_x);
SMART_PTR_FIX(kw::_sym_y);
SMART_PTR_FIX(kw::_sym_z);
SMART_PTR_FIX(kw::_sym_white);
SMART_PTR_FIX(kw::_sym_black);
SMART_PTR_FIX(kw::_sym_red);
SMART_PTR_FIX(kw::_sym_green);
SMART_PTR_FIX(kw::_sym_blue);
SMART_PTR_FIX(kw::_sym_magenta);
SMART_PTR_FIX(kw::_sym_yellow);
SMART_PTR_FIX(kw::_sym_cyan);
SMART_PTR_FIX(kw::_sym_grey10);
SMART_PTR_FIX(kw::_sym_greyF0);
SMART_PTR_FIX(kw::_sym_goldenrod);
SMART_PTR_FIX(kw::_sym_purple);
SMART_PTR_FIX(kw::_sym_pink);
SMART_PTR_FIX(kw::_sym_plum);
SMART_PTR_FIX(kw::_sym_coral);
SMART_PTR_FIX(kw::_sym_orange);
SMART_PTR_FIX(kw::_sym_brown);
SMART_PTR_FIX(kw::_sym_wheat);
SMART_PTR_FIX(kw::_sym_chartreuse);
SMART_PTR_FIX(kw::_sym_aquamarine);
SMART_PTR_FIX(kw::_sym_mediumBlue);
SMART_PTR_FIX(kw::_sym_steelBlue);
SMART_PTR_FIX(kw::_sym_chemdraw_color);
SMART_PTR_FIX(kw::_sym_chemdraw_dashed_bond);
SMART_PTR_FIX(kw::_sym_comment);
SMART_PTR_FIX(kw::_sym_chiral_centers);
SMART_PTR_FIX(kw::_sym_group);
SMART_PTR_FIX(kw::_sym_name_template);
SMART_PTR_FIX(kw::_sym_pdb_template);
SMART_PTR_FIX(kw::_sym_residue_charge);
SMART_PTR_FIX(kw::_sym_restrained_pi_bonds);
SMART_PTR_FIX(kw::_sym_caps);
SMART_PTR_FIX(kw::_sym_matches);
SMART_PTR_FIX(kw::_sym_tags);
SMART_PTR_FIX(kw::_sym_closestMatch);
SMART_PTR_FIX(kw::_sym_data);
SMART_PTR_FIX(kw::_sym_root);
SMART_PTR_FIX(kw::_sym_op);
SMART_PTR_FIX(kw::_sym_ringTag);
SMART_PTR_FIX(kw::_sym_atomTest);
SMART_PTR_FIX(kw::_sym_test);
SMART_PTR_FIX(kw::_sym_int);
SMART_PTR_FIX(kw::_sym_num);
SMART_PTR_FIX(kw::_sym_str);
SMART_PTR_FIX(kw::_sym_sym);
SMART_PTR_FIX(kw::_sym_head);
SMART_PTR_FIX(kw::_sym_tail);
SMART_PTR_FIX(kw::_sym_left);
SMART_PTR_FIX(kw::_sym_right);
SMART_PTR_FIX(kw::_sym_tag1);
SMART_PTR_FIX(kw::_sym_tag2);
SMART_PTR_FIX(kw::_sym_bond);
SMART_PTR_FIX(kw::_sym_residueNames);
SMART_PTR_FIX(kw::_sym_atomicProperty);
SMART_PTR_FIX(kw::_sym_atomicNumber);
SMART_PTR_FIX(kw::_sym_attachedAtoms);
SMART_PTR_FIX(kw::_sym_attachedHs);
SMART_PTR_FIX(kw::_sym_attachedEWGs);
SMART_PTR_FIX(kw::_sym_neighbors);
SMART_PTR_FIX(kw::_sym_tag);
SMART_PTR_FIX(kw::_sym_atomProps);
SMART_PTR_FIX(kw::_sym_firstTest);
SMART_PTR_FIX(kw::_sym_chain);
SMART_PTR_FIX(kw::_sym_tests);
SMART_PTR_FIX(kw::_sym_assignType);
SMART_PTR_FIX(kw::_sym_afterMatchTests);
SMART_PTR_FIX(kw::_sym_wildDict);
SMART_PTR_FIX(kw::_sym_type_rules);
SMART_PTR_FIX(kw::_sym_r0);
SMART_PTR_FIX(kw::_sym_kb);
SMART_PTR_FIX(kw::_sym_stretches);
SMART_PTR_FIX(kw::_sym_R);
SMART_PTR_FIX(kw::_sym_Eps);
SMART_PTR_FIX(kw::_sym_M);
SMART_PTR_FIX(kw::_sym_N);
SMART_PTR_FIX(kw::_sym_Edep);
SMART_PTR_FIX(kw::_sym_vdw);
SMART_PTR_FIX(kw::_sym_angRad);
SMART_PTR_FIX(kw::_sym_k2);
SMART_PTR_FIX(kw::_sym_angleFunction);
SMART_PTR_FIX(kw::_sym_angles);
SMART_PTR_FIX(kw::_sym_zConstants);
SMART_PTR_FIX(kw::_sym_cConstants);
SMART_PTR_FIX(kw::_sym_level);
SMART_PTR_FIX(kw::_sym_forceField);
SMART_PTR_FIX(kw::_sym_itors);
SMART_PTR_FIX(kw::_sym_type1);
SMART_PTR_FIX(kw::_sym_type2);
SMART_PTR_FIX(kw::_sym_type3);
SMART_PTR_FIX(kw::_sym_type4);
SMART_PTR_FIX(kw::_sym_v0);
SMART_PTR_FIX(kw::_sym_ph0);
SMART_PTR_FIX(kw::_sym_v1);
SMART_PTR_FIX(kw::_sym_ph1);
SMART_PTR_FIX(kw::_sym_v2);
SMART_PTR_FIX(kw::_sym_ph2);
SMART_PTR_FIX(kw::_sym_v3);
SMART_PTR_FIX(kw::_sym_ph3);
SMART_PTR_FIX(kw::_sym_v4);
SMART_PTR_FIX(kw::_sym_ph4);
SMART_PTR_FIX(kw::_sym_v5);
SMART_PTR_FIX(kw::_sym_ph5);
SMART_PTR_FIX(kw::_sym_ptors);
SMART_PTR_FIX(kw::_sym_radius);
SMART_PTR_FIX(kw::_sym_well);
SMART_PTR_FIX(kw::_sym_apol);
SMART_PTR_FIX(kw::_sym_neff);
SMART_PTR_FIX(kw::_sym_mass);
SMART_PTR_FIX(kw::_sym_pol);
SMART_PTR_FIX(kw::_sym_initCharge);
SMART_PTR_FIX(kw::_sym_fcadj);
SMART_PTR_FIX(kw::_sym_pbci);
SMART_PTR_FIX(kw::_sym_da);
SMART_PTR_FIX(kw::_sym_eleDielectricValue);
SMART_PTR_FIX(kw::_sym_eleBuffer);
SMART_PTR_FIX(kw::_sym_eleScale14);
SMART_PTR_FIX(kw::_sym_eleChargeFcn);
SMART_PTR_FIX(kw::_sym_vdwScale14);
SMART_PTR_FIX(kw::_sym_vdwScaleBufferA);
SMART_PTR_FIX(kw::_sym_vdwScaleBufferB);
SMART_PTR_FIX(kw::_sym_nonbonds);
SMART_PTR_FIX(kw::_sym_map);
SMART_PTR_FIX(kw::_sym_eleDielectricCode);
SMART_PTR_FIX(kw::_sym_vdwMixRadius);
SMART_PTR_FIX(kw::_sym_vdwMixWell);
SMART_PTR_FIX(kw::_sym_name);
SMART_PTR_FIX(kw::_sym_id);
SMART_PTR_FIX(kw::_sym_restraints);
SMART_PTR_FIX(kw::_sym_contents);
SMART_PTR_FIX(kw::_sym_pdbName);
SMART_PTR_FIX(kw::_sym_uniqueLabel);
SMART_PTR_FIX(kw::_sym_NetCharge);
SMART_PTR_FIX(kw::_sym_fileSeqNum);
SMART_PTR_FIX(kw::_sym_monomerAliases);
SMART_PTR_FIX(kw::_sym_bl);
SMART_PTR_FIX(kw::_sym_alias);
SMART_PTR_FIX(kw::_sym_flags);
SMART_PTR_FIX(kw::_sym_element);
SMART_PTR_FIX(kw::_sym_hybridization);
SMART_PTR_FIX(kw::_sym_priority);
SMART_PTR_FIX(kw::_sym_hintLP);
SMART_PTR_FIX(kw::_sym_chg);
SMART_PTR_FIX(kw::_sym_ion);
SMART_PTR_FIX(kw::_sym_rings);
SMART_PTR_FIX(kw::_sym_tempInt);
SMART_PTR_FIX(kw::_sym_type);
SMART_PTR_FIX(kw::_sym_ar1);
SMART_PTR_FIX(kw::_sym_ar2);
SMART_PTR_FIX(kw::_sym_ar3);
SMART_PTR_FIX(kw::_sym_ar4);
SMART_PTR_FIX(kw::_sym_ar5);
SMART_PTR_FIX(kw::_sym_mask);
SMART_PTR_FIX(kw::_sym_configuration);
SMART_PTR_FIX(kw::_sym_stereochemistryType);
SMART_PTR_FIX(kw::_sym_pos);
SMART_PTR_FIX(kw::_sym_order);
SMART_PTR_FIX(kw::_sym_properties);
SMART_PTR_FIX(kw::_sym_a1);
SMART_PTR_FIX(kw::_sym_a2);
SMART_PTR_FIX(kw::_sym_bonds);
SMART_PTR_FIX(kw::_sym_atom);
SMART_PTR_FIX(kw::_sym_position);
SMART_PTR_FIX(kw::_sym_weight);
SMART_PTR_FIX(kw::_sym_atoms);
SMART_PTR_FIX(kw::_sym_k);
SMART_PTR_FIX(kw::_sym_title);
SMART_PTR_FIX(kw::_sym_ref);
SMART_PTR_FIX(kw::_sym_bondDistinctions);
SMART_PTR_FIX(kw::_sym_Info);
SMART_PTR_FIX(kw::_sym_Types);
SMART_PTR_FIX(kw::_sym_Stretches);
SMART_PTR_FIX(kw::_sym_Angles);
SMART_PTR_FIX(kw::_sym_Itors);
SMART_PTR_FIX(kw::_sym_Ptors);
SMART_PTR_FIX(kw::_sym_Nonbonds);
SMART_PTR_FIX(kw::_sym_Vdws);
SMART_PTR_FIX(chemkw::_sym_undefinedConfiguration);
SMART_PTR_FIX(chemkw::_sym_R);
SMART_PTR_FIX(chemkw::_sym_undefinedCenter);
SMART_PTR_FIX(chemkw::_sym_chiral);
SMART_PTR_FIX(chemkw::_sym_prochiral);
SMART_PTR_FIX(chemkw::_sym__singleBond);
SMART_PTR_FIX(chemkw::_sym__doubleBond);
SMART_PTR_FIX(chemkw::_sym__tripleBond);
SMART_PTR_FIX(chemkw::_sym__aromaticBond);
SMART_PTR_FIX(chemkw::_sym__hydrogenBond);
SMART_PTR_FIX(chemkw::_sym__virtualBond);
SMART_PTR_FIX(chemkw::_sym__dashedSingleBond);
SMART_PTR_FIX(chemkw::_sym__dashedDoubleBond);
SMART_PTR_FIX(chemkw::_sym_noBond);
SMART_PTR_FIX(chemkw::_sym_singleBond);
SMART_PTR_FIX(chemkw::_sym_doubleBond);
SMART_PTR_FIX(chemkw::_sym_tripleBond);
SMART_PTR_FIX(chemkw::_sym_aromaticBond);
SMART_PTR_FIX(chemkw::_sym_hydrogenBond);
SMART_PTR_FIX(chemkw::_sym_virtualBond);
SMART_PTR_FIX(chemkw::_sym_dashedSingleBond);
SMART_PTR_FIX(chemkw::_sym_dashedDoubleBond);
SMART_PTR_FIX(chemkw::_sym_C);
SMART_PTR_FIX(chemkw::_sym_N);
SMART_PTR_FIX(chemkw::_sym_O);
SMART_PTR_FIX(chemkw::_sym_S);
SMART_PTR_FIX(chemkw::_sym_P);
SMART_PTR_FIX(chemkw::_sym_F);
SMART_PTR_FIX(chemkw::_sym_Cl);
SMART_PTR_FIX(chemkw::_sym_Br);
SMART_PTR_FIX(chemkw::_sym_I);
SMART_PTR_FIX(chemkw::_sym_message);
SMART_PTR_FIX(chemkw::_sym_constitution);
SMART_PTR_FIX(chemkw::_sym_entity);
SMART_PTR_FIX(chemkw::_sym_frameRecognizer);
SMART_PTR_FIX(chemkw::_sym_E);
SMART_PTR_FIX(chemkw::_sym_Z);
SMART_PTR_FIX(chemkw::_sym_1);
SMART_PTR_FIX(chemkw::_sym_2);
SMART_PTR_FIX(chemkw::_sym_3);
SMART_PTR_FIX(chemkw::_sym_4);
SMART_PTR_FIX(chemkw::_sym_5);
SMART_PTR_FIX(chemkw::_sym_6);
SMART_PTR_FIX(chemkw::_sym_idle);
SMART_PTR_FIX(chemkw::_sym_translate);
SMART_PTR_FIX(chemkw::_sym_rotate);
SMART_PTR_FIX(chemkw::_sym_scale);
SMART_PTR_FIX(chemkw::_sym_XX);
SMART_PTR_FIX(chemkw::_sym_XA);
SMART_PTR_FIX(chemkw::_sym_XB);
SMART_PTR_FIX(chemkw::_sym_XC);
SMART_PTR_FIX(chemkw::_sym_XD);
SMART_PTR_FIX(chemkw::_sym_parameterized);
SMART_PTR_FIX(chemkw::_sym_estimated);
SMART_PTR_FIX(chemkw::_sym_rough);
SMART_PTR_FIX(units::_sym_NamedUnit_O);
SMART_PTR_FIX(units::_sym_meters);
SMART_PTR_FIX(units::_sym_kilometers);
SMART_PTR_FIX(units::_sym_millimeters);
SMART_PTR_FIX(units::_sym_micrometers);
SMART_PTR_FIX(units::_sym_nanometers);
SMART_PTR_FIX(units::_sym_picometers);
SMART_PTR_FIX(units::_sym_angstroms);
SMART_PTR_FIX(units::_sym_kilograms);
SMART_PTR_FIX(units::_sym_grams);
SMART_PTR_FIX(units::_sym_daltons);
SMART_PTR_FIX(units::_sym_seconds);
SMART_PTR_FIX(units::_sym_milliseconds);
SMART_PTR_FIX(units::_sym_microseconds);
SMART_PTR_FIX(units::_sym_nanoseconds);
SMART_PTR_FIX(units::_sym_picoseconds);
SMART_PTR_FIX(units::_sym_femtoseconds);
SMART_PTR_FIX(units::_sym_per_picosecond);
SMART_PTR_FIX(units::_sym_amperes);
SMART_PTR_FIX(units::_sym_coulomb);
SMART_PTR_FIX(units::_sym_elementaryCharge);
SMART_PTR_FIX(units::_sym_kelvin);
SMART_PTR_FIX(units::_sym_candelas);
SMART_PTR_FIX(units::_sym_moles);
SMART_PTR_FIX(units::_sym_Joule);
SMART_PTR_FIX(units::_sym_joule);
SMART_PTR_FIX(units::_sym_Joules);
SMART_PTR_FIX(units::_sym_joules);
SMART_PTR_FIX(units::_sym_kiloJoule);
SMART_PTR_FIX(units::_sym_kilojoule);
SMART_PTR_FIX(units::_sym_kiloJoules);
SMART_PTR_FIX(units::_sym_kilojoules);
SMART_PTR_FIX(units::_sym_kiloJoules_per_mole);
SMART_PTR_FIX(units::_sym_kilojoules_per_mole);
SMART_PTR_FIX(units::_sym_kiloCalories_per_mole);
SMART_PTR_FIX(units::_sym_kilocalories_per_mole);
SMART_PTR_FIX(units::_sym_nm_per_ps);
SMART_PTR_FIX(units::_sym_Dimension_O);
SMART_PTR_FIX(units::_sym_Unit_O);
SMART_PTR_FIX(units::_sym_Quantity_O);
SMART_PTR_FIX(clos::_sym_compute_applicable_methods_using_classes);
SMART_PTR_FIX(clos::_sym_compute_effective_method_function);
SMART_PTR_FIX(clos::_sym_std_compute_applicable_methods);
SMART_PTR_FIX(clos::_sym_std_compute_effective_method);
SMART_PTR_FIX(clos::_sym_clearGfunHash);
SMART_PTR_FIX(clos::_sym_setFuncallableInstanceFunction);
SMART_PTR_FIX(clos::_sym_standardOptimizedReaderMethod);
SMART_PTR_FIX(clos::_sym_standardOptimizedWriterMethod);
SMART_PTR_FIX(clos::_sym_standardOptimizedReaderFunction);
SMART_PTR_FIX(clos::_sym_standardOptimizedWriterFunction);
SMART_PTR_FIX(clos::_sym_classp);
SMART_PTR_FIX(clos::_sym_aSingleClosSymbol);
SMART_PTR_FIX(clos::_sym_class_precedence_list);
SMART_PTR_FIX(clos::_sym_StdClass_O);
SMART_PTR_FIX(clos::_sym_FuncallableStandardClass_O);
SMART_PTR_FIX(clbind::_sym_STARtheClassRegistrySTAR);
SMART_PTR_FIX(clbind::_sym_ClassRegistry_O);
SMART_PTR_FIX(clbind::_sym_ClassRep_O);
SMART_PTR_FIX(llvmo::_sym_dwTag);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion11);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion10);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion9);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion8);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion7);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion6);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion5);
SMART_PTR_FIX(llvmo::_sym_LLVMDebugVersion4);
SMART_PTR_FIX(llvmo::_sym__PLUS_DebugMetadataVersion_PLUS_);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_array_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_class_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_entry_point);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_enumeration_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_formal_parameter);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_declaration);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_label);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_lexical_block);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_member);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_pointer_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_reference_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_compile_unit);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_string_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_structure_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_subroutine_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_typedef);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_union_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_unspecified_parameters);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_variant);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_common_block);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_common_inclusion);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_inheritance);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_inlined_subroutine);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_module);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_ptr_to_member_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_set_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_subrange_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_with_stmt);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_access_declaration);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_base_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_catch_block);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_const_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_constant);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_enumerator);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_file_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_friend);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_namelist);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_namelist_item);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_packed_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_subprogram);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_type_parameter);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_value_parameter);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_thrown_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_try_block);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_variant_part);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_variable);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_volatile_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_dwarf_procedure);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_restrict_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_interface_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_namespace);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_module);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_unspecified_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_partial_unit);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_imported_unit);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_condition);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_shared_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_type_unit);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_rvalue_reference_type);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_template_alias);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_MIPS_loop);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_format_label);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_function_template);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_class_template);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_template_template_param);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_template_parameter_pack);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_GNU_formal_parameter_pack);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_lo_user);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_APPLE_property);
SMART_PTR_FIX(llvmo::_sym_DW_TAG_hi_user);
SMART_PTR_FIX(llvmo::_sym_STARdwarfConstantsSTAR);
SMART_PTR_FIX(llvmo::_sym_DW_LANG_COMMON_LISP);
SMART_PTR_FIX(llvmo::_sym_DW_LANG_C);
SMART_PTR_FIX(llvmo::_sym_DW_LANG_C_plus_plus);
SMART_PTR_FIX(llvmo::_sym__PLUS_DW_ATE_SIGNED_FIXED_PLUS_);
SMART_PTR_FIX(llvmo::_sym_STARaSTAR);
SMART_PTR_FIX(llvmo::_sym_CodeGenFileType);
SMART_PTR_FIX(llvmo::_sym_CodeGenFileType_Null);
SMART_PTR_FIX(llvmo::_sym_CodeGenFileType_AssemblyFile);
SMART_PTR_FIX(llvmo::_sym_CodeGenFileType_ObjectFile);
SMART_PTR_FIX(llvmo::_sym_CodeGenOpt);
SMART_PTR_FIX(llvmo::_sym_CodeGenOpt_None);
SMART_PTR_FIX(llvmo::_sym_CodeGenOpt_Less);
SMART_PTR_FIX(llvmo::_sym_CodeGenOpt_Default);
SMART_PTR_FIX(llvmo::_sym_CodeGenOpt_Aggressive);
SMART_PTR_FIX(llvmo::_sym_RelocModel);
SMART_PTR_FIX(llvmo::_sym_RelocModel_Default);
SMART_PTR_FIX(llvmo::_sym_RelocModel_Static);
SMART_PTR_FIX(llvmo::_sym_RelocModel_PIC_);
SMART_PTR_FIX(llvmo::_sym_RelocModel_DynamicNoPIC);
SMART_PTR_FIX(llvmo::_sym_CodeModel);
SMART_PTR_FIX(llvmo::_sym_CodeModel_Default);
SMART_PTR_FIX(llvmo::_sym_CodeModel_JITDefault);
SMART_PTR_FIX(llvmo::_sym_CodeModel_Small);
SMART_PTR_FIX(llvmo::_sym_CodeModel_Kernel);
SMART_PTR_FIX(llvmo::_sym_CodeModel_Medium);
SMART_PTR_FIX(llvmo::_sym_CodeModel_Large);
SMART_PTR_FIX(llvmo::_sym_ArchType);
SMART_PTR_FIX(llvmo::_sym_ArchType_UnknownArch);
SMART_PTR_FIX(llvmo::_sym_ArchType_arm);
SMART_PTR_FIX(llvmo::_sym_ArchType_armeb);
SMART_PTR_FIX(llvmo::_sym_ArchType_aarch64);
SMART_PTR_FIX(llvmo::_sym_ArchType_aarch64_be);
SMART_PTR_FIX(llvmo::_sym_ArchType_hexagon);
SMART_PTR_FIX(llvmo::_sym_ArchType_mips);
SMART_PTR_FIX(llvmo::_sym_ArchType_mipsel);
SMART_PTR_FIX(llvmo::_sym_ArchType_mips64);
SMART_PTR_FIX(llvmo::_sym_ArchType_mips64el);
SMART_PTR_FIX(llvmo::_sym_ArchType_msp430);
SMART_PTR_FIX(llvmo::_sym_ArchType_ppc);
SMART_PTR_FIX(llvmo::_sym_ArchType_ppc64);
SMART_PTR_FIX(llvmo::_sym_ArchType_ppc64le);
SMART_PTR_FIX(llvmo::_sym_ArchType_r600);
SMART_PTR_FIX(llvmo::_sym_ArchType_sparc);
SMART_PTR_FIX(llvmo::_sym_ArchType_sparcv9);
SMART_PTR_FIX(llvmo::_sym_ArchType_systemz);
SMART_PTR_FIX(llvmo::_sym_ArchType_tce);
SMART_PTR_FIX(llvmo::_sym_ArchType_thumb);
SMART_PTR_FIX(llvmo::_sym_ArchType_thumbeb);
SMART_PTR_FIX(llvmo::_sym_ArchType_x86);
SMART_PTR_FIX(llvmo::_sym_ArchType_x86_64);
SMART_PTR_FIX(llvmo::_sym_ArchType_xcore);
SMART_PTR_FIX(llvmo::_sym_ArchType_nvptx);
SMART_PTR_FIX(llvmo::_sym_ArchType_nvptx64);
SMART_PTR_FIX(llvmo::_sym_ArchType_le32);
SMART_PTR_FIX(llvmo::_sym_ArchType_le64);
SMART_PTR_FIX(llvmo::_sym_ArchType_amdil);
SMART_PTR_FIX(llvmo::_sym_ArchType_amdil64);
SMART_PTR_FIX(llvmo::_sym_ArchType_hsail);
SMART_PTR_FIX(llvmo::_sym_ArchType_hsail64);
SMART_PTR_FIX(llvmo::_sym_ArchType_spir);
SMART_PTR_FIX(llvmo::_sym_ArchType_spir64);
SMART_PTR_FIX(llvmo::_sym_ArchType_kalimba);
SMART_PTR_FIX(llvmo::_sym_SubArchType_NoSubArch);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v8);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v7);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v7em);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v7m);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v7s);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v6);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v6m);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v6t2);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v5);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v5te);
SMART_PTR_FIX(llvmo::_sym_SubArchType_ARMSubArch_v4t);
SMART_PTR_FIX(llvmo::_sym_SubArchType_KalimbaSubArch_v3);
SMART_PTR_FIX(llvmo::_sym_SubArchType_KalimbaSubArch_v4);
SMART_PTR_FIX(llvmo::_sym_SubArchType_KalimbaSubArch_v5);
SMART_PTR_FIX(llvmo::_sym_SubArchType);
SMART_PTR_FIX(llvmo::_sym_VendorType_UnknownVendor);
SMART_PTR_FIX(llvmo::_sym_VendorType_Apple);
SMART_PTR_FIX(llvmo::_sym_VendorType_PC);
SMART_PTR_FIX(llvmo::_sym_VendorType_SCEI);
SMART_PTR_FIX(llvmo::_sym_VendorType_BGP);
SMART_PTR_FIX(llvmo::_sym_VendorType_BGQ);
SMART_PTR_FIX(llvmo::_sym_VendorType_Freescale);
SMART_PTR_FIX(llvmo::_sym_VendorType_IBM);
SMART_PTR_FIX(llvmo::_sym_VendorType_ImaginationTechnologies);
SMART_PTR_FIX(llvmo::_sym_VendorType_MipsTechnologies);
SMART_PTR_FIX(llvmo::_sym_VendorType_NVIDIA);
SMART_PTR_FIX(llvmo::_sym_VendorType_CSR);
SMART_PTR_FIX(llvmo::_sym_VendorType);
SMART_PTR_FIX(llvmo::_sym_OSType_UnknownOS);
SMART_PTR_FIX(llvmo::_sym_OSType_Darwin);
SMART_PTR_FIX(llvmo::_sym_OSType_DragonFly);
SMART_PTR_FIX(llvmo::_sym_OSType_FreeBSD);
SMART_PTR_FIX(llvmo::_sym_OSType_IOS);
SMART_PTR_FIX(llvmo::_sym_OSType_KFreeBSD);
SMART_PTR_FIX(llvmo::_sym_OSType_Linux);
SMART_PTR_FIX(llvmo::_sym_OSType_Lv2);
SMART_PTR_FIX(llvmo::_sym_OSType_MacOSX);
SMART_PTR_FIX(llvmo::_sym_OSType_NetBSD);
SMART_PTR_FIX(llvmo::_sym_OSType_OpenBSD);
SMART_PTR_FIX(llvmo::_sym_OSType_Solaris);
SMART_PTR_FIX(llvmo::_sym_OSType_Win32);
SMART_PTR_FIX(llvmo::_sym_OSType_Haiku);
SMART_PTR_FIX(llvmo::_sym_OSType_Minix);
SMART_PTR_FIX(llvmo::_sym_OSType_RTEMS);
SMART_PTR_FIX(llvmo::_sym_OSType_NaCl);
SMART_PTR_FIX(llvmo::_sym_OSType_CNK);
SMART_PTR_FIX(llvmo::_sym_OSType_Bitrig);
SMART_PTR_FIX(llvmo::_sym_OSType_AIX);
SMART_PTR_FIX(llvmo::_sym_OSType_CUDA);
SMART_PTR_FIX(llvmo::_sym_OSType_NVCL);
SMART_PTR_FIX(llvmo::_sym_OSType);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_UnknownEnvironment);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_GNU);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_GNUEABI);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_GNUEABIHF);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_GNUX32);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_CODE16);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_EABI);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_EABIHF);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_Android);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_MSVC);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_Itanium);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType_Cygnus);
SMART_PTR_FIX(llvmo::_sym_EnvironmentType);
SMART_PTR_FIX(llvmo::_sym_ObjectFormatType_UnknownObjectFormat);
SMART_PTR_FIX(llvmo::_sym_ObjectFormatType_COFF);
SMART_PTR_FIX(llvmo::_sym_ObjectFormatType_ELF);
SMART_PTR_FIX(llvmo::_sym_ObjectFormatType_MachO);
SMART_PTR_FIX(llvmo::_sym_ObjectFormatType);
SMART_PTR_FIX(llvmo::_sym_AttributeNone);
SMART_PTR_FIX(llvmo::_sym_AttributeZExt);
SMART_PTR_FIX(llvmo::_sym_AttributeSExt);
SMART_PTR_FIX(llvmo::_sym_AttributeNoReturn);
SMART_PTR_FIX(llvmo::_sym_AttributeInReg);
SMART_PTR_FIX(llvmo::_sym_AttributeStructRet);
SMART_PTR_FIX(llvmo::_sym_AttributeNoUnwind);
SMART_PTR_FIX(llvmo::_sym_AttributeNoAlias);
SMART_PTR_FIX(llvmo::_sym_AttributeByVal);
SMART_PTR_FIX(llvmo::_sym_AttributeNest);
SMART_PTR_FIX(llvmo::_sym_AttributeReadNone);
SMART_PTR_FIX(llvmo::_sym_AttributeReadOnly);
SMART_PTR_FIX(llvmo::_sym_AttributeNoInline);
SMART_PTR_FIX(llvmo::_sym_AttributeAlwaysInline);
SMART_PTR_FIX(llvmo::_sym_AttributeOptimizeForSize);
SMART_PTR_FIX(llvmo::_sym_AttributeStackProtect);
SMART_PTR_FIX(llvmo::_sym_AttributeStackProtectReq);
SMART_PTR_FIX(llvmo::_sym_AttributeAlignment);
SMART_PTR_FIX(llvmo::_sym_AttributeNoCapture);
SMART_PTR_FIX(llvmo::_sym_AttributeNoRedZone);
SMART_PTR_FIX(llvmo::_sym_AttributeNoImplicitFloat);
SMART_PTR_FIX(llvmo::_sym_AttributeNaked);
SMART_PTR_FIX(llvmo::_sym_AttributeInlineHint);
SMART_PTR_FIX(llvmo::_sym_AttributeStackAlignment);
SMART_PTR_FIX(llvmo::_sym_AttributeReturnsTwice);
SMART_PTR_FIX(llvmo::_sym_AttributeUWTable);
SMART_PTR_FIX(llvmo::_sym_AttributeNonLazyBind);
SMART_PTR_FIX(llvmo::_sym_AttributeAddressSafety);
SMART_PTR_FIX(llvmo::_sym_AttributeEnum);
SMART_PTR_FIX(llvmo::_sym_attributesGet);
SMART_PTR_FIX(llvmo::_sym_verifyModule);
SMART_PTR_FIX(llvmo::_sym_module_get_function_list);
SMART_PTR_FIX(llvmo::_sym_STARmoduleModFlagBehaviorSTAR);
SMART_PTR_FIX(llvmo::_sym_moduleFlagError);
SMART_PTR_FIX(llvmo::_sym_moduleFlagWarning);
SMART_PTR_FIX(llvmo::_sym_moduleFlagRequire);
SMART_PTR_FIX(llvmo::_sym_moduleFlagOverride);
SMART_PTR_FIX(llvmo::_sym_moduleFlagAppend);
SMART_PTR_FIX(llvmo::_sym_moduleFlagAppendUnique);
SMART_PTR_FIX(llvmo::_sym_interpreter);
SMART_PTR_FIX(llvmo::_sym_jit);
SMART_PTR_FIX(llvmo::_sym_makeAPInt1);
SMART_PTR_FIX(llvmo::_sym_makeAPInt);
SMART_PTR_FIX(llvmo::_sym_makeAPWidth);
SMART_PTR_FIX(llvmo::_sym_makeAP32);
SMART_PTR_FIX(llvmo::_sym_makeAP64);
SMART_PTR_FIX(llvmo::_sym_mdnodeGet);
SMART_PTR_FIX(llvmo::_sym_ValueAsMetadataGet);
SMART_PTR_FIX(llvmo::_sym_STARglobal_value_linkage_typesSTAR);
SMART_PTR_FIX(llvmo::_sym_ExternalLinkage);
SMART_PTR_FIX(llvmo::_sym_AvailableExternallyLinkage);
SMART_PTR_FIX(llvmo::_sym_LinkOnceAnyLinkage);
SMART_PTR_FIX(llvmo::_sym_LinkOnceODRLinkage);
SMART_PTR_FIX(llvmo::_sym_LinkOnceODRAutoHideLinkage);
SMART_PTR_FIX(llvmo::_sym_WeakAnyLinkage);
SMART_PTR_FIX(llvmo::_sym_WeakODRLinkage);
SMART_PTR_FIX(llvmo::_sym_AppendingLinkage);
SMART_PTR_FIX(llvmo::_sym_InternalLinkage);
SMART_PTR_FIX(llvmo::_sym_PrivateLinkage);
SMART_PTR_FIX(llvmo::_sym_LinkerPrivateLinkage);
SMART_PTR_FIX(llvmo::_sym_LinkerPrivateWeakLinkage);
SMART_PTR_FIX(llvmo::_sym_DLLImportLinkage);
SMART_PTR_FIX(llvmo::_sym_DLLExportLinkage);
SMART_PTR_FIX(llvmo::_sym_ExternalWeakLinkage);
SMART_PTR_FIX(llvmo::_sym_CommonLinkage);
SMART_PTR_FIX(llvmo::_sym_STARglobal_ThreadLocalModesSTAR);
SMART_PTR_FIX(llvmo::_sym_NotThreadLocal);
SMART_PTR_FIX(llvmo::_sym_GeneralDynamicTLSModel);
SMART_PTR_FIX(llvmo::_sym_LocalDynamicTLSModel);
SMART_PTR_FIX(llvmo::_sym_InitialExecTLSModel);
SMART_PTR_FIX(llvmo::_sym_LocalExecTLSModel);
SMART_PTR_FIX(llvmo::_sym_verifyFunction);
SMART_PTR_FIX(llvmo::_sym_STARatomic_orderingSTAR);
SMART_PTR_FIX(llvmo::_sym_NotAtomic);
SMART_PTR_FIX(llvmo::_sym_Unordered);
SMART_PTR_FIX(llvmo::_sym_Monotonic);
SMART_PTR_FIX(llvmo::_sym_Acquire);
SMART_PTR_FIX(llvmo::_sym_Release);
SMART_PTR_FIX(llvmo::_sym_AquireRelease);
SMART_PTR_FIX(llvmo::_sym_SequentiallyConsistent);
SMART_PTR_FIX(llvmo::_sym_STARsynchronization_scopeSTAR);
SMART_PTR_FIX(llvmo::_sym_SingleThread);
SMART_PTR_FIX(llvmo::_sym_CrossThread);
SMART_PTR_FIX(llvmo::_sym_STARAtomicRMWInstBinOpSTAR);
SMART_PTR_FIX(llvmo::_sym_Xchg);
SMART_PTR_FIX(llvmo::_sym_Nand);
SMART_PTR_FIX(llvmo::_sym_Max);
SMART_PTR_FIX(llvmo::_sym_Min);
SMART_PTR_FIX(llvmo::_sym_UMax);
SMART_PTR_FIX(llvmo::_sym_UMin);
SMART_PTR_FIX(llvmo::_sym_Add);
SMART_PTR_FIX(llvmo::_sym_FAdd);
SMART_PTR_FIX(llvmo::_sym_Sub);
SMART_PTR_FIX(llvmo::_sym_FSub);
SMART_PTR_FIX(llvmo::_sym_Mul);
SMART_PTR_FIX(llvmo::_sym_FMul);
SMART_PTR_FIX(llvmo::_sym_UDiv);
SMART_PTR_FIX(llvmo::_sym_SDiv);
SMART_PTR_FIX(llvmo::_sym_FDiv);
SMART_PTR_FIX(llvmo::_sym_URem);
SMART_PTR_FIX(llvmo::_sym_SRem);
SMART_PTR_FIX(llvmo::_sym_FRem);
SMART_PTR_FIX(llvmo::_sym_Shl);
SMART_PTR_FIX(llvmo::_sym_LShr);
SMART_PTR_FIX(llvmo::_sym_AShr);
SMART_PTR_FIX(llvmo::_sym_And);
SMART_PTR_FIX(llvmo::_sym_Or);
SMART_PTR_FIX(llvmo::_sym_Xor);
SMART_PTR_FIX(llvmo::_sym_STARBinaryOpsSTAR);
SMART_PTR_FIX(llvmo::_sym_Trunc);
SMART_PTR_FIX(llvmo::_sym_ZExt);
SMART_PTR_FIX(llvmo::_sym_SExt);
SMART_PTR_FIX(llvmo::_sym_FPToUI);
SMART_PTR_FIX(llvmo::_sym_FPToSI);
SMART_PTR_FIX(llvmo::_sym_UIToFP);
SMART_PTR_FIX(llvmo::_sym_SIToFP);
SMART_PTR_FIX(llvmo::_sym_FPTrunc);
SMART_PTR_FIX(llvmo::_sym_FPExt);
SMART_PTR_FIX(llvmo::_sym_PtrToInt);
SMART_PTR_FIX(llvmo::_sym_IntToPtr);
SMART_PTR_FIX(llvmo::_sym_BitCast);
SMART_PTR_FIX(llvmo::_sym_STARInstructionCastOpsSTAR);
SMART_PTR_FIX(llvmo::_sym_FCMP_FALSE);
SMART_PTR_FIX(llvmo::_sym_FCMP_OEQ);
SMART_PTR_FIX(llvmo::_sym_FCMP_OGT);
SMART_PTR_FIX(llvmo::_sym_FCMP_OGE);
SMART_PTR_FIX(llvmo::_sym_FCMP_OLT);
SMART_PTR_FIX(llvmo::_sym_FCMP_OLE);
SMART_PTR_FIX(llvmo::_sym_FCMP_ONE);
SMART_PTR_FIX(llvmo::_sym_FCMP_ORD);
SMART_PTR_FIX(llvmo::_sym_FCMP_UNO);
SMART_PTR_FIX(llvmo::_sym_FCMP_UEQ);
SMART_PTR_FIX(llvmo::_sym_FCMP_UGT);
SMART_PTR_FIX(llvmo::_sym_FCMP_UGE);
SMART_PTR_FIX(llvmo::_sym_FCMP_ULT);
SMART_PTR_FIX(llvmo::_sym_FCMP_ULE);
SMART_PTR_FIX(llvmo::_sym_FCMP_UNE);
SMART_PTR_FIX(llvmo::_sym_FCMP_TRUE);
SMART_PTR_FIX(llvmo::_sym_FIRST_FCMP_PREDICATE);
SMART_PTR_FIX(llvmo::_sym_FCMP_PREDICATE);
SMART_PTR_FIX(llvmo::_sym_ICMP_EQ);
SMART_PTR_FIX(llvmo::_sym_ICMP_NE);
SMART_PTR_FIX(llvmo::_sym_ICMP_UGT);
SMART_PTR_FIX(llvmo::_sym_ICMP_UGE);
SMART_PTR_FIX(llvmo::_sym_ICMP_ULT);
SMART_PTR_FIX(llvmo::_sym_ICMP_ULE);
SMART_PTR_FIX(llvmo::_sym_ICMP_SGT);
SMART_PTR_FIX(llvmo::_sym_ICMP_SGE);
SMART_PTR_FIX(llvmo::_sym_ICMP_SLT);
SMART_PTR_FIX(llvmo::_sym_ICMP_SLE);
SMART_PTR_FIX(llvmo::_sym_STARCmpInstPredicateSTAR);
SMART_PTR_FIX(llvmo::_sym_valid);
SMART_PTR_FIX(llvmo::_sym_makeStringGlobal);
SMART_PTR_FIX(llvmo::_sym_valuep);
SMART_PTR_FIX(llvmo::_sym_parseBitcodeFile);
SMART_PTR_FIX(llvmo::_sym_writeBitcodeToFile);
SMART_PTR_FIX(llvmo::_sym_writeIrToFile);
SMART_PTR_FIX(llvmo::_sym_llvm_value_p);
SMART_PTR_FIX(llvmo::_sym_STARmostRecentLlvmFinalizationTimeSTAR);
SMART_PTR_FIX(llvmo::_sym_STARaccumulatedLlvmFinalizationTimeSTAR);
SMART_PTR_FIX(llvmo::_sym_STARnumberOfLlvmFinalizationsSTAR);
SMART_PTR_FIX(llvmo::_sym_STARrunTimeExecutionEngineSTAR);
SMART_PTR_FIX(llvmo::_sym_getOrCreateExternalGlobal);
SMART_PTR_FIX(llvmo::_sym_disassembleSTAR);
SMART_PTR_FIX(llvmo::_sym_throwIfMismatchedStructureSizes);
SMART_PTR_FIX(llvmo::_sym__PLUS_ClaspMainFunctionName_PLUS_);
SMART_PTR_FIX(llvmo::_sym__PLUS_globalBootFunctionsName_PLUS_);
SMART_PTR_FIX(llvmo::_sym__PLUS_globalBootFunctionsNameSize_PLUS_);
SMART_PTR_FIX(llvmo::_sym_LLVMContext_O);
SMART_PTR_FIX(llvmo::_sym_Linker_O);
SMART_PTR_FIX(llvmo::_sym_Pass_O);
SMART_PTR_FIX(llvmo::_sym_AttributeSet_O);
SMART_PTR_FIX(llvmo::_sym_Triple_O);
SMART_PTR_FIX(llvmo::_sym_TargetOptions_O);
SMART_PTR_FIX(llvmo::_sym_Target_O);
SMART_PTR_FIX(llvmo::_sym_MCSubtargetInfo_O);
SMART_PTR_FIX(llvmo::_sym_TargetSubtargetInfo_O);
SMART_PTR_FIX(llvmo::_sym_TargetMachine_O);
SMART_PTR_FIX(llvmo::_sym_LLVMTargetMachine_O);
SMART_PTR_FIX(llvmo::_sym_FunctionPass_O);
SMART_PTR_FIX(llvmo::_sym_ModulePass_O);
SMART_PTR_FIX(llvmo::_sym_ImmutablePass_O);
SMART_PTR_FIX(llvmo::_sym_PassManagerBase_O);
SMART_PTR_FIX(llvmo::_sym_Value_O);
SMART_PTR_FIX(llvmo::_sym_Metadata_O);
SMART_PTR_FIX(llvmo::_sym_User_O);
SMART_PTR_FIX(llvmo::_sym_Attribute_O);
SMART_PTR_FIX(llvmo::_sym_DataLayout_O);
SMART_PTR_FIX(llvmo::_sym_Constant_O);
SMART_PTR_FIX(llvmo::_sym_ConstantArray_O);
SMART_PTR_FIX(llvmo::_sym_BlockAddress_O);
SMART_PTR_FIX(llvmo::_sym_ConstantDataSequential_O);
SMART_PTR_FIX(llvmo::_sym_ConstantDataArray_O);
SMART_PTR_FIX(llvmo::_sym_ConstantExpr_O);
SMART_PTR_FIX(llvmo::_sym_GlobalValue_O);
SMART_PTR_FIX(llvmo::_sym_GlobalVariable_O);
SMART_PTR_FIX(llvmo::_sym_ExecutionEngine_O);
SMART_PTR_FIX(llvmo::_sym_Module_O);
SMART_PTR_FIX(llvmo::_sym_DataLayoutPass_O);
SMART_PTR_FIX(llvmo::_sym_TargetLibraryInfo_O);
SMART_PTR_FIX(llvmo::_sym_FunctionPassManager_O);
SMART_PTR_FIX(llvmo::_sym_PassManager_O);
SMART_PTR_FIX(llvmo::_sym_EngineBuilder_O);
SMART_PTR_FIX(llvmo::_sym_PassManagerBuilder_O);
SMART_PTR_FIX(llvmo::_sym_APFloat_O);
SMART_PTR_FIX(llvmo::_sym_APInt_O);
SMART_PTR_FIX(llvmo::_sym_IRBuilderBase_O);
SMART_PTR_FIX(llvmo::_sym_IRBuilder_O);
SMART_PTR_FIX(llvmo::_sym_Instruction_O);
SMART_PTR_FIX(llvmo::_sym_StoreInst_O);
SMART_PTR_FIX(llvmo::_sym_FenceInst_O);
SMART_PTR_FIX(llvmo::_sym_AtomicCmpXchgInst_O);
SMART_PTR_FIX(llvmo::_sym_AtomicRMWInst_O);
SMART_PTR_FIX(llvmo::_sym_PHINode_O);
SMART_PTR_FIX(llvmo::_sym_CallInst_O);
SMART_PTR_FIX(llvmo::_sym_LandingPadInst_O);
SMART_PTR_FIX(llvmo::_sym_UnaryInstruction_O);
SMART_PTR_FIX(llvmo::_sym_AllocaInst_O);
SMART_PTR_FIX(llvmo::_sym_VAArgInst_O);
SMART_PTR_FIX(llvmo::_sym_LoadInst_O);
SMART_PTR_FIX(llvmo::_sym_TerminatorInst_O);
SMART_PTR_FIX(llvmo::_sym_BranchInst_O);
SMART_PTR_FIX(llvmo::_sym_SwitchInst_O);
SMART_PTR_FIX(llvmo::_sym_IndirectBrInst_O);
SMART_PTR_FIX(llvmo::_sym_InvokeInst_O);
SMART_PTR_FIX(llvmo::_sym_ResumeInst_O);
SMART_PTR_FIX(llvmo::_sym_UnreachableInst_O);
SMART_PTR_FIX(llvmo::_sym_ReturnInst_O);
SMART_PTR_FIX(llvmo::_sym_ConstantFP_O);
SMART_PTR_FIX(llvmo::_sym_ConstantInt_O);
SMART_PTR_FIX(llvmo::_sym_ConstantStruct_O);
SMART_PTR_FIX(llvmo::_sym_UndefValue_O);
SMART_PTR_FIX(llvmo::_sym_ConstantPointerNull_O);
SMART_PTR_FIX(llvmo::_sym_MDNode_O);
SMART_PTR_FIX(llvmo::_sym_MDString_O);
SMART_PTR_FIX(llvmo::_sym_ValueAsMetadata_O);
SMART_PTR_FIX(llvmo::_sym_NamedMDNode_O);
SMART_PTR_FIX(llvmo::_sym_Function_O);
SMART_PTR_FIX(llvmo::_sym_BasicBlock_O);
SMART_PTR_FIX(llvmo::_sym_Argument_O);
SMART_PTR_FIX(llvmo::_sym_Type_O);
SMART_PTR_FIX(llvmo::_sym_FunctionType_O);
SMART_PTR_FIX(llvmo::_sym_IntegerType_O);
SMART_PTR_FIX(llvmo::_sym_CompositeType_O);
SMART_PTR_FIX(llvmo::_sym_StructType_O);
SMART_PTR_FIX(llvmo::_sym_SequentialType_O);
SMART_PTR_FIX(llvmo::_sym_PointerType_O);
SMART_PTR_FIX(llvmo::_sym_ArrayType_O);
SMART_PTR_FIX(llvmo::_sym_VectorType_O);
SMART_PTR_FIX(llvmo::_sym_DebugInfo_O);
SMART_PTR_FIX(llvmo::_sym_DIDescriptor_O);
SMART_PTR_FIX(llvmo::_sym_DIScope_O);
SMART_PTR_FIX(llvmo::_sym_DIArray_O);
SMART_PTR_FIX(llvmo::_sym_DITypeArray_O);
SMART_PTR_FIX(llvmo::_sym_DIFile_O);
SMART_PTR_FIX(llvmo::_sym_DISubprogram_O);
SMART_PTR_FIX(llvmo::_sym_DIType_O);
SMART_PTR_FIX(llvmo::_sym_DIDerivedType_O);
SMART_PTR_FIX(llvmo::_sym_DIBasicType_O);
SMART_PTR_FIX(llvmo::_sym_DICompositeType_O);
SMART_PTR_FIX(llvmo::_sym_DISubroutineType_O);
SMART_PTR_FIX(llvmo::_sym_DILexicalBlock_O);
SMART_PTR_FIX(llvmo::_sym_DICompileUnit_O);
SMART_PTR_FIX(llvmo::_sym_DIBuilder_O);
SMART_PTR_FIX(llvmo::_sym_DebugLoc_O);
SMART_PTR_FIX(llvmo::_sym_InsertPoint_O);
SMART_PTR_FIX(cffi::_sym_char);
SMART_PTR_FIX(cffi::_sym_unsigned_char);
SMART_PTR_FIX(cffi::_sym_short);
SMART_PTR_FIX(cffi::_sym_unsigned_short);
SMART_PTR_FIX(cffi::_sym_int);
SMART_PTR_FIX(cffi::_sym_unsigned_int);
SMART_PTR_FIX(cffi::_sym_long);
SMART_PTR_FIX(cffi::_sym_unsigned_long);
SMART_PTR_FIX(cffi::_sym_long_long);
SMART_PTR_FIX(cffi::_sym_unsigned_long_long);
SMART_PTR_FIX(cffi::_sym_int8);
SMART_PTR_FIX(cffi::_sym_uint8);
SMART_PTR_FIX(cffi::_sym_int16);
SMART_PTR_FIX(cffi::_sym_uint16);
SMART_PTR_FIX(cffi::_sym_int32);
SMART_PTR_FIX(cffi::_sym_uint32);
SMART_PTR_FIX(cffi::_sym_int64);
SMART_PTR_FIX(cffi::_sym_uint64);
SMART_PTR_FIX(cffi::_sym_size);
SMART_PTR_FIX(cffi::_sym_ssize);
SMART_PTR_FIX(cffi::_sym_ptrdiff);
SMART_PTR_FIX(cffi::_sym_time);
SMART_PTR_FIX(cffi::_sym_float);
SMART_PTR_FIX(cffi::_sym_double);
SMART_PTR_FIX(cffi::_sym_pointer);
SMART_PTR_FIX(cffi::_sym_void);
SMART_PTR_FIX(cffi::_sym_PERCENTmem_ref);
SMART_PTR_FIX(cffi::_sym_PERCENTsetf_mem_ref);
SMART_PTR_FIX(cffi::_sym_PERCENTforeign_type_alignment);
SMART_PTR_FIX(cffi::_sym_PERCENTforeign_type_size);
SMART_PTR_FIX(cffi::_sym_foreign_alloc);
SMART_PTR_FIX(cffi::_sym_foreign_symbol_pointer);
SMART_PTR_FIX(cffi::_sym_PERCENTload_foreign_library);
SMART_PTR_FIX(cffi::_sym_Pointer_O);
SMART_PTR_FIX(asttooling::_sym_STARclangTemplateSpecializationKindSTAR);
SMART_PTR_FIX(asttooling::_sym_STARclangTemplateArgumentArgKindSTAR);
SMART_PTR_FIX(asttooling::_sym_ArgumentsAdjusterAdjust);
SMART_PTR_FIX(asttooling::_sym_bind);
SMART_PTR_FIX(asttooling::_sym_VisitStmt);
SMART_PTR_FIX(asttooling::_sym_VisitDecl);
SMART_PTR_FIX(asttooling::_sym_VisitType);
SMART_PTR_FIX(asttooling::_sym_HandleTranslationUnit);
SMART_PTR_FIX(asttooling::_sym_CreateASTConsumer);
SMART_PTR_FIX(asttooling::_sym_create);
SMART_PTR_FIX(asttooling::_sym_run);
SMART_PTR_FIX(asttooling::_sym_onStartOfTranslationUnit);
SMART_PTR_FIX(asttooling::_sym_onEndOfTranslationUnit);
SMART_PTR_FIX(asttooling::_sym_AstVisitor_O);
SMART_PTR_FIX(serveEvent::_sym__PLUS_EINTR_PLUS_);
SMART_PTR_FIX(serveEvent::_sym_ll_fd_zero);
SMART_PTR_FIX(serveEvent::_sym_ll_fd_set);
SMART_PTR_FIX(serveEvent::_sym_ll_fd_isset);
SMART_PTR_FIX(serveEvent::_sym_ll_fdset_size);
SMART_PTR_FIX(serveEvent::_sym_ll_serveEventNoTimeout);
SMART_PTR_FIX(serveEvent::_sym_ll_serveEventWithTimeout);
SMART_PTR_FIX(sockets::_sym__PLUS_af_inet_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_af_local_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_sock_dgram_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_sock_stream_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_clasp_stream_mode_input_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_clasp_stream_mode_output_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_clasp_stream_mode_io_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EADDRINUSE_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EAGAIN_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EBADF_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ECONNREFUSED_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ETIMEDOUT_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EINTR_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EINVAL_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ENOBUFS_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ENOMEM_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EOPNOTSUPP_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EPERM_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_EPROTONOSUPPORT_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ESOCKTNOSUPPORT_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_ENETUNREACH_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_NETDB_INTERNAL_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_NETDB_SUCCESS_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_HOST_NOT_FOUND_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_TRY_AGAIN_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_NO_RECOVERY_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_NO_ADDRESS_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SOL_SOCKET_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_IPPROTO_TCP_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_TYPE_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_RCVBUF_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_RCVTIMEO_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_SNDTIMEO_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_REUSEADDR_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_KEEPALIVE_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_DONTROUTE_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_LINGER_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_SO_REUSEPORT_PLUS_);
SMART_PTR_FIX(sockets::_sym__PLUS_TCP_NODELAY_PLUS_);
SMART_PTR_FIX(sockets::_sym_ff_socket);
SMART_PTR_FIX(sockets::_sym_ff_listen);
SMART_PTR_FIX(sockets::_sym_ff_close);
SMART_PTR_FIX(sockets::_sym_ll_get_name_service_h_errno);
SMART_PTR_FIX(sockets::_sym_ll_socket_errno);
SMART_PTR_FIX(sockets::_sym_ll_getNameServiceErrorMessage);
SMART_PTR_FIX(sockets::_sym_ll_getHostByName);
SMART_PTR_FIX(sockets::_sym_ll_getHostByAddress);
SMART_PTR_FIX(sockets::_sym_ll_socketReceive);
SMART_PTR_FIX(sockets::_sym_ll_getProtocolByName);
SMART_PTR_FIX(sockets::_sym_ll_socketBind_inetSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketAccept_inetSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketConnect_inetSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketPeername_inetSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketName);
SMART_PTR_FIX(sockets::_sym_ll_socketSendAddress);
SMART_PTR_FIX(sockets::_sym_socketSendNoAddress);
SMART_PTR_FIX(sockets::_sym_ll_socketBind_localSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketAccept_localSocket);
SMART_PTR_FIX(sockets::_sym_ll_socketConnect_localSocket);
SMART_PTR_FIX(sockets::_sym_socketPeername_localSocket);
SMART_PTR_FIX(sockets::_sym_ll_nonBlockingMode);
SMART_PTR_FIX(sockets::_sym_ll_setfNonBlockingMode);
SMART_PTR_FIX(sockets::_sym_ll_dup);
SMART_PTR_FIX(sockets::_sym_ll_makeStreamFromFd);
SMART_PTR_FIX(sockets::_sym_ll_autoCloseTwoWayStream);
SMART_PTR_FIX(sockets::_sym_ll_strerror);
SMART_PTR_FIX(sockets::_sym_ll_strerror_errno);
SMART_PTR_FIX(sockets::_sym_ll_getSockoptInt);
SMART_PTR_FIX(sockets::_sym_ll_getSockoptBool);
SMART_PTR_FIX(sockets::_sym_ll_getSockoptTimeval);
SMART_PTR_FIX(sockets::_sym_ll_getSockoptLinger);
SMART_PTR_FIX(sockets::_sym_ll_setSockoptInt);
SMART_PTR_FIX(sockets::_sym_ll_setSockoptBool);
SMART_PTR_FIX(sockets::_sym_ll_setSockoptTimeval);
SMART_PTR_FIX(sockets::_sym_ll_setSockoptLinger);
SMART_PTR_FIX(gctools::_sym_STARallocPatternStackSTAR);
SMART_PTR_FIX(gctools::_sym_ramp);
SMART_PTR_FIX(gctools::_sym_rampCollectAll);
SMART_PTR_FIX(gctools::_sym_garbageCollect);
SMART_PTR_FIX(gctools::_sym_maxBootstrapKinds);
SMART_PTR_FIX(gctools::_sym_bootstrapKindsP);
SMART_PTR_FIX(gctools::_sym_bootstrapKindSymbols);
SMART_PTR_FIX(comp::_sym_compileInEnv);
SMART_PTR_FIX(comp::_sym_compileFormAndEvalWithEnv);
SMART_PTR_FIX(comp::_sym_STARimplicit_compile_hookSTAR);
SMART_PTR_FIX(comp::_sym_implicit_compile_hook_default);
SMART_PTR_FIX(comp::_sym_STARall_functions_for_one_compileSTAR);
SMART_PTR_FIX(comp::_sym_aSingleCompilerSymbol);
SMART_PTR_FIX(comp::_sym_STARlowLevelTraceSTAR);
SMART_PTR_FIX(comp::_sym_STARlowLevelTracePrintSTAR);
SMART_PTR_FIX(cleavirEnv::_sym_macroFunction);
SMART_PTR_FIX(cleavirEnv::_sym_symbolMacroExpansion);
SMART_PTR_FIX(cleavirPrimops::_sym_callWithVariableBound);
SMART_PTR_FIX(gray::_sym_aSingleGraySymbol);
SMART_PTR_FIX(gray::_sym_open_stream_p);
SMART_PTR_FIX(gray::_sym_stream_read_byte);
SMART_PTR_FIX(gray::_sym_stream_write_byte);
SMART_PTR_FIX(gray::_sym_stream_read_char);
SMART_PTR_FIX(gray::_sym_stream_read_char_no_hang);
SMART_PTR_FIX(gray::_sym_stream_write_char);
SMART_PTR_FIX(gray::_sym_stream_write_string);
SMART_PTR_FIX(gray::_sym_stream_terpri);
SMART_PTR_FIX(gray::_sym_stream_fresh_line);
SMART_PTR_FIX(gray::_sym_stream_read_sequence);
SMART_PTR_FIX(gray::_sym_stream_write_sequence);
SMART_PTR_FIX(gray::_sym_stream_unread_char);
SMART_PTR_FIX(gray::_sym_stream_peek_char);
SMART_PTR_FIX(gray::_sym_stream_listen);
SMART_PTR_FIX(gray::_sym_streamClearInput);
SMART_PTR_FIX(gray::_sym_stream_clear_input);
SMART_PTR_FIX(gray::_sym_stream_clear_output);
SMART_PTR_FIX(gray::_sym_stream_force_output);
SMART_PTR_FIX(gray::_sym_stream_finish_output);
SMART_PTR_FIX(gray::_sym_streamp);
SMART_PTR_FIX(gray::_sym_input_stream_p);
SMART_PTR_FIX(gray::_sym_output_stream_p);
SMART_PTR_FIX(gray::_sym_stream_interactive_p);
SMART_PTR_FIX(gray::_sym_stream_element_type);
SMART_PTR_FIX(gray::_sym_stream_file_position);
SMART_PTR_FIX(gray::_sym_stream_line_column);
SMART_PTR_FIX(gray::_sym_stream_advance_to_column);
SMART_PTR_FIX(gray::_sym_close);
#endif
 // defined(GARBAGE_COLLECT_ALL_SYMBOLS
#if defined(ChemPkg_SYMBOLS)
DO_SYMBOL(chem,_sym_iterateMatterSymbolConverter,0,ChemPkg,"iterateMatterSymbolConverter",true);
DO_SYMBOL(chem,_sym_allMatter,1,ChemPkg,"allMatter",true);
DO_SYMBOL(chem,_sym_atoms,2,ChemPkg,"atoms",true);
DO_SYMBOL(chem,_sym_residues,3,ChemPkg,"residues",true);
DO_SYMBOL(chem,_sym_molecules,4,ChemPkg,"molecules",true);
DO_SYMBOL(chem,_sym_bonds,5,ChemPkg,"bonds",true);
DO_SYMBOL(chem,_sym_name,6,ChemPkg,"name",true);
DO_SYMBOL(chem,_sym__PLUS_validChemdrawKeywords_PLUS_,7,ChemPkg,"_PLUS_validChemdrawKeywords_PLUS_",true);
DO_SYMBOL(chem,_sym_STARparserNodeHolderSTAR,8,ChemPkg,"STARparserNodeHolderSTAR",true);
DO_SYMBOL(chem,_sym_STARSabBondEnumConverterSTAR,9,ChemPkg,"STARSabBondEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_STARLogicalOperatorTypeConverterSTAR,10,ChemPkg,"STARLogicalOperatorTypeConverterSTAR",true);
DO_SYMBOL(chem,_sym_STARAtomTestEnumConverterSTAR,11,ChemPkg,"STARAtomTestEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_STARDonorAcceptorEnumConverterSTAR,12,ChemPkg,"STARDonorAcceptorEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_STAREleDielectricEnumConverterSTAR,13,ChemPkg,"STAREleDielectricEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_STARVdwMixRadiusEnumConverterSTAR,14,ChemPkg,"STARVdwMixRadiusEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_STARVdwMixWellEnumConverterSTAR,15,ChemPkg,"STARVdwMixWellEnumConverterSTAR",true);
DO_SYMBOL(chem,_sym_CDNode_O,16,ChemPkg,"CDNode",true);
DO_SYMBOL(chem,_sym_CDBond_O,17,ChemPkg,"CDBond",true);
DO_SYMBOL(chem,_sym_CDFragment_O,18,ChemPkg,"CDFragment",true);
DO_SYMBOL(chem,_sym_CDText_O,19,ChemPkg,"CDText",true);
DO_SYMBOL(chem,_sym_ChemDraw_O,20,ChemPkg,"ChemDraw",true);
DO_SYMBOL(chem,_sym_Command_O,21,ChemPkg,"Command",true);
DO_SYMBOL(chem,_sym_MacroModelFile_O,22,ChemPkg,"MacroModelFile",true);
DO_SYMBOL(chem,_sym_ReadAmberParameters_O,23,ChemPkg,"ReadAmberParameters",true);
DO_SYMBOL(chem,_sym_StructureComparer_O,24,ChemPkg,"StructureComparer",true);
DO_SYMBOL(chem,_sym_Structure_Old_ListEntry_O,25,ChemPkg,"StructureListEntry",true);
DO_SYMBOL(chem,_sym_Structure_Old_List_O,26,ChemPkg,"StructureList",true);
DO_SYMBOL(chem,_sym_Twister_O,27,ChemPkg,"Twister",true);
DO_SYMBOL(chem,_sym_TwisterDriver_O,28,ChemPkg,"TwisterDriver",true);
DO_SYMBOL(chem,_sym_ZMatrixInternal_O,29,ChemPkg,"ZMatrixInternal",true);
DO_SYMBOL(chem,_sym_ZMatrixBondInternal_O,30,ChemPkg,"ZMatrixBondInternal",true);
DO_SYMBOL(chem,_sym_ZMatrixAngleInternal_O,31,ChemPkg,"ZMatrixAngleInternal",true);
DO_SYMBOL(chem,_sym_ZMatrixDihedralInternal_O,32,ChemPkg,"ZMatrixDihedralInternal",true);
DO_SYMBOL(chem,_sym_ZMatrixEntry_O,33,ChemPkg,"ZMatrixEntry",true);
DO_SYMBOL(chem,_sym_ZMatrix_O,34,ChemPkg,"ZMatrix",true);
DO_SYMBOL(chem,_sym_R,35,ChemPkg,"R",true);
DO_SYMBOL(chem,_sym_S,36,ChemPkg,"S",true);
DO_SYMBOL(chem,_sym_UnknownConfiguration,37,ChemPkg,"UnknownConfiguration",true);
DO_SYMBOL(chem,_sym_candoDatabase,38,ChemPkg,"candoDatabase",true);
DO_SYMBOL(chem,_sym_AM1_BCC_ar5,39,ChemPkg,"AM1_BCC_ar5",true);
DO_SYMBOL(chem,_sym_AM1_BCC_ar6,40,ChemPkg,"AM1_BCC_ar6",true);
DO_SYMBOL(chem,_sym_AM1_BCC_ar7,41,ChemPkg,"AM1_BCC_ar7",true);
DO_SYMBOL(chem,_sym_Alias_O,42,ChemPkg,"Alias",true);
DO_SYMBOL(chem,_sym__PLUS_configurationEnumConverter_PLUS_,43,ChemPkg,"_PLUS_configurationEnumConverter_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_stereochemistryTypeConverter_PLUS_,44,ChemPkg,"_PLUS_stereochemistryTypeConverter_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_atomFlagSymbolConverter_PLUS_,45,ChemPkg,"_PLUS_atomFlagSymbolConverter_PLUS_",true);
DO_SYMBOL(chem,_sym_configurationToSymbolConverter,46,ChemPkg,"configurationToSymbolConverter",true);
DO_SYMBOL(chem,_sym_stereochemistryToSymbolConverter,47,ChemPkg,"stereochemistryToSymbolConverter",true);
DO_SYMBOL(chem,_sym_atomNeedsMinimizer,48,ChemPkg,"atomNeedsMinimizer",true);
DO_SYMBOL(chem,_sym_selected,49,ChemPkg,"selected",true);
DO_SYMBOL(chem,_sym_onGrid,50,ChemPkg,"onGrid",true);
DO_SYMBOL(chem,_sym_atomFixed,51,ChemPkg,"atomFixed",true);
DO_SYMBOL(chem,_sym_in3MemberRing,52,ChemPkg,"in3MemberRing",true);
DO_SYMBOL(chem,_sym_in4MemberRing,53,ChemPkg,"in4MemberRing",true);
DO_SYMBOL(chem,_sym_in5MemberRing,54,ChemPkg,"in5MemberRing",true);
DO_SYMBOL(chem,_sym_in6MemberRing,55,ChemPkg,"in6MemberRing",true);
DO_SYMBOL(chem,_sym_in7MemberRing,56,ChemPkg,"in7MemberRing",true);
DO_SYMBOL(chem,_sym_in8MemberRing,57,ChemPkg,"in8MemberRing",true);
DO_SYMBOL(chem,_sym_inRing,58,ChemPkg,"inRing",true);
DO_SYMBOL(chem,_sym__PLUS_bondOrderToSymbolConverter_PLUS_,59,ChemPkg,"_PLUS_bondOrderToSymbolConverter_PLUS_",true);
DO_SYMBOL(chem,_sym_AtomIdToAtomMap_O,60,ChemPkg,"AtomIdToAtomMap",true);
DO_SYMBOL(chem,_sym_AtomId_O,61,ChemPkg,"AtomId",true);
DO_SYMBOL(chem,_sym__PLUS_elementToSymbolConverter_PLUS_,62,ChemPkg,"_PLUS_elementToSymbolConverter_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_hybridizationToSymbolConverter_PLUS_,63,ChemPkg,"_PLUS_hybridizationToSymbolConverter_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_elementColors_PLUS_,64,ChemPkg,"_PLUS_elementColors_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_minimizerStatusConverter_PLUS_,65,ChemPkg,"_PLUS_minimizerStatusConverter_PLUS_",true);
DO_SYMBOL(chem,_sym__PLUS_preconditionerTypeConverter_PLUS_,66,ChemPkg,"_PLUS_preconditionerTypeConverter_PLUS_",true);
DO_SYMBOL(chem,_sym_MinimizerExceededMaxStepsError,67,ChemPkg,"MinimizerExceededMaxStepsError",true);
DO_SYMBOL(chem,_sym_MinimizerStuckError,68,ChemPkg,"MinimizerStuckError",true);
DO_SYMBOL(chem,_sym_MinimizerError,69,ChemPkg,"MinimizerError",true);
DO_SYMBOL(chem,_sym_noPreconditioner,70,ChemPkg,"noPreconditioner",true);
DO_SYMBOL(chem,_sym_hessianPreconditioner,71,ChemPkg,"hessianPreconditioner",true);
DO_SYMBOL(chem,_sym_minimizerError,72,ChemPkg,"minimizerError",true);
DO_SYMBOL(chem,_sym_minimizerSucceeded,73,ChemPkg,"minimizerSucceeded",true);
DO_SYMBOL(chem,_sym_truncatedNewtonRunning,74,ChemPkg,"truncatedNewtonRunning",true);
DO_SYMBOL(chem,_sym_conjugateGradientRunning,75,ChemPkg,"conjugateGradientRunning",true);
DO_SYMBOL(chem,_sym_steepestDescentRunning,76,ChemPkg,"steepestDescentRunning",true);
DO_SYMBOL(chem,_sym_minimizerIdle,77,ChemPkg,"minimizerIdle",true);
DO_SYMBOL(chem,_sym_Angle_O,78,ChemPkg,"Angle",true);
DO_SYMBOL(chem,_sym_ProperTorsion_O,79,ChemPkg,"ProperTorsion",true);
DO_SYMBOL(chem,_sym_ImproperTorsion_O,80,ChemPkg,"ImproperTorsion",true);
DO_SYMBOL(chem,_sym_AtomIndexer_O,81,ChemPkg,"AtomIndexer",true);
DO_SYMBOL(chem,_sym_MapOfMonomerNamesToAtomIndexers_O,82,ChemPkg,"MapOfMonomerNamesToAtomIndexers",true);
DO_SYMBOL(chem,_sym_MonomerPack_O,83,ChemPkg,"MonomerPack",true);
DO_SYMBOL(chem,_sym_StereoConfiguration_O,84,ChemPkg,"StereoConfiguration",true);
DO_SYMBOL(chem,_sym_Stereoisomer_O,85,ChemPkg,"Stereoisomer",true);
DO_SYMBOL(chem,_sym_StereoInformation_O,86,ChemPkg,"StereoInformation",true);
DO_SYMBOL(chem,_sym_ConformationExplorerEntryStage_O,87,ChemPkg,"ConformationExplorerEntryStage",true);
DO_SYMBOL(chem,_sym_ConformationExplorerEntry_O,88,ChemPkg,"ConformationExplorerEntry",true);
DO_SYMBOL(chem,_sym_ConformationExplorer_O,89,ChemPkg,"ConformationExplorer",true);
DO_SYMBOL(chem,_sym_ConformationExplorerMatch_O,90,ChemPkg,"ConformationExplorerMatch",true);
DO_SYMBOL(chem,_sym_MonomerCoordinates_O,91,ChemPkg,"MonomerCoordinates",true);
DO_SYMBOL(chem,_sym_ConformationCollectionEntry_O,92,ChemPkg,"ConformationCollectionEntry",true);
DO_SYMBOL(chem,_sym_ConformationCollection_O,93,ChemPkg,"ConformationCollection",true);
DO_SYMBOL(chem,_sym_SuperposableConformationCollection_O,94,ChemPkg,"SuperposableConformationCollection",true);
DO_SYMBOL(chem,_sym_FrameRecognizer_O,95,ChemPkg,"FrameRecognizer",true);
DO_SYMBOL(chem,_sym_Rotamer_O,96,ChemPkg,"Rotamer",true);
DO_SYMBOL(chem,_sym_AtomReferenceBase_O,97,ChemPkg,"AtomReferenceBase",true);
DO_SYMBOL(chem,_sym_AtomReference_O,98,ChemPkg,"AtomReference",true);
DO_SYMBOL(chem,_sym_RepresentedEntityNameSet_O,99,ChemPkg,"RepresentedEntityNameSet",true);
DO_SYMBOL(chem,_sym_CoordinateSystem_O,100,ChemPkg,"CoordinateSystem",true);
DO_SYMBOL(chem,_sym_PdbMonomerConnectivity_O,101,ChemPkg,"PdbMonomerConnectivity",true);
DO_SYMBOL(chem,_sym_PdbMonomerDatabase_O,102,ChemPkg,"PdbMonomerDatabase",true);
DO_SYMBOL(chem,_sym_StereoisomerAtom_O,103,ChemPkg,"StereoisomerAtom",true);
DO_SYMBOL(chem,_sym_StereoisomerVirtualAtom_O,104,ChemPkg,"StereoisomerVirtualAtom",true);
DO_SYMBOL(chem,_sym_StereoisomerAtoms_O,105,ChemPkg,"StereoisomerAtoms",true);
DO_SYMBOL(chem,_sym_ConstitutionBond_O,106,ChemPkg,"ConstitutionBond",true);
DO_SYMBOL(chem,_sym_ConstitutionAtom_O,107,ChemPkg,"ConstitutionAtom",true);
DO_SYMBOL(chem,_sym_ConstitutionVirtualAtom_O,108,ChemPkg,"ConstitutionVirtualAtom",true);
DO_SYMBOL(chem,_sym_ConstitutionAtoms_O,109,ChemPkg,"ConstitutionAtoms",true);
DO_SYMBOL(chem,_sym_TrajectoryFrame_O,110,ChemPkg,"TrajectoryFrame",true);
DO_SYMBOL(chem,_sym_Trajectory_O,111,ChemPkg,"Trajectory",true);
DO_SYMBOL(chem,_sym_CipPrioritizer_O,112,ChemPkg,"CipPrioritizer",true);
DO_SYMBOL(chem,_sym_AtomTable_O,113,ChemPkg,"AtomTable",true);
DO_SYMBOL(chem,_sym_EnergyComponent_O,114,ChemPkg,"EnergyComponent",true);
DO_SYMBOL(chem,_sym_EnergyStretch_O,115,ChemPkg,"EnergyStretch",true);
DO_SYMBOL(chem,_sym_EnergyAngle_O,116,ChemPkg,"EnergyAngle",true);
DO_SYMBOL(chem,_sym_EnergyDihedral_O,117,ChemPkg,"EnergyDihedral",true);
DO_SYMBOL(chem,_sym_EnergyNonbond_O,118,ChemPkg,"EnergyNonbond",true);
DO_SYMBOL(chem,_sym_EnergyImproperRestraint_O,119,ChemPkg,"EnergyImproperRestraint",true);
DO_SYMBOL(chem,_sym_EnergyChiralRestraint_O,120,ChemPkg,"EnergyChiralRestraint",true);
DO_SYMBOL(chem,_sym_EnergyAnchorRestraint_O,121,ChemPkg,"EnergyAnchorRestraint",true);
DO_SYMBOL(chem,_sym_EnergyFixedNonbondRestraint_O,122,ChemPkg,"EnergyFixedNonbondRestraint",true);
DO_SYMBOL(chem,_sym_nonbondTerm,123,ChemPkg,"nonbondTerm",true);
DO_SYMBOL(chem,_sym_restraintAnchor,124,ChemPkg,"restraintAnchor",true);
DO_SYMBOL(chem,_sym_InteractionError,125,ChemPkg,"InteractionError",true);
DO_SYMBOL(chem,_sym_LinearAngleError,126,ChemPkg,"LinearAngleError",true);
DO_SYMBOL(chem,_sym_LinearDihedralError,127,ChemPkg,"LinearDihedralError",true);
DO_SYMBOL(chem,_sym_LinearImproperRestraintError,128,ChemPkg,"LinearImproperRestraintError",true);
DO_SYMBOL(chem,_sym_OverlappingNonbondError,129,ChemPkg,"OverlappingNonbondError",true);
DO_SYMBOL(chem,_sym_ComplexRestraint_O,130,ChemPkg,"ComplexRestraint",true);
DO_SYMBOL(chem,_sym_RestrainedExoCyclicAtom_O,131,ChemPkg,"RestrainedExoCyclicAtom",true);
DO_SYMBOL(chem,_sym_RestrainedPiBond_O,132,ChemPkg,"RestrainedPiBond",true);
DO_SYMBOL(chem,_sym_SearchStatistics_O,133,ChemPkg,"SearchStatistics",true);
DO_SYMBOL(chem,_sym_Constitution_O,134,ChemPkg,"Constitution",true);
DO_SYMBOL(chem,_sym_CalculatePosition_O,135,ChemPkg,"CalculatePosition",true);
DO_SYMBOL(chem,_sym_CalculatePositionUsingInternals_O,136,ChemPkg,"CalculatePositionUsingInternals",true);
DO_SYMBOL(chem,_sym_CalculatePositionAlongBond_O,137,ChemPkg,"CalculatePositionAlongBond",true);
DO_SYMBOL(chem,_sym_CalculatePositionRelativeToOrigin_O,138,ChemPkg,"CalculatePositionRelativeToOrigin",true);
DO_SYMBOL(chem,_sym_Oligomer_O,139,ChemPkg,"Oligomer",true);
DO_SYMBOL(chem,_sym_OligomerPart_Base_O,140,ChemPkg,"OligomerPart-Base",true);
DO_SYMBOL(chem,_sym_OligomerPart_Monomer_O,141,ChemPkg,"OligomerPart-Monomer",true);
DO_SYMBOL(chem,_sym_OligomerPart_Link_O,142,ChemPkg,"OligomerPart-Link",true);
DO_SYMBOL(chem,_sym_Entity_O,143,ChemPkg,"Entity",true);
DO_SYMBOL(chem,_sym_Monomer_O,144,ChemPkg,"Monomer",true);
DO_SYMBOL(chem,_sym_OneMonomer_O,145,ChemPkg,"OneMonomer",true);
DO_SYMBOL(chem,_sym_MultiMonomer_O,146,ChemPkg,"MultiMonomer",true);
DO_SYMBOL(chem,_sym_CandoDatabase_O,147,ChemPkg,"CandoDatabase",true);
DO_SYMBOL(chem,_sym_Topology_O,148,ChemPkg,"Topology",true);
DO_SYMBOL(chem,_sym_StatusTracker_O,149,ChemPkg,"StatusTracker",true);
DO_SYMBOL(chem,_sym_EntityNameSetBase_O,150,ChemPkg,"EntityNameSetBase",true);
DO_SYMBOL(chem,_sym_EntityNameSet_O,151,ChemPkg,"EntityNameSet",true);
DO_SYMBOL(chem,_sym_EntityNameSetWithCap_O,152,ChemPkg,"EntityNameSetWithCap",true);
DO_SYMBOL(chem,_sym_MonomerContext_O,153,ChemPkg,"MonomerContext",true);
DO_SYMBOL(chem,_sym_Coupling_O,154,ChemPkg,"Coupling",true);
DO_SYMBOL(chem,_sym_DirectionalCoupling_O,155,ChemPkg,"DirectionalCoupling",true);
DO_SYMBOL(chem,_sym_RingCoupling_O,156,ChemPkg,"RingCoupling",true);
DO_SYMBOL(chem,_sym_Mate_O,157,ChemPkg,"Mate",true);
DO_SYMBOL(chem,_sym_RingClosingMate_O,158,ChemPkg,"RingClosingMate",true);
DO_SYMBOL(chem,_sym_Plug_O,159,ChemPkg,"Plug",true);
DO_SYMBOL(chem,_sym_PlugWithMates_O,160,ChemPkg,"PlugWithMates",true);
DO_SYMBOL(chem,_sym_OutPlug_O,161,ChemPkg,"OutPlug",true);
DO_SYMBOL(chem,_sym_InPlug_O,162,ChemPkg,"InPlug",true);
DO_SYMBOL(chem,_sym_JumpPlug_O,163,ChemPkg,"JumpPlug",true);
DO_SYMBOL(chem,_sym_RingClosingPlug_O,164,ChemPkg,"RingClosingPlug",true);
DO_SYMBOL(chem,_sym_SpecificContext_O,165,ChemPkg,"SpecificContext",true);
DO_SYMBOL(chem,_sym_SpecificContextSet_O,166,ChemPkg,"SpecificContextSet",true);
DO_SYMBOL(chem,_sym_SpanningLoop_O,167,ChemPkg,"SpanningLoop",true);
DO_SYMBOL(chem,_sym_SuperposeEngine_O,168,ChemPkg,"SuperposeEngine",true);
DO_SYMBOL(chem,_sym_SuperposeSelectedAtoms_O,169,ChemPkg,"SuperposeSelectedAtoms",true);
DO_SYMBOL(chem,_sym_superpose,170,ChemPkg,"superpose",true);
DO_SYMBOL(chem,_sym_VirtualSphere_O,171,ChemPkg,"VirtualSphere",true);
DO_SYMBOL(chem,_sym_idle,172,ChemPkg,"idle",true);
DO_SYMBOL(chem,_sym_translate,173,ChemPkg,"translate",true);
DO_SYMBOL(chem,_sym_rotate,174,ChemPkg,"rotate",true);
DO_SYMBOL(chem,_sym_scale,175,ChemPkg,"scale",true);
DO_SYMBOL(chem,_sym_OneTypeRule_O,176,ChemPkg,"OneTypeRule",true);
DO_SYMBOL(chem,_sym_TypeAssignmentRules_O,177,ChemPkg,"TypeAssignmentRules",true);
DO_SYMBOL(chem,_sym_STARsybyl_type_assignment_rulesSTAR,178,ChemPkg,"STARsybyl_type_assignment_rulesSTAR",true);
DO_SYMBOL(chem,_sym_FFParameter_O,179,ChemPkg,"FFParameter",true);
DO_SYMBOL(chem,_sym_FFBaseDb_O,180,ChemPkg,"FFBaseDb",true);
DO_SYMBOL(chem,_sym_ChemInfoMatch_O,181,ChemPkg,"ChemInfoMatch",true);
DO_SYMBOL(chem,_sym_WildElementDict_O,182,ChemPkg,"WildElementDict",true);
DO_SYMBOL(chem,_sym_ChemInfoNode_O,183,ChemPkg,"ChemInfoNode",true);
DO_SYMBOL(chem,_sym_ResidueList_O,184,ChemPkg,"ResidueList",true);
DO_SYMBOL(chem,_sym_RootMatchNode_O,185,ChemPkg,"RootMatchNode",true);
DO_SYMBOL(chem,_sym_BondMatchNode_O,186,ChemPkg,"BondMatchNode",true);
DO_SYMBOL(chem,_sym_AtomOrBondMatchNode_O,187,ChemPkg,"AtomOrBondMatchNode",true);
DO_SYMBOL(chem,_sym_BondListMatchNode_O,188,ChemPkg,"BondListMatchNode",true);
DO_SYMBOL(chem,_sym_Logical_O,189,ChemPkg,"Logical",true);
DO_SYMBOL(chem,_sym_TagSet_O,190,ChemPkg,"TagSet",true);
DO_SYMBOL(chem,_sym_RingTest_O,191,ChemPkg,"RingTest",true);
DO_SYMBOL(chem,_sym_ResidueTest_O,192,ChemPkg,"ResidueTest",true);
DO_SYMBOL(chem,_sym_BondTest_O,193,ChemPkg,"BondTest",true);
DO_SYMBOL(chem,_sym_AntechamberBondTest_O,194,ChemPkg,"AntechamberBondTest",true);
DO_SYMBOL(chem,_sym_AtomTest_O,195,ChemPkg,"AtomTest",true);
DO_SYMBOL(chem,_sym_AntechamberFocusAtomMatch_O,196,ChemPkg,"AntechamberFocusAtomMatch",true);
DO_SYMBOL(chem,_sym_Chain_O,197,ChemPkg,"Chain",true);
DO_SYMBOL(chem,_sym_Branch_O,198,ChemPkg,"Branch",true);
DO_SYMBOL(chem,_sym_AfterMatchBondTest_O,199,ChemPkg,"AfterMatchBondTest",true);
DO_SYMBOL(chem,_sym_Root_O,200,ChemPkg,"Root",true);
DO_SYMBOL(chem,_sym_SmartsRoot_O,201,ChemPkg,"SmartsRoot",true);
DO_SYMBOL(chem,_sym_AntechamberRoot_O,202,ChemPkg,"AntechamberRoot",true);
DO_SYMBOL(chem,_sym_ChemInfo_O,203,ChemPkg,"ChemInfo",true);
DO_SYMBOL(chem,_sym_FFTypesDb_O,204,ChemPkg,"FFTypesDb",true);
DO_SYMBOL(chem,_sym_FFStretch_O,205,ChemPkg,"FFStretch",true);
DO_SYMBOL(chem,_sym_FFStretchDb_O,206,ChemPkg,"FFStretchDb",true);
DO_SYMBOL(chem,_sym_FFAngle_O,207,ChemPkg,"FFAngle",true);
DO_SYMBOL(chem,_sym_FFAngleDb_O,208,ChemPkg,"FFAngleDb",true);
DO_SYMBOL(chem,_sym_FFItor_O,209,ChemPkg,"FFItor",true);
DO_SYMBOL(chem,_sym_FFItorDb_O,210,ChemPkg,"FFItorDb",true);
DO_SYMBOL(chem,_sym_FFPtor_O,211,ChemPkg,"FFPtor",true);
DO_SYMBOL(chem,_sym_FFPtorDb_O,212,ChemPkg,"FFPtorDb",true);
DO_SYMBOL(chem,_sym_FFNonbondCrossTermTable_O,213,ChemPkg,"FFNonbondCrossTermTable",true);
DO_SYMBOL(chem,_sym_FFNonbond_O,214,ChemPkg,"FFNonbond",true);
DO_SYMBOL(chem,_sym_FFNonbondDb_O,215,ChemPkg,"FFNonbondDb",true);
DO_SYMBOL(chem,_sym_FFVdw_O,216,ChemPkg,"FFVdw",true);
DO_SYMBOL(chem,_sym_FFVdwDb_O,217,ChemPkg,"FFVdwDb",true);
DO_SYMBOL(chem,_sym_InfoDb_O,218,ChemPkg,"InfoDb",true);
DO_SYMBOL(chem,_sym_ForceField_O,219,ChemPkg,"ForceField",true);
DO_SYMBOL(chem,_sym_EnergyFunction_O,220,ChemPkg,"EnergyFunction",true);
DO_SYMBOL(chem,_sym_AbstractLargeSquareMatrix_O,221,ChemPkg,"AbstractLargeSquareMatrix",true);
DO_SYMBOL(chem,_sym_FullLargeSquareMatrix_O,222,ChemPkg,"FullLargeSquareMatrix",true);
DO_SYMBOL(chem,_sym_SparseLargeSquareMatrix_O,223,ChemPkg,"SparseLargeSquareMatrix",true);
DO_SYMBOL(chem,_sym_NumericalFunction_O,224,ChemPkg,"NumericalFunction",true);
DO_SYMBOL(chem,_sym_NVector_O,225,ChemPkg,"NVector",true);
DO_SYMBOL(chem,_sym_ReportBase_O,226,ChemPkg,"ReportBase",true);
DO_SYMBOL(chem,_sym_MessageReport_O,227,ChemPkg,"MessageReport",true);
DO_SYMBOL(chem,_sym_ForceMatchReport_O,228,ChemPkg,"ForceMatchReport",true);
DO_SYMBOL(chem,_sym_StepReport_O,229,ChemPkg,"StepReport",true);
DO_SYMBOL(chem,_sym_MinimizerLog_O,230,ChemPkg,"MinimizerLog",true);
DO_SYMBOL(chem,_sym_Minimizer_O,231,ChemPkg,"Minimizer",true);
DO_SYMBOL(chem,_sym_IterateMatter_O,232,ChemPkg,"IterateMatter",true);
DO_SYMBOL(chem,_sym_IterateAtoms_O,233,ChemPkg,"IterateAtoms",true);
DO_SYMBOL(chem,_sym_IterateResidues_O,234,ChemPkg,"IterateResidues",true);
DO_SYMBOL(chem,_sym_IterateBonds_O,235,ChemPkg,"IterateBonds",true);
DO_SYMBOL(chem,_sym_IterateRestraints_O,236,ChemPkg,"IterateRestraints",true);
DO_SYMBOL(chem,_sym_Restraint_O,237,ChemPkg,"Restraint",true);
DO_SYMBOL(chem,_sym_RestraintAnchor_O,238,ChemPkg,"RestraintAnchor",true);
DO_SYMBOL(chem,_sym_RestraintChiral_O,239,ChemPkg,"RestraintChiral",true);
DO_SYMBOL(chem,_sym_RestraintDistance_O,240,ChemPkg,"RestraintDistance",true);
DO_SYMBOL(chem,_sym_RestraintAngle_O,241,ChemPkg,"RestraintAngle",true);
DO_SYMBOL(chem,_sym_RestraintDihedral_O,242,ChemPkg,"RestraintDihedral",true);
DO_SYMBOL(chem,_sym_RestraintFixedNonbond_O,243,ChemPkg,"RestraintFixedNonbond",true);
DO_SYMBOL(chem,_sym_RestraintList_O,244,ChemPkg,"RestraintList",true);
DO_SYMBOL(chem,_sym_PdbReader_O,245,ChemPkg,"PdbReader",true);
DO_SYMBOL(chem,_sym_PdbWriter_O,246,ChemPkg,"PdbWriter",true);
DO_SYMBOL(chem,_sym_PathMessage_O,247,ChemPkg,"PathMessage",true);
DO_SYMBOL(chem,_sym_AGVertex_O,248,ChemPkg,"AGVertex",true);
DO_SYMBOL(chem,_sym_AGEdge_O,249,ChemPkg,"AGEdge",true);
DO_SYMBOL(chem,_sym_RingFinder_O,250,ChemPkg,"RingFinder",true);
DO_SYMBOL(chem,_sym_Matter_O,251,ChemPkg,"Matter",true);
DO_SYMBOL(chem,_sym_Atom_O,252,ChemPkg,"Atom",true);
DO_SYMBOL(chem,_sym_Residue_O,253,ChemPkg,"Residue",true);
DO_SYMBOL(chem,_sym_Molecule_O,254,ChemPkg,"Molecule",true);
DO_SYMBOL(chem,_sym_Aggregate_O,255,ChemPkg,"Aggregate",true);
DO_SYMBOL(chem,_sym_VirtualAtom_O,256,ChemPkg,"VirtualAtom",true);
DO_SYMBOL(chem,_sym_Bond_O,257,ChemPkg,"Bond",true);
DO_SYMBOL(chem,_sym_BondList_O,258,ChemPkg,"BondList",true);
#endif // ChemPkg_SYMBOLS
#if defined(AdaptPkg_SYMBOLS)
DO_SYMBOL(adapt,_sym_SymbolList_O,259,AdaptPkg,"SymbolList",true);
DO_SYMBOL(adapt,_sym_StringList_O,260,AdaptPkg,"StringList",true);
DO_SYMBOL(adapt,_sym_IterateCons_O,261,AdaptPkg,"IterateCons",true);
DO_SYMBOL(adapt,_sym_StringSet_O,262,AdaptPkg,"StringSet",true);
DO_SYMBOL(adapt,_sym_IndexedObjectBag_O,263,AdaptPkg,"IndexedObjectBag",true);
DO_SYMBOL(adapt,_sym_QDomNode_O,264,AdaptPkg,"QDomNode",true);
DO_SYMBOL(adapt,_sym_SymbolSet_O,265,AdaptPkg,"SymbolSet",true);
DO_SYMBOL(adapt,_sym_ObjectSet_O,266,AdaptPkg,"ObjectSet",true);
#endif // AdaptPkg_SYMBOLS
#if defined(CorePkg_SYMBOLS)
DO_SYMBOL(core,_sym_STARwatchDynamicBindingStackSTAR,267,CorePkg,"STARwatchDynamicBindingStackSTAR",true);
DO_SYMBOL(core,_sym_symbolMacro,268,CorePkg,"symbolMacro",true);
DO_SYMBOL(core,_sym_whole,269,CorePkg,"whole",true);
DO_SYMBOL(core,_sym_env,270,CorePkg,"env",true);
DO_SYMBOL(core,_sym_processDeclarations,271,CorePkg,"processDeclarations",true);
DO_SYMBOL(core,_sym_evaluateVerbosity,272,CorePkg,"evaluateVerbosity",true);
DO_SYMBOL(core,_sym_evaluateDepth,273,CorePkg,"evaluateDepth",true);
DO_SYMBOL(core,_sym_classifyLetVariablesAndDeclares,274,CorePkg,"classifyLetVariablesAndDeclares",true);
DO_SYMBOL(core,_sym_STAReval_with_env_hookSTAR,275,CorePkg,"STAReval_with_env_hookSTAR",true);
DO_SYMBOL(core,_sym_eval_with_env_default,276,CorePkg,"eval_with_env_default",true);
DO_SYMBOL(core,_sym_dlopen,277,CorePkg,"dlopen",true);
DO_SYMBOL(core,_sym_dlsym,278,CorePkg,"dlsym",true);
DO_SYMBOL(core,_sym_dladdr,279,CorePkg,"dladdr",true);
DO_SYMBOL(core,_sym_callWithVariableBound,280,CorePkg,"callWithVariableBound",true);
DO_SYMBOL(core,_sym_instanceClassSet,281,CorePkg,"instanceClassSet",true);
DO_SYMBOL(core,_sym_intrusiveReferenceCountedPointer,282,CorePkg,"intrusiveReferenceCountedPointer",true);
DO_SYMBOL(core,_sym_sharedReferenceCountedPointer,283,CorePkg,"sharedReferenceCountedPointer",true);
DO_SYMBOL(core,_sym_mpsGarbageCollection,284,CorePkg,"mpsGarbageCollection",true);
DO_SYMBOL(core,_sym_makeInvocationHistoryFrameIterator,285,CorePkg,"makeInvocationHistoryFrameIterator",true);
DO_SYMBOL(core,_sym_STARbacktraceFrameSelectorHookSTAR,286,CorePkg,"STARbacktraceFrameSelectorHookSTAR",true);
DO_SYMBOL(core,_sym_smartPointerDetails,287,CorePkg,"smartPointerDetails",true);
DO_SYMBOL(core,_sym_STARfset,288,CorePkg,"STARfset",true);
DO_SYMBOL(core,_sym_unbound,289,CorePkg,"unbound",true);
DO_SYMBOL(core,_sym_mapappend,290,CorePkg,"mapappend",true);
DO_SYMBOL(core,_sym_macroexpand_default,291,CorePkg,"macroexpand_default",true);
DO_SYMBOL(core,_sym_sequence_start_end,292,CorePkg,"sequence_start_end",true);
DO_SYMBOL(core,_sym_type_to_symbol,293,CorePkg,"type_to_symbol",true);
DO_SYMBOL(core,_sym_gdb,294,CorePkg,"gdb",true);
DO_SYMBOL(core,_sym_gdbInspect,295,CorePkg,"gdbInspect",true);
DO_SYMBOL(core,_sym_separatePairList,296,CorePkg,"separatePairList",true);
DO_SYMBOL(core,_sym_testMemoryError,297,CorePkg,"testMemoryError",true);
DO_SYMBOL(core,_sym_functionBlockName,298,CorePkg,"functionBlockName",true);
DO_SYMBOL(core,_sym_validFunctionNameP,299,CorePkg,"validFunctionNameP",true);
DO_SYMBOL(core,_sym_pointer,300,CorePkg,"pointer",true);
DO_SYMBOL(core,_sym_toTaggedFixnum,301,CorePkg,"toTaggedFixnum",true);
DO_SYMBOL(core,_sym_fromTaggedFixnum,302,CorePkg,"fromTaggedFixnum",true);
DO_SYMBOL(core,_sym_dumpTaggedFixnum,303,CorePkg,"dumpTaggedFixnum",true);
DO_SYMBOL(core,_sym_ihsBacktrace,304,CorePkg,"ihsBacktrace",true);
DO_SYMBOL(core,_sym_ihsTop,305,CorePkg,"ihsTop",true);
DO_SYMBOL(core,_sym_ihsPrev,306,CorePkg,"ihsPrev",true);
DO_SYMBOL(core,_sym_ihsNext,307,CorePkg,"ihsNext",true);
DO_SYMBOL(core,_sym_ihsFun,308,CorePkg,"ihsFun",true);
DO_SYMBOL(core,_sym_ihsEnv,309,CorePkg,"ihsEnv",true);
DO_SYMBOL(core,_sym_bdsTop,310,CorePkg,"bdsTop",true);
DO_SYMBOL(core,_sym_bdsVar,311,CorePkg,"bdsVar",true);
DO_SYMBOL(core,_sym_bdsVal,312,CorePkg,"bdsVal",true);
DO_SYMBOL(core,_sym_theClibBacktraceFunctionSymbol,313,CorePkg,"theClibBacktraceFunctionSymbol",true);
DO_SYMBOL(core,_sym_printCurrentIhsFrameEnvironment,314,CorePkg,"printCurrentIhsFrameEnvironment",true);
DO_SYMBOL(core,_sym_rehash_size,315,CorePkg,"rehash_size",true);
DO_SYMBOL(core,_sym_rehash_threshold,316,CorePkg,"rehash_threshold",true);
DO_SYMBOL(core,_sym_data,317,CorePkg,"data",true);
DO_SYMBOL(core,_sym_hash_eql,318,CorePkg,"hash_eql",true);
DO_SYMBOL(core,_sym_hash_equal,319,CorePkg,"hash_equal",true);
DO_SYMBOL(core,_sym_hash_equalp,320,CorePkg,"hash_equalp",true);
DO_SYMBOL(core,_sym_fixnum_number_of_bits,321,CorePkg,"fixnum_number_of_bits",true);
DO_SYMBOL(core,_sym_nan,322,CorePkg,"nan",true);
DO_SYMBOL(core,_sym_log1p,323,CorePkg,"log1p",true);
DO_SYMBOL(core,_sym_integer_divide,324,CorePkg,"integer_divide",true);
DO_SYMBOL(core,_sym_integerToString,325,CorePkg,"integerToString",true);
DO_SYMBOL(core,_sym_printUnreadableObjectFunction,326,CorePkg,"printUnreadableObjectFunction",true);
DO_SYMBOL(core,_sym_walkToFindSourceInfo,327,CorePkg,"walkToFindSourceInfo",true);
DO_SYMBOL(core,_sym_lookupSourceFileInfo,328,CorePkg,"lookupSourceFileInfo",true);
DO_SYMBOL(core,_sym_STARmonitorRegisterSourceInfoSTAR,329,CorePkg,"STARmonitorRegisterSourceInfoSTAR",true);
DO_SYMBOL(core,_sym_currentDir,330,CorePkg,"currentDir",true);
DO_SYMBOL(core,_sym_file_kind,331,CorePkg,"file_kind",true);
DO_SYMBOL(core,_sym_environmentActivationFrame,332,CorePkg,"environmentActivationFrame",true);
DO_SYMBOL(core,_sym_currentVisibleEnvironment,333,CorePkg,"currentVisibleEnvironment",true);
DO_SYMBOL(core,_sym_runtimeEnvironment,334,CorePkg,"runtimeEnvironment",true);
DO_SYMBOL(core,_sym_environmentList,335,CorePkg,"environmentList",true);
DO_SYMBOL(core,_sym_environmentTypeList,336,CorePkg,"environmentTypeList",true);
DO_SYMBOL(core,_sym_environmentId,337,CorePkg,"environmentId",true);
DO_SYMBOL(core,_sym_singleDispatchWrongNumberArgumentsError,338,CorePkg,"singleDispatchWrongNumberArgumentsError",true);
DO_SYMBOL(core,_sym_singleDispatchTooManyArgumentsError,339,CorePkg,"singleDispatchTooManyArgumentsError",true);
DO_SYMBOL(core,_sym_singleDispatchBadLambdaListError,340,CorePkg,"singleDispatchBadLambdaListError",true);
DO_SYMBOL(core,_sym_singleDispatchMissingDispatchArgumentError,341,CorePkg,"singleDispatchMissingDispatchArgumentError",true);
DO_SYMBOL(core,_sym_tooFewArguments,342,CorePkg,"tooFewArguments",true);
DO_SYMBOL(core,_sym_process_macro_lambda_list,343,CorePkg,"process_macro_lambda_list",true);
DO_SYMBOL(core,_sym_process_single_dispatch_lambda_list,344,CorePkg,"process_single_dispatch_lambda_list",true);
DO_SYMBOL(core,_sym_makeLambdaListHandler,345,CorePkg,"makeLambdaListHandler",true);
DO_SYMBOL(core,_sym_processLambdaList,346,CorePkg,"processLambdaList",true);
DO_SYMBOL(core,_sym_dispatchTable,347,CorePkg,"dispatchTable",true);
DO_SYMBOL(core,_sym_fileColumn,348,CorePkg,"fileColumn",true);
DO_SYMBOL(core,_sym_makeStringOutputStreamFromString,349,CorePkg,"makeStringOutputStreamFromString",true);
DO_SYMBOL(core,_sym_do_write_sequence,350,CorePkg,"do_write_sequence",true);
DO_SYMBOL(core,_sym_streamLinenumber,351,CorePkg,"streamLinenumber",true);
DO_SYMBOL(core,_sym_streamColumn,352,CorePkg,"streamColumn",true);
DO_SYMBOL(core,_sym_single_dispatch_method,353,CorePkg,"single_dispatch_method",true);
DO_SYMBOL(core,_sym_setf_documentation,354,CorePkg,"setf_documentation",true);
DO_SYMBOL(core,_sym_STARcxxDocumentationSTAR,355,CorePkg,"STARcxxDocumentationSTAR",true);
DO_SYMBOL(core,_sym_topLevel,356,CorePkg,"topLevel",true);
DO_SYMBOL(core,_sym_scharSet,357,CorePkg,"scharSet",true);
DO_SYMBOL(core,_sym_STARuseInterpreterForEvalSTAR,358,CorePkg,"STARuseInterpreterForEvalSTAR",true);
DO_SYMBOL(core,_sym_STARnotify_on_compileSTAR,359,CorePkg,"STARnotify_on_compileSTAR",true);
DO_SYMBOL(core,_sym_STARtrace_startupSTAR,360,CorePkg,"STARtrace_startupSTAR",true);
DO_SYMBOL(core,_sym_STARdebugInterpretedClosureSTAR,361,CorePkg,"STARdebugInterpretedClosureSTAR",true);
DO_SYMBOL(core,_sym_STARdebugFlowControlSTAR,362,CorePkg,"STARdebugFlowControlSTAR",true);
DO_SYMBOL(core,_sym_STARdebugStartupSTAR,363,CorePkg,"STARdebugStartupSTAR",true);
DO_SYMBOL(core,_sym__BANG_unbound_BANG_,364,CorePkg,"_BANG_unbound_BANG_",true);
DO_SYMBOL(core,_sym_bitArrayOp,365,CorePkg,"bitArrayOp",true);
DO_SYMBOL(core,_sym_lambdaName,366,CorePkg,"lambdaName",true);
DO_SYMBOL(core,_sym_printf,367,CorePkg,"printf",true);
DO_SYMBOL(core,_sym_asin,368,CorePkg,"asin",true);
DO_SYMBOL(core,_sym_asinh,369,CorePkg,"asinh",true);
DO_SYMBOL(core,_sym_acos,370,CorePkg,"acos",true);
DO_SYMBOL(core,_sym_acosh,371,CorePkg,"acosh",true);
DO_SYMBOL(core,_sym_atanh,372,CorePkg,"atanh",true);
DO_SYMBOL(core,_sym_STARpollTicksPerGcSTAR,373,CorePkg,"STARpollTicksPerGcSTAR",true);
DO_SYMBOL(core,_sym__PLUS_standardReadtable_PLUS_,374,CorePkg,"_PLUS_standardReadtable_PLUS_",true);
DO_SYMBOL(core,_sym_closedStream,375,CorePkg,"closedStream",true);
DO_SYMBOL(core,_sym__PLUS_numberOfFixedArguments_PLUS_,376,CorePkg,"_PLUS_numberOfFixedArguments_PLUS_",true);
DO_SYMBOL(core,_sym_STARinterpreterTraceSTAR,377,CorePkg,"STARinterpreterTraceSTAR",true);
DO_SYMBOL(core,_sym_STARdebugLoadTimeValuesSTAR,378,CorePkg,"STARdebugLoadTimeValuesSTAR",true);
DO_SYMBOL(core,_sym_STARdebugEvalSTAR,379,CorePkg,"STARdebugEvalSTAR",true);
DO_SYMBOL(core,_sym_STARdebugInterpretedFunctionsSTAR,380,CorePkg,"STARdebugInterpretedFunctionsSTAR",true);
DO_SYMBOL(core,_sym_STARdebugMonitorSTAR,381,CorePkg,"STARdebugMonitorSTAR",true);
DO_SYMBOL(core,_sym_monitorReader,382,CorePkg,"monitorReader",true);
DO_SYMBOL(core,_sym_tsp,383,CorePkg,"tsp",true);
DO_SYMBOL(core,_sym_tmv,384,CorePkg,"tmv",true);
DO_SYMBOL(core,_sym_invocationHistoryFrame,385,CorePkg,"invocationHistoryFrame",true);
DO_SYMBOL(core,_sym_size_t,386,CorePkg,"size_t",true);
DO_SYMBOL(core,_sym_threadInfo,387,CorePkg,"threadInfo",true);
DO_SYMBOL(core,_sym_circle_subst,388,CorePkg,"circle_subst",true);
DO_SYMBOL(core,_sym_STARsourceDatabaseSTAR,389,CorePkg,"STARsourceDatabaseSTAR",true);
DO_SYMBOL(core,_sym_STARstartRunTimeSTAR,390,CorePkg,"STARstartRunTimeSTAR",true);
DO_SYMBOL(core,_sym_STARcommandLineLoadSTAR,391,CorePkg,"STARcommandLineLoadSTAR",true);
DO_SYMBOL(core,_sym_STARihsCurrentSTAR,392,CorePkg,"STARihsCurrentSTAR",true);
DO_SYMBOL(core,_sym_STARllvmFunctionNameHookSTAR,393,CorePkg,"STARllvmFunctionNameHookSTAR",true);
DO_SYMBOL(core,_sym_STARtopLevelCommandHookSTAR,394,CorePkg,"STARtopLevelCommandHookSTAR",true);
DO_SYMBOL(core,_sym_STARloadSearchListSTAR,395,CorePkg,"STARloadSearchListSTAR",true);
DO_SYMBOL(core,_sym_loadBitcode,396,CorePkg,"loadBitcode",true);
DO_SYMBOL(core,_sym_loadSource,397,CorePkg,"loadSource",true);
DO_SYMBOL(core,_sym_loadBundle,398,CorePkg,"loadBundle",true);
DO_SYMBOL(core,_sym_STARallCxxClassesSTAR,399,CorePkg,"STARallCxxClassesSTAR",true);
DO_SYMBOL(core,_sym_simpleProgramError,400,CorePkg,"simpleProgramError",true);
DO_SYMBOL(core,_sym_STARdebugReaderSTAR,401,CorePkg,"STARdebugReaderSTAR",true);
DO_SYMBOL(core,_sym_STARenablePrintPrettySTAR,402,CorePkg,"STARenablePrintPrettySTAR",true);
DO_SYMBOL(core,_sym_STARcircle_counterSTAR,403,CorePkg,"STARcircle_counterSTAR",true);
DO_SYMBOL(core,_sym_STARcircle_stackSTAR,404,CorePkg,"STARcircle_stackSTAR",true);
DO_SYMBOL(core,_sym_dynamicGo,405,CorePkg,"dynamicGo",true);
DO_SYMBOL(core,_sym_localGo,406,CorePkg,"localGo",true);
DO_SYMBOL(core,_sym__PLUS_ecl_syntax_progv_list_PLUS_,407,CorePkg,"_PLUS_ecl_syntax_progv_list_PLUS_",true);
DO_SYMBOL(core,_sym__PLUS_io_syntax_progv_list_PLUS_,408,CorePkg,"_PLUS_io_syntax_progv_list_PLUS_",true);
DO_SYMBOL(core,_sym_STARprintPackageSTAR,409,CorePkg,"STARprintPackageSTAR",true);
DO_SYMBOL(core,_sym_STARsharpEqContextSTAR,410,CorePkg,"STARsharpEqContextSTAR",true);
DO_SYMBOL(core,_sym_STARcircleCounterSTAR,411,CorePkg,"STARcircleCounterSTAR",true);
DO_SYMBOL(core,_sym_STARnestedErrorDepthSTAR,412,CorePkg,"STARnestedErrorDepthSTAR",true);
DO_SYMBOL(core,_sym_setThrowPosition,413,CorePkg,"setThrowPosition",true);
DO_SYMBOL(core,_sym_tooFewArgumentsError,414,CorePkg,"tooFewArgumentsError",true);
DO_SYMBOL(core,_sym_tooManyArgumentsError,415,CorePkg,"tooManyArgumentsError",true);
DO_SYMBOL(core,_sym_unrecognizedKeywordArgumentError,416,CorePkg,"unrecognizedKeywordArgumentError",true);
DO_SYMBOL(core,_sym_invalidKeywordArgumentError,417,CorePkg,"invalidKeywordArgumentError",true);
DO_SYMBOL(core,_sym__PLUS_llvmTargetTriple_PLUS_,418,CorePkg,"_PLUS_llvmTargetTriple_PLUS_",true);
DO_SYMBOL(core,_sym__PLUS_executableName_PLUS_,419,CorePkg,"_PLUS_executableName_PLUS_",true);
DO_SYMBOL(core,_sym_STARcodeWalkerSTAR,420,CorePkg,"STARcodeWalkerSTAR",true);
DO_SYMBOL(core,_sym_STARcurrentSourceFileInfoSTAR,421,CorePkg,"STARcurrentSourceFileInfoSTAR",true);
DO_SYMBOL(core,_sym_STARcurrentSourcePosInfoSTAR,422,CorePkg,"STARcurrentSourcePosInfoSTAR",true);
DO_SYMBOL(core,_sym_STARdebugMacroexpandSTAR,423,CorePkg,"STARdebugMacroexpandSTAR",true);
DO_SYMBOL(core,_sym_STARenvironmentPrintingTabSTAR,424,CorePkg,"STARenvironmentPrintingTabSTAR",true);
DO_SYMBOL(core,_sym_STARenvironmentPrintingTabIncrementSTAR,425,CorePkg,"STARenvironmentPrintingTabIncrementSTAR",true);
DO_SYMBOL(core,_sym__PLUS_activationFrameNil_PLUS_,426,CorePkg,"_PLUS_activationFrameNil_PLUS_",true);
DO_SYMBOL(core,_sym_parse_macro,427,CorePkg,"parse_macro",true);
DO_SYMBOL(core,_sym_globalFunction,428,CorePkg,"globalFunction",true);
DO_SYMBOL(core,_sym_globalSetfFunction,429,CorePkg,"globalSetfFunction",true);
DO_SYMBOL(core,_sym_lexicalFunction,430,CorePkg,"lexicalFunction",true);
DO_SYMBOL(core,_sym_declaredSpecial,431,CorePkg,"declaredSpecial",true);
DO_SYMBOL(core,_sym_lexical,432,CorePkg,"lexical",true);
DO_SYMBOL(core,_sym_STARsystem_defsetf_update_functionsSTAR,433,CorePkg,"STARsystem_defsetf_update_functionsSTAR",true);
DO_SYMBOL(core,_sym_STARbackquote_expand_hookSTAR,434,CorePkg,"STARbackquote_expand_hookSTAR",true);
DO_SYMBOL(core,_sym_single_dispatch_on,435,CorePkg,"single_dispatch_on",true);
DO_SYMBOL(core,_sym_STARdocumentation_poolSTAR,436,CorePkg,"STARdocumentation_poolSTAR",true);
DO_SYMBOL(core,_sym_STARexecutable_nameSTAR,437,CorePkg,"STARexecutable_nameSTAR",true);
DO_SYMBOL(core,_sym_generic,438,CorePkg,"generic",true);
DO_SYMBOL(core,_sym_DOT,439,CorePkg,"DOT",true);
DO_SYMBOL(core,_sym_AMPva_rest,440,CorePkg,"AMPva_rest",true);
DO_SYMBOL(core,_sym_anonymous,441,CorePkg,"anonymous",true);
DO_SYMBOL(core,_sym_macro,442,CorePkg,"macro",true);
DO_SYMBOL(core,_sym_STARdocumentation_databaseSTAR,443,CorePkg,"STARdocumentation_databaseSTAR",true);
DO_SYMBOL(core,_sym___init__,444,CorePkg,"__init__",true);
DO_SYMBOL(core,_sym_input_stream_designator,445,CorePkg,"input_stream_designator",true);
DO_SYMBOL(core,_sym_STARprint_source_code_consSTAR,446,CorePkg,"STARprint_source_code_consSTAR",true);
DO_SYMBOL(core,_sym_STARechoReplReadSTAR,447,CorePkg,"STARechoReplReadSTAR",true);
DO_SYMBOL(core,_sym_eof_error_p,448,CorePkg,"eof_error_p",true);
DO_SYMBOL(core,_sym_eof_value,449,CorePkg,"eof_value",true);
DO_SYMBOL(core,_sym_start,450,CorePkg,"start",true);
DO_SYMBOL(core,_sym_end,451,CorePkg,"end",true);
DO_SYMBOL(core,_sym_preserve_whitespace,452,CorePkg,"preserve_whitespace",true);
DO_SYMBOL(core,_sym_io,453,CorePkg,"io",true);
DO_SYMBOL(core,_sym_probe,454,CorePkg,"probe",true);
DO_SYMBOL(core,_sym_newVersion,455,CorePkg,"newVersion",true);
DO_SYMBOL(core,_sym_renameAndDelete,456,CorePkg,"renameAndDelete",true);
DO_SYMBOL(core,_sym_overwrite,457,CorePkg,"overwrite",true);
DO_SYMBOL(core,_sym_supersede,458,CorePkg,"supersede",true);
DO_SYMBOL(core,_sym_create,459,CorePkg,"create",true);
DO_SYMBOL(core,_sym_input_stream,460,CorePkg,"input_stream",true);
DO_SYMBOL(core,_sym_recursive_p,461,CorePkg,"recursive_p",true);
DO_SYMBOL(core,_sym_dimensions,462,CorePkg,"dimensions",true);
DO_SYMBOL(core,_sym_element_type,463,CorePkg,"element_type",true);
DO_SYMBOL(core,_sym_initial_element,464,CorePkg,"initial_element",true);
DO_SYMBOL(core,_sym_adjustable,465,CorePkg,"adjustable",true);
DO_SYMBOL(core,_sym_object,466,CorePkg,"object",true);
DO_SYMBOL(core,_sym_okey,467,CorePkg,"okey",true);
DO_SYMBOL(core,_sym_default,468,CorePkg,"default",true);
DO_SYMBOL(core,_sym_dot,469,CorePkg,"dot",true);
DO_SYMBOL(core,_sym_ifDoesNotExist,470,CorePkg,"ifDoesNotExist",true);
DO_SYMBOL(core,_sym_symbolMacroletLambda,471,CorePkg,"symbolMacroletLambda",true);
DO_SYMBOL(core,_sym_lambda_with_handler,472,CorePkg,"lambda_with_handler",true);
DO_SYMBOL(core,_sym_color,473,CorePkg,"color",true);
DO_SYMBOL(core,_sym_foreach,474,CorePkg,"foreach",true);
DO_SYMBOL(core,_sym_STARPATHSTAR,475,CorePkg,"STARPATHSTAR",true);
DO_SYMBOL(core,_sym_STARargsSTAR,476,CorePkg,"STARargsSTAR",true);
DO_SYMBOL(core,_sym_STARcurrent_working_directorySTAR,477,CorePkg,"STARcurrent_working_directorySTAR",true);
DO_SYMBOL(core,_sym_backquote,478,CorePkg,"backquote",true);
DO_SYMBOL(core,_sym_double_backquote,479,CorePkg,"double_backquote",true);
DO_SYMBOL(core,_sym_unquote,480,CorePkg,"unquote",true);
DO_SYMBOL(core,_sym_unquote_splice,481,CorePkg,"unquote_splice",true);
DO_SYMBOL(core,_sym_unquote_nsplice,482,CorePkg,"unquote_nsplice",true);
DO_SYMBOL(core,_sym_slot,483,CorePkg,"slot",true);
DO_SYMBOL(core,_sym_item,484,CorePkg,"item",true);
DO_SYMBOL(core,_sym_alist,485,CorePkg,"alist",true);
DO_SYMBOL(core,_sym_key,486,CorePkg,"key",true);
DO_SYMBOL(core,_sym_test_not,487,CorePkg,"test_not",true);
DO_SYMBOL(core,_sym_forward_referenced_class,488,CorePkg,"forward_referenced_class",true);
DO_SYMBOL(core,_sym_instance,489,CorePkg,"instance",true);
DO_SYMBOL(core,_sym_all_keys,490,CorePkg,"all_keys",true);
DO_SYMBOL(core,_sym_cl_fixnum_bits,491,CorePkg,"cl_fixnum_bits",true);
DO_SYMBOL(core,_sym_cArgumentsLimit,492,CorePkg,"cArgumentsLimit",true);
DO_SYMBOL(core,_sym_STARcommandLineArgumentsSTAR,493,CorePkg,"STARcommandLineArgumentsSTAR",true);
DO_SYMBOL(core,_sym_STARprintVersionOnStartupSTAR,494,CorePkg,"STARprintVersionOnStartupSTAR",true);
DO_SYMBOL(core,_sym_STARsilentStartupSTAR,495,CorePkg,"STARsilentStartupSTAR",true);
DO_SYMBOL(core,_sym_STARcommandLineLoadEvalSequenceSTAR,496,CorePkg,"STARcommandLineLoadEvalSequenceSTAR",true);
DO_SYMBOL(core,_sym_STARcommandLineImageSTAR,497,CorePkg,"STARcommandLineImageSTAR",true);
DO_SYMBOL(core,_sym_STARclassNameHashTableSTAR,498,CorePkg,"STARclassNameHashTableSTAR",true);
DO_SYMBOL(core,_sym_selectPackage,499,CorePkg,"selectPackage",true);
DO_SYMBOL(core,_sym_find_single_dispatch_generic_function,500,CorePkg,"find_single_dispatch_generic_function",true);
DO_SYMBOL(core,_sym_setf_find_single_dispatch_generic_function,501,CorePkg,"setf_find_single_dispatch_generic_function",true);
DO_SYMBOL(core,_sym_forget_all_single_dispatch_generic_functions,502,CorePkg,"forget_all_single_dispatch_generic_functions",true);
DO_SYMBOL(core,_sym_stackMonitor,503,CorePkg,"stackMonitor",true);
DO_SYMBOL(core,_sym_setupStackMonitor,504,CorePkg,"setupStackMonitor",true);
DO_SYMBOL(core,_sym_invokeInternalDebugger,505,CorePkg,"invokeInternalDebugger",true);
DO_SYMBOL(core,_sym_invokeInternalDebuggerFromGdb,506,CorePkg,"invokeInternalDebuggerFromGdb",true);
DO_SYMBOL(core,_sym_universalErrorHandler,507,CorePkg,"universalErrorHandler",true);
DO_SYMBOL(core,_sym_stackUsed,508,CorePkg,"stackUsed",true);
DO_SYMBOL(core,_sym_exit,509,CorePkg,"exit",true);
DO_SYMBOL(core,_sym_quit,510,CorePkg,"quit",true);
DO_SYMBOL(core,_sym_getline,511,CorePkg,"getline",true);
DO_SYMBOL(core,_sym_isTopLevelScript,512,CorePkg,"isTopLevelScript",true);
DO_SYMBOL(core,_sym_sourceFileName,513,CorePkg,"sourceFileName",true);
DO_SYMBOL(core,_sym_sourceLineColumn,514,CorePkg,"sourceLineColumn",true);
DO_SYMBOL(core,_sym_findFileInLispPath,515,CorePkg,"findFileInLispPath",true);
DO_SYMBOL(core,_sym_setf_findClass,516,CorePkg,"setf_findClass",true);
DO_SYMBOL(core,_sym_isAssignableTo,517,CorePkg,"isAssignableTo",true);
DO_SYMBOL(core,_sym_isSubClassOf,518,CorePkg,"isSubClassOf",true);
DO_SYMBOL(core,_sym_repr,519,CorePkg,"repr",true);
DO_SYMBOL(core,_sym_debugLogOn,520,CorePkg,"debugLogOn",true);
DO_SYMBOL(core,_sym_debugLogOff,521,CorePkg,"debugLogOff",true);
DO_SYMBOL(core,_sym_mpi_enabled,522,CorePkg,"mpi_enabled",true);
DO_SYMBOL(core,_sym_mpi_rank,523,CorePkg,"mpi_rank",true);
DO_SYMBOL(core,_sym_mpi_size,524,CorePkg,"mpi_size",true);
DO_SYMBOL(core,_sym_sorted,525,CorePkg,"sorted",true);
DO_SYMBOL(core,_sym_database_dir,526,CorePkg,"database_dir",true);
DO_SYMBOL(core,_sym_script_dir,527,CorePkg,"script_dir",true);
DO_SYMBOL(core,_sym_libraryPath,528,CorePkg,"libraryPath",true);
DO_SYMBOL(core,_sym_lispCodePath,529,CorePkg,"lispCodePath",true);
DO_SYMBOL(core,_sym_setCurrentWorkingDirectory,530,CorePkg,"setCurrentWorkingDirectory",true);
DO_SYMBOL(core,_sym_member1,531,CorePkg,"member1",true);
DO_SYMBOL(core,_sym_exportToPython,532,CorePkg,"exportToPython",true);
DO_SYMBOL(core,_sym_slBoundp,533,CorePkg,"slBoundp",true);
DO_SYMBOL(core,_sym_isNil,534,CorePkg,"isNil",true);
DO_SYMBOL(core,_sym_instanceRef,535,CorePkg,"instanceRef",true);
DO_SYMBOL(core,_sym_instanceSet,536,CorePkg,"instanceSet",true);
DO_SYMBOL(core,_sym_instancep,537,CorePkg,"instancep",true);
DO_SYMBOL(core,_sym_instanceSigSet,538,CorePkg,"instanceSigSet",true);
DO_SYMBOL(core,_sym_instanceSig,539,CorePkg,"instanceSig",true);
DO_SYMBOL(core,_sym_instanceClass,540,CorePkg,"instanceClass",true);
DO_SYMBOL(core,_sym_implementationClass,541,CorePkg,"implementationClass",true);
DO_SYMBOL(core,_sym_classNameAsString,542,CorePkg,"classNameAsString",true);
DO_SYMBOL(core,_sym_clock_gettime_nanoseconds,543,CorePkg,"clock_gettime_nanoseconds",true);
DO_SYMBOL(core,_sym_testProfileTimer,544,CorePkg,"testProfileTimer",true);
DO_SYMBOL(core,_sym_structure_print_function,545,CorePkg,"structure_print_function",true);
DO_SYMBOL(core,_sym_STARprint_structureSTAR,546,CorePkg,"STARprint_structureSTAR",true);
DO_SYMBOL(core,_sym_makeRegex,547,CorePkg,"makeRegex",true);
DO_SYMBOL(core,_sym_serialize,548,CorePkg,"serialize",true);
DO_SYMBOL(core,_sym_STARserializerArchiveSTAR,549,CorePkg,"STARserializerArchiveSTAR",true);
DO_SYMBOL(core,_sym_STARsharp_equal_alistSTAR,550,CorePkg,"STARsharp_equal_alistSTAR",true);
DO_SYMBOL(core,_sym_STARsharp_sharp_alistSTAR,551,CorePkg,"STARsharp_sharp_alistSTAR",true);
DO_SYMBOL(core,_sym_STARconsing_dot_allowedSTAR,552,CorePkg,"STARconsing_dot_allowedSTAR",true);
DO_SYMBOL(core,_sym_STARconsing_dotSTAR,553,CorePkg,"STARconsing_dotSTAR",true);
DO_SYMBOL(core,_sym_STARpreserve_whitespace_pSTAR,554,CorePkg,"STARpreserve_whitespace_pSTAR",true);
DO_SYMBOL(core,_sym_STARinput_streamSTAR,555,CorePkg,"STARinput_streamSTAR",true);
DO_SYMBOL(core,_sym_STARbackquote_levelSTAR,556,CorePkg,"STARbackquote_levelSTAR",true);
DO_SYMBOL(core,_sym_STARstandard_readtableSTAR,557,CorePkg,"STARstandard_readtableSTAR",true);
DO_SYMBOL(core,_sym_read_list_allow_consing_dot,558,CorePkg,"read_list_allow_consing_dot",true);
DO_SYMBOL(core,_sym_reader_read_double_quote_string,559,CorePkg,"reader_read_double_quote_string",true);
DO_SYMBOL(core,_sym_reader_backquoted_expression,560,CorePkg,"reader_backquoted_expression",true);
DO_SYMBOL(core,_sym_sharp_backslash,561,CorePkg,"sharp_backslash",true);
DO_SYMBOL(core,_sym_sharp_single_quote,562,CorePkg,"sharp_single_quote",true);
DO_SYMBOL(core,_sym_sharp_left_parenthesis,563,CorePkg,"sharp_left_parenthesis",true);
DO_SYMBOL(core,_sym_sharp_asterisk,564,CorePkg,"sharp_asterisk",true);
DO_SYMBOL(core,_sym_sharp_colon,565,CorePkg,"sharp_colon",true);
DO_SYMBOL(core,_sym_sharp_dot,566,CorePkg,"sharp_dot",true);
DO_SYMBOL(core,_sym_sharp_b,567,CorePkg,"sharp_b",true);
DO_SYMBOL(core,_sym_sharp_o,568,CorePkg,"sharp_o",true);
DO_SYMBOL(core,_sym_sharp_x,569,CorePkg,"sharp_x",true);
DO_SYMBOL(core,_sym_sharp_r,570,CorePkg,"sharp_r",true);
DO_SYMBOL(core,_sym_sharp_c,571,CorePkg,"sharp_c",true);
DO_SYMBOL(core,_sym_sharp_a,572,CorePkg,"sharp_a",true);
DO_SYMBOL(core,_sym_sharp_s,573,CorePkg,"sharp_s",true);
DO_SYMBOL(core,_sym_sharp_p,574,CorePkg,"sharp_p",true);
DO_SYMBOL(core,_sym_sharp_plus,575,CorePkg,"sharp_plus",true);
DO_SYMBOL(core,_sym_sharp_minus,576,CorePkg,"sharp_minus",true);
DO_SYMBOL(core,_sym_sharp_vertical_bar,577,CorePkg,"sharp_vertical_bar",true);
DO_SYMBOL(core,_sym_dispatch_macro_character,578,CorePkg,"dispatch_macro_character",true);
DO_SYMBOL(core,_sym_reader_double_quote_string,579,CorePkg,"reader_double_quote_string",true);
DO_SYMBOL(core,_sym_reader_comma_form,580,CorePkg,"reader_comma_form",true);
DO_SYMBOL(core,_sym_reader_list_allow_consing_dot,581,CorePkg,"reader_list_allow_consing_dot",true);
DO_SYMBOL(core,_sym_reader_error_unmatched_close_parenthesis,582,CorePkg,"reader_error_unmatched_close_parenthesis",true);
DO_SYMBOL(core,_sym_reader_quote,583,CorePkg,"reader_quote",true);
DO_SYMBOL(core,_sym_reader_skip_semicolon_comment,584,CorePkg,"reader_skip_semicolon_comment",true);
DO_SYMBOL(core,_sym_reader_feature_p,585,CorePkg,"reader_feature_p",true);
DO_SYMBOL(core,_sym_float_to_digits,586,CorePkg,"float_to_digits",true);
DO_SYMBOL(core,_sym_defaultPathnameDefaults,587,CorePkg,"defaultPathnameDefaults",true);
DO_SYMBOL(core,_sym_coerceToFilename,588,CorePkg,"coerceToFilename",true);
DO_SYMBOL(core,_sym_coerceToFilePathname,589,CorePkg,"coerceToFilePathname",true);
DO_SYMBOL(core,_sym_pathnameTranslations,590,CorePkg,"pathnameTranslations",true);
DO_SYMBOL(core,_sym_coerceToPhysicalPathname,591,CorePkg,"coerceToPhysicalPathname",true);
DO_SYMBOL(core,_sym_argument_number_error,592,CorePkg,"argument_number_error",true);
DO_SYMBOL(core,_sym_signalSimpleError,593,CorePkg,"signalSimpleError",true);
DO_SYMBOL(core,_sym_wrongTypeNthArg,594,CorePkg,"wrongTypeNthArg",true);
DO_SYMBOL(core,_sym_wrongIndex,595,CorePkg,"wrongIndex",true);
DO_SYMBOL(core,_sym_subclassp,596,CorePkg,"subclassp",true);
DO_SYMBOL(core,_sym_allocateRawClass,597,CorePkg,"allocateRawClass",true);
DO_SYMBOL(core,_sym_inheritDefaultAllocator,598,CorePkg,"inheritDefaultAllocator",true);
DO_SYMBOL(core,_sym_isString,599,CorePkg,"isString",true);
DO_SYMBOL(core,_sym_isArray,600,CorePkg,"isArray",true);
DO_SYMBOL(core,_sym_testVal,601,CorePkg,"testVal",true);
DO_SYMBOL(core,_sym__SHARP__BANG_,602,CorePkg,"_SHARP__BANG_",true);
DO_SYMBOL(core,_sym_base_string_concatenate,603,CorePkg,"base_string_concatenate",true);
DO_SYMBOL(core,_sym_calculateMissingCommonLispSymbols,604,CorePkg,"calculateMissingCommonLispSymbols",true);
DO_SYMBOL(core,_sym_copy_subarray,605,CorePkg,"copy_subarray",true);
DO_SYMBOL(core,_sym_aset,606,CorePkg,"aset",true);
DO_SYMBOL(core,_sym_rem_f,607,CorePkg,"rem_f",true);
DO_SYMBOL(core,_sym_put_f,608,CorePkg,"put_f",true);
DO_SYMBOL(core,_sym_conditionMessage,609,CorePkg,"conditionMessage",true);
DO_SYMBOL(core,_sym_put_sysprop,610,CorePkg,"put_sysprop",true);
DO_SYMBOL(core,_sym_get_sysprop,611,CorePkg,"get_sysprop",true);
DO_SYMBOL(core,_sym_rem_sysprop,612,CorePkg,"rem_sysprop",true);
DO_SYMBOL(core,_sym_bformat,613,CorePkg,"bformat",true);
DO_SYMBOL(core,_sym_STARbq_listSTAR,614,CorePkg,"STARbq_listSTAR",true);
DO_SYMBOL(core,_sym_STARbq_appendSTAR,615,CorePkg,"STARbq_appendSTAR",true);
DO_SYMBOL(core,_sym_STARbq_listSTARSTAR,616,CorePkg,"STARbq_listSTARSTAR",true);
DO_SYMBOL(core,_sym_STARbq_nconcSTAR,617,CorePkg,"STARbq_nconcSTAR",true);
DO_SYMBOL(core,_sym_STARbq_clobberableSTAR,618,CorePkg,"STARbq_clobberableSTAR",true);
DO_SYMBOL(core,_sym_STARbq_quoteSTAR,619,CorePkg,"STARbq_quoteSTAR",true);
DO_SYMBOL(core,_sym_STARbq_quote_nilSTAR,620,CorePkg,"STARbq_quote_nilSTAR",true);
DO_SYMBOL(core,_sym_bq_simplify,621,CorePkg,"bq_simplify",true);
DO_SYMBOL(core,_sym_bq_remove_tokens,622,CorePkg,"bq_remove_tokens",true);
DO_SYMBOL(core,_sym_backquote_maptree,623,CorePkg,"backquote_maptree",true);
DO_SYMBOL(core,_sym_backquote_simplify,624,CorePkg,"backquote_simplify",true);
DO_SYMBOL(core,_sym_backquote_completely_process,625,CorePkg,"backquote_completely_process",true);
DO_SYMBOL(core,_sym_backquote_process,626,CorePkg,"backquote_process",true);
DO_SYMBOL(core,_sym_backquote_bracket,627,CorePkg,"backquote_bracket",true);
DO_SYMBOL(core,_sym_backquote_null_or_quoted,628,CorePkg,"backquote_null_or_quoted",true);
DO_SYMBOL(core,_sym_backquote_attach_append,629,CorePkg,"backquote_attach_append",true);
DO_SYMBOL(core,_sym_backquote_attach_conses,630,CorePkg,"backquote_attach_conses",true);
DO_SYMBOL(core,_sym_backquote_remove_tokens,631,CorePkg,"backquote_remove_tokens",true);
DO_SYMBOL(core,_sym_backquote_frob,632,CorePkg,"backquote_frob",true);
DO_SYMBOL(core,_sym_backquote_splicing_frob,633,CorePkg,"backquote_splicing_frob",true);
DO_SYMBOL(core,_sym_backquote_append,634,CorePkg,"backquote_append",true);
DO_SYMBOL(core,_sym_quasiquote,635,CorePkg,"quasiquote",true);
DO_SYMBOL(core,_sym_STARbq_simplifySTAR,636,CorePkg,"STARbq_simplifySTAR",true);
DO_SYMBOL(core,_sym_record_cons,637,CorePkg,"record_cons",true);
DO_SYMBOL(core,_sym_record_field,638,CorePkg,"record_field",true);
DO_SYMBOL(core,_sym_set_record_field,639,CorePkg,"set_record_field",true);
DO_SYMBOL(core,_sym_rem_record_field,640,CorePkg,"rem_record_field",true);
DO_SYMBOL(core,_sym_ensure_documentation,641,CorePkg,"ensure_documentation",true);
DO_SYMBOL(core,_sym_STARsharp_equal_final_tableSTAR,642,CorePkg,"STARsharp_equal_final_tableSTAR",true);
DO_SYMBOL(core,_sym_STARsharp_equal_temp_tableSTAR,643,CorePkg,"STARsharp_equal_temp_tableSTAR",true);
DO_SYMBOL(core,_sym_STARsharp_equal_repl_tableSTAR,644,CorePkg,"STARsharp_equal_repl_tableSTAR",true);
DO_SYMBOL(core,_sym_ensureSingleDispatchGenericFunction,645,CorePkg,"ensureSingleDispatchGenericFunction",true);
DO_SYMBOL(core,_sym_ensureSingleDispatchMethod,646,CorePkg,"ensureSingleDispatchMethod",true);
DO_SYMBOL(core,_sym_structure_include,647,CorePkg,"structure_include",true);
DO_SYMBOL(core,_sym_structure_slot_descriptions,648,CorePkg,"structure_slot_descriptions",true);
DO_SYMBOL(core,_sym_structureRef,649,CorePkg,"structureRef",true);
DO_SYMBOL(core,_sym_structureSet,650,CorePkg,"structureSet",true);
DO_SYMBOL(core,_sym_makeStructure,651,CorePkg,"makeStructure",true);
DO_SYMBOL(core,_sym_structurep,652,CorePkg,"structurep",true);
DO_SYMBOL(core,_sym_structureSubtypep,653,CorePkg,"structureSubtypep",true);
DO_SYMBOL(core,_sym_setfElt,654,CorePkg,"setfElt",true);
DO_SYMBOL(core,_sym_eltSet,655,CorePkg,"eltSet",true);
DO_SYMBOL(core,_sym_setfSubseq,656,CorePkg,"setfSubseq",true);
DO_SYMBOL(core,_sym_make_vector,657,CorePkg,"make_vector",true);
DO_SYMBOL(core,_sym_adjustVector,658,CorePkg,"adjustVector",true);
DO_SYMBOL(core,_sym_loadTimeValuesIds,659,CorePkg,"loadTimeValuesIds",true);
DO_SYMBOL(core,_sym_loadTimeValueArray,660,CorePkg,"loadTimeValueArray",true);
DO_SYMBOL(core,_sym_lookupLoadTimeValue,661,CorePkg,"lookupLoadTimeValue",true);
DO_SYMBOL(core,_sym_lookupLoadTimeSymbol,662,CorePkg,"lookupLoadTimeSymbol",true);
DO_SYMBOL(core,_sym_setRunTimeValuesVector,663,CorePkg,"setRunTimeValuesVector",true);
DO_SYMBOL(core,_sym_ExternalObject_O,664,CorePkg,"ExternalObject",true);
DO_SYMBOL(core,_sym_ForeignData_O,665,CorePkg,"ForeignData",true);
DO_SYMBOL(core,_sym_LambdaListHandler_O,666,CorePkg,"LambdaListHandler",true);
DO_SYMBOL(core,_sym_LightUserData_O,667,CorePkg,"LightUserData",true);
DO_SYMBOL(core,_sym_UserData_O,668,CorePkg,"UserData",true);
DO_SYMBOL(core,_sym_LoadTimeValues_O,669,CorePkg,"LoadTimeValues",true);
DO_SYMBOL(core,_sym_MultiStringBuffer_O,670,CorePkg,"MultiStringBuffer",true);
DO_SYMBOL(core,_sym_PosixTime_O,671,CorePkg,"PosixTime",true);
DO_SYMBOL(core,_sym_PosixTimeDuration_O,672,CorePkg,"PosixTimeDuration",true);
DO_SYMBOL(core,_sym_RegexMatch_O,673,CorePkg,"RegexMatch",true);
DO_SYMBOL(core,_sym_Regex_O,674,CorePkg,"Regex",true);
DO_SYMBOL(core,_sym_SingleDispatchMethod_O,675,CorePkg,"SingleDispatchMethod",true);
DO_SYMBOL(core,_sym_SmallMultimap_O,676,CorePkg,"SmallMultimap",true);
DO_SYMBOL(core,_sym_WeakKeyMapping_O,677,CorePkg,"WeakKeyMapping",true);
DO_SYMBOL(core,_sym_WeakPointer_O,678,CorePkg,"WeakPointer",true);
DO_SYMBOL(core,_sym_Instance_O,679,CorePkg,"Instance",true);
DO_SYMBOL(core,_sym_WrappedPointer_O,680,CorePkg,"WrappedPointer",true);
DO_SYMBOL(core,_sym_ArrayDisplaced_O,681,CorePkg,"ArrayDisplaced",true);
DO_SYMBOL(core,_sym_ArrayObjects_O,682,CorePkg,"ArrayObjects",true);
DO_SYMBOL(core,_sym_HashTableEqualp_O,683,CorePkg,"HashTableEqualp",true);
DO_SYMBOL(core,_sym_SingleDispatchEffectiveMethodFunction_O,684,CorePkg,"SingleDispatchEffectiveMethodFunction",true);
DO_SYMBOL(core,_sym_SingleDispatchGenericFunction_O,685,CorePkg,"single-dispatch-generic-function",true);
DO_SYMBOL(core,_sym_SpecialForm_O,686,CorePkg,"SpecialForm",true);
DO_SYMBOL(core,_sym_SexpLoadArchive_O,687,CorePkg,"SexpLoadArchive",true);
DO_SYMBOL(core,_sym_SexpSaveArchive_O,688,CorePkg,"SexpSaveArchive",true);
DO_SYMBOL(core,_sym_VectorDisplaced_O,689,CorePkg,"VectorDisplaced",true);
DO_SYMBOL(core,_sym_CxxClass_O,690,CorePkg,"CxxClass",true);
DO_SYMBOL(core,_sym_ForwardReferencedClass_O,691,CorePkg,"ForwardReferencedClass",true);
DO_SYMBOL(core,_sym_StrWithFillPtr_O,692,CorePkg,"base-string-with-fill-ptr",true);
DO_SYMBOL(core,_sym_InvocationHistoryFrameIterator_O,693,CorePkg,"InvocationHistoryFrameIterator",true);
DO_SYMBOL(core,_sym_Reader_O,694,CorePkg,"Reader",true);
DO_SYMBOL(core,_sym_HashTableEqual_O,695,CorePkg,"HashTableEqual",true);
DO_SYMBOL(core,_sym_Binder_O,696,CorePkg,"Binder",true);
DO_SYMBOL(core,_sym_Path_O,697,CorePkg,"path",true);
DO_SYMBOL(core,_sym_DirectoryIterator_O,698,CorePkg,"DirectoryIterator",true);
DO_SYMBOL(core,_sym_RecursiveDirectoryIterator_O,699,CorePkg,"RecursiveDirectoryIterator",true);
DO_SYMBOL(core,_sym_DirectoryEntry_O,700,CorePkg,"DirectoryEntry",true);
DO_SYMBOL(core,_sym_FileStatus_O,701,CorePkg,"FileStatus",true);
DO_SYMBOL(core,_sym_IntArray_O,702,CorePkg,"IntArray",true);
DO_SYMBOL(core,_sym_Iterator_O,703,CorePkg,"Iterator",true);
DO_SYMBOL(core,_sym_IOFileStream_O,704,CorePkg,"iofile-stream",true);
DO_SYMBOL(core,_sym_IOStreamStream_O,705,CorePkg,"iostream-stream",true);
DO_SYMBOL(core,_sym_StringOutputStream_O,706,CorePkg,"string-output-stream",true);
DO_SYMBOL(core,_sym_StringInputStream_O,707,CorePkg,"string-input-stream",true);
DO_SYMBOL(core,_sym_CandoException_O,708,CorePkg,"CandoException",true);
DO_SYMBOL(core,_sym_VaList_dummy_O,709,CorePkg,"VA-LIST",true);
DO_SYMBOL(core,_sym_Pointer_O,710,CorePkg,"Pointer",true);
DO_SYMBOL(core,_sym_Environment_O,711,CorePkg,"Environment",true);
DO_SYMBOL(core,_sym_LexicalEnvironment_O,712,CorePkg,"LexicalEnvironment",true);
DO_SYMBOL(core,_sym_RuntimeVisibleEnvironment_O,713,CorePkg,"RuntimeVisibleEnvironment",true);
DO_SYMBOL(core,_sym_ValueEnvironment_O,714,CorePkg,"ValueEnvironment",true);
DO_SYMBOL(core,_sym_FunctionValueEnvironment_O,715,CorePkg,"FunctionValueEnvironment",true);
DO_SYMBOL(core,_sym_CompileTimeEnvironment_O,716,CorePkg,"CompileTimeEnvironment",true);
DO_SYMBOL(core,_sym_UnwindProtectEnvironment_O,717,CorePkg,"UnwindProtectEnvironment",true);
DO_SYMBOL(core,_sym_BlockEnvironment_O,718,CorePkg,"BlockEnvironment",true);
DO_SYMBOL(core,_sym_CatchEnvironment_O,719,CorePkg,"CatchEnvironment",true);
DO_SYMBOL(core,_sym_FunctionContainerEnvironment_O,720,CorePkg,"FunctionContainerEnvironment",true);
DO_SYMBOL(core,_sym_TagbodyEnvironment_O,721,CorePkg,"TagbodyEnvironment",true);
DO_SYMBOL(core,_sym_MacroletEnvironment_O,722,CorePkg,"MacroletEnvironment",true);
DO_SYMBOL(core,_sym_SymbolMacroletEnvironment_O,723,CorePkg,"SymbolMacroletEnvironment",true);
DO_SYMBOL(core,_sym_StackValueEnvironment_O,724,CorePkg,"StackValueEnvironment",true);
DO_SYMBOL(core,_sym_GlueEnvironment_O,725,CorePkg,"GlueEnvironment",true);
DO_SYMBOL(core,_sym_ActivationFrame_O,726,CorePkg,"ActivationFrame",true);
DO_SYMBOL(core,_sym_ValueFrame_O,727,CorePkg,"ValueFrame",true);
DO_SYMBOL(core,_sym_FunctionFrame_O,728,CorePkg,"FunctionFrame",true);
DO_SYMBOL(core,_sym_TagbodyFrame_O,729,CorePkg,"TagbodyFrame",true);
DO_SYMBOL(core,_sym_Metaobject_O,730,CorePkg,"metaobject",true);
DO_SYMBOL(core,_sym_Specializer_O,731,CorePkg,"specializer",true);
DO_SYMBOL(core,_sym_WeakHashTable_O,732,CorePkg,"WeakHashTable",true);
DO_SYMBOL(core,_sym_WeakKeyHashTable_O,733,CorePkg,"WeakKeyHashTable",true);
DO_SYMBOL(core,_sym_SourceFileInfo_O,734,CorePkg,"SourceFileInfo",true);
DO_SYMBOL(core,_sym_SourcePosInfo_O,735,CorePkg,"SourcePosInfo",true);
DO_SYMBOL(core,_sym_SourceManager_O,736,CorePkg,"SourceManager",true);
DO_SYMBOL(core,_sym_CxxObject_O,737,CorePkg,"CxxObject",true);
DO_SYMBOL(core,_sym_Record_O,738,CorePkg,"Record",true);
DO_SYMBOL(core,_sym_HashTableEql_O,739,CorePkg,"HashTableEql",true);
DO_SYMBOL(core,_sym_HashTableEq_O,740,CorePkg,"HashTableEq",true);
DO_SYMBOL(core,_sym_VectorObjects_O,741,CorePkg,"VectorObjects",true);
DO_SYMBOL(core,_sym_VectorObjectsWithFillPtr_O,742,CorePkg,"VectorObjectsWithFillPtr",true);
DO_SYMBOL(core,_sym_SymbolToEnumConverter_O,743,CorePkg,"SymbolToEnumConverter",true);
DO_SYMBOL(core,_sym_SNode_O,744,CorePkg,"SNode",true);
DO_SYMBOL(core,_sym_LeafSNode_O,745,CorePkg,"LeafSNode",true);
DO_SYMBOL(core,_sym_BranchSNode_O,746,CorePkg,"BranchSNode",true);
DO_SYMBOL(core,_sym_Archive_O,747,CorePkg,"Archive",true);
DO_SYMBOL(core,_sym_LoadArchive_O,748,CorePkg,"LoadArchive",true);
DO_SYMBOL(core,_sym_SaveArchive_O,749,CorePkg,"SaveArchive",true);
DO_SYMBOL(core,_sym_SmallMap_O,750,CorePkg,"SmallMap",true);
#endif // CorePkg_SYMBOLS
#if defined(ClPkg_SYMBOLS)
DO_SYMBOL(cl,_sym_case,751,ClPkg,"case",true);
DO_SYMBOL(cl,_sym_otherwise,752,ClPkg,"otherwise",true);
DO_SYMBOL(cl,_sym_ignore,753,ClPkg,"ignore",true);
DO_SYMBOL(cl,_sym_multipleValueSetq,754,ClPkg,"multipleValueSetq",true);
DO_SYMBOL(cl,_sym_prog1,755,ClPkg,"prog1",true);
DO_SYMBOL(cl,_sym_block,756,ClPkg,"block",true);
DO_SYMBOL(cl,_sym_throw,757,ClPkg,"throw",true);
DO_SYMBOL(cl,_sym_apply,758,ClPkg,"apply",true);
DO_SYMBOL(cl,_sym_funcall,759,ClPkg,"funcall",true);
DO_SYMBOL(cl,_sym_compute_applicable_methods,760,ClPkg,"compute_applicable_methods",true);
DO_SYMBOL(cl,_sym_no_applicable_method,761,ClPkg,"no_applicable_method",true);
DO_SYMBOL(cl,_sym_standardGenericFunction,762,ClPkg,"standardGenericFunction",true);
DO_SYMBOL(cl,_sym_sleep,763,ClPkg,"sleep",true);
DO_SYMBOL(cl,_sym_let,764,ClPkg,"let",true);
DO_SYMBOL(cl,_sym_letSTAR,765,ClPkg,"letSTAR",true);
DO_SYMBOL(cl,_sym_return_from,766,ClPkg,"return_from",true);
DO_SYMBOL(cl,_sym_catch,767,ClPkg,"catch",true);
DO_SYMBOL(cl,_sym_load_time_value,768,ClPkg,"load_time_value",true);
DO_SYMBOL(cl,_sym_setq,769,ClPkg,"setq",true);
DO_SYMBOL(cl,_sym_eval_when,770,ClPkg,"eval_when",true);
DO_SYMBOL(cl,_sym_locally,771,ClPkg,"locally",true);
DO_SYMBOL(cl,_sym_symbol_macrolet,772,ClPkg,"symbol_macrolet",true);
DO_SYMBOL(cl,_sym_flet,773,ClPkg,"flet",true);
DO_SYMBOL(cl,_sym_macrolet,774,ClPkg,"macrolet",true);
DO_SYMBOL(cl,_sym_tagbody,775,ClPkg,"tagbody",true);
DO_SYMBOL(cl,_sym_multiple_value_call,776,ClPkg,"multiple_value_call",true);
DO_SYMBOL(cl,_sym_the,777,ClPkg,"the",true);
DO_SYMBOL(cl,_sym_go,778,ClPkg,"go",true);
DO_SYMBOL(cl,_sym_multiple_value_prog1,779,ClPkg,"multiple_value_prog1",true);
DO_SYMBOL(cl,_sym_if,780,ClPkg,"if",true);
DO_SYMBOL(cl,_sym_unwind_protect,781,ClPkg,"unwind_protect",true);
DO_SYMBOL(cl,_sym_labels,782,ClPkg,"labels",true);
DO_SYMBOL(cl,_sym_progv,783,ClPkg,"progv",true);
DO_SYMBOL(cl,_sym_setf,784,ClPkg,"setf",true);
DO_SYMBOL(cl,_sym_read,785,ClPkg,"read",true);
DO_SYMBOL(cl,_sym_read_preserving_whitespace,786,ClPkg,"read_preserving_whitespace",true);
DO_SYMBOL(cl,_sym_read_delimited_list,787,ClPkg,"read_delimited_list",true);
DO_SYMBOL(cl,_sym_every,788,ClPkg,"every",true);
DO_SYMBOL(cl,_sym_some,789,ClPkg,"some",true);
DO_SYMBOL(cl,_sym_notevery,790,ClPkg,"notevery",true);
DO_SYMBOL(cl,_sym_notany,791,ClPkg,"notany",true);
DO_SYMBOL(cl,_sym_mapcar,792,ClPkg,"mapcar",true);
DO_SYMBOL(cl,_sym_mapc,793,ClPkg,"mapc",true);
DO_SYMBOL(cl,_sym_maplist,794,ClPkg,"maplist",true);
DO_SYMBOL(cl,_sym_mapl,795,ClPkg,"mapl",true);
DO_SYMBOL(cl,_sym_mapcan,796,ClPkg,"mapcan",true);
DO_SYMBOL(cl,_sym_mapcon,797,ClPkg,"mapcon",true);
DO_SYMBOL(cl,_sym_classOf,798,ClPkg,"classOf",true);
DO_SYMBOL(cl,_sym_identity,799,ClPkg,"identity",true);
DO_SYMBOL(cl,_sym_constantp,800,ClPkg,"constantp",true);
DO_SYMBOL(cl,_sym_ash,801,ClPkg,"ash",true);
DO_SYMBOL(cl,_sym_specialOperatorP,802,ClPkg,"specialOperatorP",true);
DO_SYMBOL(cl,_sym_macroFunction,803,ClPkg,"macroFunction",true);
DO_SYMBOL(cl,_sym_gensym,804,ClPkg,"gensym",true);
DO_SYMBOL(cl,_sym_type_of,805,ClPkg,"type_of",true);
DO_SYMBOL(cl,_sym_fdefinition,806,ClPkg,"fdefinition",true);
DO_SYMBOL(cl,_sym_fboundp,807,ClPkg,"fboundp",true);
DO_SYMBOL(cl,_sym_fmakunbound,808,ClPkg,"fmakunbound",true);
DO_SYMBOL(cl,_sym_values_list,809,ClPkg,"values_list",true);
DO_SYMBOL(cl,_sym_make_hash_table,810,ClPkg,"make_hash_table",true);
DO_SYMBOL(cl,_sym_maphash,811,ClPkg,"maphash",true);
DO_SYMBOL(cl,_sym_clrhash,812,ClPkg,"clrhash",true);
DO_SYMBOL(cl,_sym_remhash,813,ClPkg,"remhash",true);
DO_SYMBOL(cl,_sym_max,814,ClPkg,"max",true);
DO_SYMBOL(cl,_sym_min,815,ClPkg,"min",true);
DO_SYMBOL(cl,_sym_zerop,816,ClPkg,"zerop",true);
DO_SYMBOL(cl,_sym__LT_,817,ClPkg,"_LT_",true);
DO_SYMBOL(cl,_sym__GT_,818,ClPkg,"_GT_",true);
DO_SYMBOL(cl,_sym__LE_,819,ClPkg,"_LE_",true);
DO_SYMBOL(cl,_sym__GE_,820,ClPkg,"_GE_",true);
DO_SYMBOL(cl,_sym__EQ_,821,ClPkg,"_EQ_",true);
DO_SYMBOL(cl,_sym__NE_,822,ClPkg,"_NE_",true);
DO_SYMBOL(cl,_sym__PLUS_,823,ClPkg,"_PLUS_",true);
DO_SYMBOL(cl,_sym__TIMES_,824,ClPkg,"_TIMES_",true);
DO_SYMBOL(cl,_sym__MINUS_,825,ClPkg,"_MINUS_",true);
DO_SYMBOL(cl,_sym_logand,826,ClPkg,"logand",true);
DO_SYMBOL(cl,_sym_logior,827,ClPkg,"logior",true);
DO_SYMBOL(cl,_sym_logandc1,828,ClPkg,"logandc1",true);
DO_SYMBOL(cl,_sym_logandc2,829,ClPkg,"logandc2",true);
DO_SYMBOL(cl,_sym_logeqv,830,ClPkg,"logeqv",true);
DO_SYMBOL(cl,_sym_lognand,831,ClPkg,"lognand",true);
DO_SYMBOL(cl,_sym_lognor,832,ClPkg,"lognor",true);
DO_SYMBOL(cl,_sym_lognot,833,ClPkg,"lognot",true);
DO_SYMBOL(cl,_sym_logorc1,834,ClPkg,"logorc1",true);
DO_SYMBOL(cl,_sym_logorc2,835,ClPkg,"logorc2",true);
DO_SYMBOL(cl,_sym_logxor,836,ClPkg,"logxor",true);
DO_SYMBOL(cl,_sym_sqrt,837,ClPkg,"sqrt",true);
DO_SYMBOL(cl,_sym_cos,838,ClPkg,"cos",true);
DO_SYMBOL(cl,_sym_tan,839,ClPkg,"tan",true);
DO_SYMBOL(cl,_sym_sinh,840,ClPkg,"sinh",true);
DO_SYMBOL(cl,_sym_cosh,841,ClPkg,"cosh",true);
DO_SYMBOL(cl,_sym_tanh,842,ClPkg,"tanh",true);
DO_SYMBOL(cl,_sym_conjugate,843,ClPkg,"conjugate",true);
DO_SYMBOL(cl,_sym_log,844,ClPkg,"log",true);
DO_SYMBOL(cl,_sym_expt,845,ClPkg,"expt",true);
DO_SYMBOL(cl,_sym_exp,846,ClPkg,"exp",true);
DO_SYMBOL(cl,_sym_getUniversalTime,847,ClPkg,"getUniversalTime",true);
DO_SYMBOL(cl,_sym_leastPositiveSingleFloat,848,ClPkg,"leastPositiveSingleFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeSingleFloat,849,ClPkg,"leastNegativeSingleFloat",true);
DO_SYMBOL(cl,_sym_mostPositiveSingleFloat,850,ClPkg,"mostPositiveSingleFloat",true);
DO_SYMBOL(cl,_sym_mostNegativeSingleFloat,851,ClPkg,"mostNegativeSingleFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveShortFloat,852,ClPkg,"leastPositiveShortFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeShortFloat,853,ClPkg,"leastNegativeShortFloat",true);
DO_SYMBOL(cl,_sym_mostPositiveShortFloat,854,ClPkg,"mostPositiveShortFloat",true);
DO_SYMBOL(cl,_sym_mostNegativeShortFloat,855,ClPkg,"mostNegativeShortFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveDoubleFloat,856,ClPkg,"leastPositiveDoubleFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeDoubleFloat,857,ClPkg,"leastNegativeDoubleFloat",true);
DO_SYMBOL(cl,_sym_mostPositiveDoubleFloat,858,ClPkg,"mostPositiveDoubleFloat",true);
DO_SYMBOL(cl,_sym_mostNegativeDoubleFloat,859,ClPkg,"mostNegativeDoubleFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveLongFloat,860,ClPkg,"leastPositiveLongFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeLongFloat,861,ClPkg,"leastNegativeLongFloat",true);
DO_SYMBOL(cl,_sym_mostPositiveLongFloat,862,ClPkg,"mostPositiveLongFloat",true);
DO_SYMBOL(cl,_sym_mostNegativeLongFloat,863,ClPkg,"mostNegativeLongFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeNormalizedSingleFloat,864,ClPkg,"leastNegativeNormalizedSingleFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeNormalizedShortFloat,865,ClPkg,"leastNegativeNormalizedShortFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeNormalizedDoubleFloat,866,ClPkg,"leastNegativeNormalizedDoubleFloat",true);
DO_SYMBOL(cl,_sym_leastNegativeNormalizedLongFloat,867,ClPkg,"leastNegativeNormalizedLongFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveNormalizedSingleFloat,868,ClPkg,"leastPositiveNormalizedSingleFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveNormalizedShortFloat,869,ClPkg,"leastPositiveNormalizedShortFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveNormalizedDoubleFloat,870,ClPkg,"leastPositiveNormalizedDoubleFloat",true);
DO_SYMBOL(cl,_sym_leastPositiveNormalizedLongFloat,871,ClPkg,"leastPositiveNormalizedLongFloat",true);
DO_SYMBOL(cl,_sym_pi,872,ClPkg,"pi",true);
DO_SYMBOL(cl,_sym_gcd,873,ClPkg,"gcd",true);
DO_SYMBOL(cl,_sym_lcm,874,ClPkg,"lcm",true);
DO_SYMBOL(cl,_sym_numerator,875,ClPkg,"numerator",true);
DO_SYMBOL(cl,_sym_denominator,876,ClPkg,"denominator",true);
DO_SYMBOL(cl,_sym_floor,877,ClPkg,"floor",true);
DO_SYMBOL(cl,_sym_ceiling,878,ClPkg,"ceiling",true);
DO_SYMBOL(cl,_sym_truncate,879,ClPkg,"truncate",true);
DO_SYMBOL(cl,_sym_round,880,ClPkg,"round",true);
DO_SYMBOL(cl,_sym_mod,881,ClPkg,"mod",true);
DO_SYMBOL(cl,_sym_rem,882,ClPkg,"rem",true);
DO_SYMBOL(cl,_sym_decodeFloat,883,ClPkg,"decodeFloat",true);
DO_SYMBOL(cl,_sym_scaleFloat,884,ClPkg,"scaleFloat",true);
DO_SYMBOL(cl,_sym_floatSign,885,ClPkg,"floatSign",true);
DO_SYMBOL(cl,_sym_floatDigits,886,ClPkg,"floatDigits",true);
DO_SYMBOL(cl,_sym_floatPrecision,887,ClPkg,"floatPrecision",true);
DO_SYMBOL(cl,_sym_integer_decode_float,888,ClPkg,"integer_decode_float",true);
DO_SYMBOL(cl,_sym_complex,889,ClPkg,"complex",true);
DO_SYMBOL(cl,_sym_realpart,890,ClPkg,"realpart",true);
DO_SYMBOL(cl,_sym_imagpart,891,ClPkg,"imagpart",true);
DO_SYMBOL(cl,_sym_print,892,ClPkg,"print",true);
DO_SYMBOL(cl,_sym_prin1,893,ClPkg,"prin1",true);
DO_SYMBOL(cl,_sym_princ,894,ClPkg,"princ",true);
DO_SYMBOL(cl,_sym_truename,895,ClPkg,"truename",true);
DO_SYMBOL(cl,_sym_probe_file,896,ClPkg,"probe_file",true);
DO_SYMBOL(cl,_sym_deleteFile,897,ClPkg,"deleteFile",true);
DO_SYMBOL(cl,_sym_file_write_date,898,ClPkg,"file_write_date",true);
DO_SYMBOL(cl,_sym_userHomedirPathname,899,ClPkg,"userHomedirPathname",true);
DO_SYMBOL(cl,_sym_revappend,900,ClPkg,"revappend",true);
DO_SYMBOL(cl,_sym_nreconc,901,ClPkg,"nreconc",true);
DO_SYMBOL(cl,_sym_listSTAR,902,ClPkg,"listSTAR",true);
DO_SYMBOL(cl,_sym_butlast,903,ClPkg,"butlast",true);
DO_SYMBOL(cl,_sym_nbutlast,904,ClPkg,"nbutlast",true);
DO_SYMBOL(cl,_sym_nthcdr,905,ClPkg,"nthcdr",true);
DO_SYMBOL(cl,_sym_copyList,906,ClPkg,"copyList",true);
DO_SYMBOL(cl,_sym_last,907,ClPkg,"last",true);
DO_SYMBOL(cl,_sym_filePosition,908,ClPkg,"filePosition",true);
DO_SYMBOL(cl,_sym_readSequence,909,ClPkg,"readSequence",true);
DO_SYMBOL(cl,_sym_read_from_string,910,ClPkg,"read_from_string",true);
DO_SYMBOL(cl,_sym_read_line,911,ClPkg,"read_line",true);
DO_SYMBOL(cl,_sym_terpri,912,ClPkg,"terpri",true);
DO_SYMBOL(cl,_sym_freshLine,913,ClPkg,"freshLine",true);
DO_SYMBOL(cl,_sym_writeString,914,ClPkg,"writeString",true);
DO_SYMBOL(cl,_sym_writeLine,915,ClPkg,"writeLine",true);
DO_SYMBOL(cl,_sym_writeChar,916,ClPkg,"writeChar",true);
DO_SYMBOL(cl,_sym_clearInput,917,ClPkg,"clearInput",true);
DO_SYMBOL(cl,_sym_clearOutput,918,ClPkg,"clearOutput",true);
DO_SYMBOL(cl,_sym_readByte,919,ClPkg,"readByte",true);
DO_SYMBOL(cl,_sym_peekChar,920,ClPkg,"peekChar",true);
DO_SYMBOL(cl,_sym_readChar,921,ClPkg,"readChar",true);
DO_SYMBOL(cl,_sym_readCharNoHang,922,ClPkg,"readCharNoHang",true);
DO_SYMBOL(cl,_sym_force_output,923,ClPkg,"force_output",true);
DO_SYMBOL(cl,_sym_finish_output,924,ClPkg,"finish_output",true);
DO_SYMBOL(cl,_sym_listen,925,ClPkg,"listen",true);
DO_SYMBOL(cl,_sym_unread_char,926,ClPkg,"unread_char",true);
DO_SYMBOL(cl,_sym_makeStringOutputStream,927,ClPkg,"makeStringOutputStream",true);
DO_SYMBOL(cl,_sym_writeByte,928,ClPkg,"writeByte",true);
DO_SYMBOL(cl,_sym_interactive_stream_p,929,ClPkg,"interactive_stream_p",true);
DO_SYMBOL(cl,_sym_streamp,930,ClPkg,"streamp",true);
DO_SYMBOL(cl,_sym_close,931,ClPkg,"close",true);
DO_SYMBOL(cl,_sym_get_output_stream_string,932,ClPkg,"get_output_stream_string",true);
DO_SYMBOL(cl,_sym_synonymStreamSymbol,933,ClPkg,"synonymStreamSymbol",true);
DO_SYMBOL(cl,_sym_boole_1,934,ClPkg,"boole_1",true);
DO_SYMBOL(cl,_sym_boole_2,935,ClPkg,"boole_2",true);
DO_SYMBOL(cl,_sym_boole_and,936,ClPkg,"boole_and",true);
DO_SYMBOL(cl,_sym_boole_andc1,937,ClPkg,"boole_andc1",true);
DO_SYMBOL(cl,_sym_boole_andc2,938,ClPkg,"boole_andc2",true);
DO_SYMBOL(cl,_sym_boole_c1,939,ClPkg,"boole_c1",true);
DO_SYMBOL(cl,_sym_boole_c2,940,ClPkg,"boole_c2",true);
DO_SYMBOL(cl,_sym_boole_clr,941,ClPkg,"boole_clr",true);
DO_SYMBOL(cl,_sym_boole_eqv,942,ClPkg,"boole_eqv",true);
DO_SYMBOL(cl,_sym_boole_ior,943,ClPkg,"boole_ior",true);
DO_SYMBOL(cl,_sym_boole_nand,944,ClPkg,"boole_nand",true);
DO_SYMBOL(cl,_sym_boole_nor,945,ClPkg,"boole_nor",true);
DO_SYMBOL(cl,_sym_boole_orc1,946,ClPkg,"boole_orc1",true);
DO_SYMBOL(cl,_sym_boole_orc2,947,ClPkg,"boole_orc2",true);
DO_SYMBOL(cl,_sym_boole_set,948,ClPkg,"boole_set",true);
DO_SYMBOL(cl,_sym_boole_xor,949,ClPkg,"boole_xor",true);
DO_SYMBOL(cl,_sym_printNotReadableObject,950,ClPkg,"printNotReadableObject",true);
DO_SYMBOL(cl,_sym_provide,951,ClPkg,"provide",true);
DO_SYMBOL(cl,_sym_seriousCondition,952,ClPkg,"seriousCondition",true);
DO_SYMBOL(cl,_sym_warn,953,ClPkg,"warn",true);
DO_SYMBOL(cl,_sym_programError,954,ClPkg,"programError",true);
DO_SYMBOL(cl,_sym_cellError,955,ClPkg,"cellError",true);
DO_SYMBOL(cl,_sym_unboundVariable,956,ClPkg,"unboundVariable",true);
DO_SYMBOL(cl,_sym_unboundSlot,957,ClPkg,"unboundSlot",true);
DO_SYMBOL(cl,_sym_undefinedFunction,958,ClPkg,"undefinedFunction",true);
DO_SYMBOL(cl,_sym_package_error,959,ClPkg,"package_error",true);
DO_SYMBOL(cl,_sym_arithmeticError,960,ClPkg,"arithmeticError",true);
DO_SYMBOL(cl,_sym_floatingPointOverflow,961,ClPkg,"floatingPointOverflow",true);
DO_SYMBOL(cl,_sym_floatingPointInexact,962,ClPkg,"floatingPointInexact",true);
DO_SYMBOL(cl,_sym_floatingPointInvalidOperation,963,ClPkg,"floatingPointInvalidOperation",true);
DO_SYMBOL(cl,_sym_floatingPointUnderflow,964,ClPkg,"floatingPointUnderflow",true);
DO_SYMBOL(cl,_sym_divisionByZero,965,ClPkg,"divisionByZero",true);
DO_SYMBOL(cl,_sym_printNotReadable,966,ClPkg,"printNotReadable",true);
DO_SYMBOL(cl,_sym_streamError,967,ClPkg,"streamError",true);
DO_SYMBOL(cl,_sym_endOfFile,968,ClPkg,"endOfFile",true);
DO_SYMBOL(cl,_sym_parseError,969,ClPkg,"parseError",true);
DO_SYMBOL(cl,_sym_readerError,970,ClPkg,"readerError",true);
DO_SYMBOL(cl,_sym_STARrandom_stateSTAR,971,ClPkg,"STARrandom_stateSTAR",true);
DO_SYMBOL(cl,_sym_simpleError,972,ClPkg,"simpleError",true);
DO_SYMBOL(cl,_sym_storageCondition,973,ClPkg,"storageCondition",true);
DO_SYMBOL(cl,_sym_simpleCondition,974,ClPkg,"simpleCondition",true);
DO_SYMBOL(cl,_sym_simpleWarning,975,ClPkg,"simpleWarning",true);
DO_SYMBOL(cl,_sym_warning,976,ClPkg,"warning",true);
DO_SYMBOL(cl,_sym_styleWarning,977,ClPkg,"styleWarning",true);
DO_SYMBOL(cl,_sym_asin,978,ClPkg,"asin",true);
DO_SYMBOL(cl,_sym_acos,979,ClPkg,"acos",true);
DO_SYMBOL(cl,_sym_asinh,980,ClPkg,"asinh",true);
DO_SYMBOL(cl,_sym_acosh,981,ClPkg,"acosh",true);
DO_SYMBOL(cl,_sym_atanh,982,ClPkg,"atanh",true);
DO_SYMBOL(cl,_sym_dynamic_extent,983,ClPkg,"dynamic_extent",true);
DO_SYMBOL(cl,_sym_ftype,984,ClPkg,"ftype",true);
DO_SYMBOL(cl,_sym_boole,985,ClPkg,"boole",true);
DO_SYMBOL(cl,_sym_callArgumentsLimit,986,ClPkg,"callArgumentsLimit",true);
DO_SYMBOL(cl,_sym_arrayDimensionLimit,987,ClPkg,"arrayDimensionLimit",true);
DO_SYMBOL(cl,_sym_arrayTotalSizeLimit,988,ClPkg,"arrayTotalSizeLimit",true);
DO_SYMBOL(cl,_sym_lambdaParametersLimit,989,ClPkg,"lambdaParametersLimit",true);
DO_SYMBOL(cl,_sym_schar,990,ClPkg,"schar",true);
DO_SYMBOL(cl,_sym_fixnum,991,ClPkg,"fixnum",true);
DO_SYMBOL(cl,_sym_nil,992,ClPkg,"nil",true);
DO_SYMBOL(cl,_sym_stream_element_type,993,ClPkg,"stream_element_type",true);
DO_SYMBOL(cl,_sym_stream_external_format,994,ClPkg,"stream_external_format",true);
DO_SYMBOL(cl,_sym_open_stream_p,995,ClPkg,"open_stream_p",true);
DO_SYMBOL(cl,_sym_write_sequence,996,ClPkg,"write_sequence",true);
DO_SYMBOL(cl,_sym_read_sequence,997,ClPkg,"read_sequence",true);
DO_SYMBOL(cl,_sym_file_string_length,998,ClPkg,"file_string_length",true);
DO_SYMBOL(cl,_sym_echo_stream_input_stream,999,ClPkg,"echo_stream_input_stream",true);
DO_SYMBOL(cl,_sym_echo_stream_output_stream,1000,ClPkg,"echo_stream_output_stream",true);
DO_SYMBOL(cl,_sym_concatenated_stream_streams,1001,ClPkg,"concatenated_stream_streams",true);
DO_SYMBOL(cl,_sym_synonym_stream_symbol,1002,ClPkg,"synonym_stream_symbol",true);
DO_SYMBOL(cl,_sym_broadcast_stream_streams,1003,ClPkg,"broadcast_stream_streams",true);
DO_SYMBOL(cl,_sym_getOutputStreamString,1004,ClPkg,"getOutputStreamString",true);
DO_SYMBOL(cl,_sym_elt,1005,ClPkg,"elt",true);
DO_SYMBOL(cl,_sym_callNextMethod,1006,ClPkg,"callNextMethod",true);
DO_SYMBOL(cl,_sym_nextMethodP,1007,ClPkg,"nextMethodP",true);
DO_SYMBOL(cl,_sym_internalTimeUnitsPerSecond,1008,ClPkg,"internalTimeUnitsPerSecond",true);
DO_SYMBOL(cl,_sym_getInternalRealTime,1009,ClPkg,"getInternalRealTime",true);
DO_SYMBOL(cl,_sym_getInternalRunTime,1010,ClPkg,"getInternalRunTime",true);
DO_SYMBOL(cl,_sym_logicalPathnameTranslations,1011,ClPkg,"logicalPathnameTranslations",true);
DO_SYMBOL(cl,_sym_set,1012,ClPkg,"set",true);
DO_SYMBOL(cl,_sym_restartName,1013,ClPkg,"restartName",true);
DO_SYMBOL(cl,_sym_position,1014,ClPkg,"position",true);
DO_SYMBOL(cl,_sym_compileFile,1015,ClPkg,"compileFile",true);
DO_SYMBOL(cl,_sym_first,1016,ClPkg,"first",true);
DO_SYMBOL(cl,_sym_float,1017,ClPkg,"float",true);
DO_SYMBOL(cl,_sym_logical_pathname,1018,ClPkg,"logical_pathname",true);
DO_SYMBOL(cl,_sym_pathnamep,1019,ClPkg,"pathnamep",true);
DO_SYMBOL(cl,_sym_STARloadPathnameSTAR,1020,ClPkg,"STARloadPathnameSTAR",true);
DO_SYMBOL(cl,_sym_STARloadTruenameSTAR,1021,ClPkg,"STARloadTruenameSTAR",true);
DO_SYMBOL(cl,_sym_makeArray,1022,ClPkg,"makeArray",true);
DO_SYMBOL(cl,_sym_makePathname,1023,ClPkg,"makePathname",true);
DO_SYMBOL(cl,_sym_mismatch,1024,ClPkg,"mismatch",true);
DO_SYMBOL(cl,_sym_SignedByte,1025,ClPkg,"SignedByte",true);
DO_SYMBOL(cl,_sym_UnsignedByte,1026,ClPkg,"UnsignedByte",true);
DO_SYMBOL(cl,_sym_Bit,1027,ClPkg,"Bit",true);
DO_SYMBOL(cl,_sym_STARdefaultPathnameDefaultsSTAR,1028,ClPkg,"STARdefaultPathnameDefaultsSTAR",true);
DO_SYMBOL(cl,_sym_simpleTypeError,1029,ClPkg,"simpleTypeError",true);
DO_SYMBOL(cl,_sym_MultipleValuesLimit,1030,ClPkg,"MultipleValuesLimit",true);
DO_SYMBOL(cl,_sym_keywordp,1031,ClPkg,"keywordp",true);
DO_SYMBOL(cl,_sym_null,1032,ClPkg,"null",true);
DO_SYMBOL(cl,_sym_endp,1033,ClPkg,"endp",true);
DO_SYMBOL(cl,_sym_symbolp,1034,ClPkg,"symbolp",true);
DO_SYMBOL(cl,_sym_atom,1035,ClPkg,"atom",true);
DO_SYMBOL(cl,_sym_consp,1036,ClPkg,"consp",true);
DO_SYMBOL(cl,_sym_listp,1037,ClPkg,"listp",true);
DO_SYMBOL(cl,_sym_numberp,1038,ClPkg,"numberp",true);
DO_SYMBOL(cl,_sym_integerp,1039,ClPkg,"integerp",true);
DO_SYMBOL(cl,_sym_rationalp,1040,ClPkg,"rationalp",true);
DO_SYMBOL(cl,_sym_floatp,1041,ClPkg,"floatp",true);
DO_SYMBOL(cl,_sym_realp,1042,ClPkg,"realp",true);
DO_SYMBOL(cl,_sym_complexp,1043,ClPkg,"complexp",true);
DO_SYMBOL(cl,_sym_character,1044,ClPkg,"character",true);
DO_SYMBOL(cl,_sym_base_char,1045,ClPkg,"base_char",true);
DO_SYMBOL(cl,_sym_single_float,1046,ClPkg,"single_float",true);
DO_SYMBOL(cl,_sym_characterp,1047,ClPkg,"characterp",true);
DO_SYMBOL(cl,_sym_stringp,1048,ClPkg,"stringp",true);
DO_SYMBOL(cl,_sym_bit_vector_p,1049,ClPkg,"bit_vector_p",true);
DO_SYMBOL(cl,_sym_vectorp,1050,ClPkg,"vectorp",true);
DO_SYMBOL(cl,_sym_simple_vector_p,1051,ClPkg,"simple_vector_p",true);
DO_SYMBOL(cl,_sym_simple_string_p,1052,ClPkg,"simple_string_p",true);
DO_SYMBOL(cl,_sym_simple_bit_vector_p,1053,ClPkg,"simple_bit_vector_p",true);
DO_SYMBOL(cl,_sym_arrayp,1054,ClPkg,"arrayp",true);
DO_SYMBOL(cl,_sym_packagep,1055,ClPkg,"packagep",true);
DO_SYMBOL(cl,_sym_functionp,1056,ClPkg,"functionp",true);
DO_SYMBOL(cl,_sym_compiled_function_p,1057,ClPkg,"compiled_function_p",true);
DO_SYMBOL(cl,_sym_hash_table_p,1058,ClPkg,"hash_table_p",true);
DO_SYMBOL(cl,_sym__DIVIDE_,1059,ClPkg,"_DIVIDE_",true);
DO_SYMBOL(cl,_sym_typep,1060,ClPkg,"typep",true);
DO_SYMBOL(cl,_sym_type,1061,ClPkg,"type",true);
DO_SYMBOL(cl,_sym_step,1062,ClPkg,"step",true);
DO_SYMBOL(cl,_sym_speed,1063,ClPkg,"speed",true);
DO_SYMBOL(cl,_sym_space,1064,ClPkg,"space",true);
DO_SYMBOL(cl,_sym_sin,1065,ClPkg,"sin",true);
DO_SYMBOL(cl,_sym_safety,1066,ClPkg,"safety",true);
DO_SYMBOL(cl,_sym_restart_bind,1067,ClPkg,"restart_bind",true);
DO_SYMBOL(cl,_sym_restart,1068,ClPkg,"restart",true);
DO_SYMBOL(cl,_sym_describe,1069,ClPkg,"describe",true);
DO_SYMBOL(cl,_sym_disassemble,1070,ClPkg,"disassemble",true);
DO_SYMBOL(cl,_sym_rename_file,1071,ClPkg,"rename_file",true);
DO_SYMBOL(cl,_sym_random,1072,ClPkg,"random",true);
DO_SYMBOL(cl,_sym_optimize,1073,ClPkg,"optimize",true);
DO_SYMBOL(cl,_sym_two_way_stream_input_stream,1074,ClPkg,"two_way_stream_input_stream",true);
DO_SYMBOL(cl,_sym_two_way_stream_output_stream,1075,ClPkg,"two_way_stream_output_stream",true);
DO_SYMBOL(cl,_sym_two_way_stream,1076,ClPkg,"two_way_stream",true);
DO_SYMBOL(cl,_sym_make_two_way_stream,1077,ClPkg,"make_two_way_stream",true);
DO_SYMBOL(cl,_sym_make_synonym_stream,1078,ClPkg,"make_synonym_stream",true);
DO_SYMBOL(cl,_sym_invoke_restart,1079,ClPkg,"invoke_restart",true);
DO_SYMBOL(cl,_sym_get,1080,ClPkg,"get",true);
DO_SYMBOL(cl,_sym_find_restart,1081,ClPkg,"find_restart",true);
DO_SYMBOL(cl,_sym_fill_pointer,1082,ClPkg,"fill_pointer",true);
DO_SYMBOL(cl,_sym_directory,1083,ClPkg,"directory",true);
DO_SYMBOL(cl,_sym_defun,1084,ClPkg,"defun",true);
DO_SYMBOL(cl,_sym_debug,1085,ClPkg,"debug",true);
DO_SYMBOL(cl,_sym_count,1086,ClPkg,"count",true);
DO_SYMBOL(cl,_sym_compute_restarts,1087,ClPkg,"compute_restarts",true);
DO_SYMBOL(cl,_sym_write,1088,ClPkg,"write",true);
DO_SYMBOL(cl,_sym_STARreadDefaultFloatFormatSTAR,1089,ClPkg,"STARreadDefaultFloatFormatSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_baseSTAR,1090,ClPkg,"STARprint_baseSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_levelSTAR,1091,ClPkg,"STARprint_levelSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_lengthSTAR,1092,ClPkg,"STARprint_lengthSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_radixSTAR,1093,ClPkg,"STARprint_radixSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_caseSTAR,1094,ClPkg,"STARprint_caseSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_gensymSTAR,1095,ClPkg,"STARprint_gensymSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_arraySTAR,1096,ClPkg,"STARprint_arraySTAR",true);
DO_SYMBOL(cl,_sym_STARprint_readablySTAR,1097,ClPkg,"STARprint_readablySTAR",true);
DO_SYMBOL(cl,_sym_STARprint_escapeSTAR,1098,ClPkg,"STARprint_escapeSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_circleSTAR,1099,ClPkg,"STARprint_circleSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_linesSTAR,1100,ClPkg,"STARprint_linesSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_right_marginSTAR,1101,ClPkg,"STARprint_right_marginSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_prettySTAR,1102,ClPkg,"STARprint_prettySTAR",true);
DO_SYMBOL(cl,_sym_STARprint_miser_widthSTAR,1103,ClPkg,"STARprint_miser_widthSTAR",true);
DO_SYMBOL(cl,_sym_STARprint_pprint_dispatchSTAR,1104,ClPkg,"STARprint_pprint_dispatchSTAR",true);
DO_SYMBOL(cl,_sym_STARdebuggerHookSTAR,1105,ClPkg,"STARdebuggerHookSTAR",true);
DO_SYMBOL(cl,_sym_break,1106,ClPkg,"break",true);
DO_SYMBOL(cl,_sym_STARbreakOnSignalsSTAR,1107,ClPkg,"STARbreakOnSignalsSTAR",true);
DO_SYMBOL(cl,_sym_typeError,1108,ClPkg,"typeError",true);
DO_SYMBOL(cl,_sym_printObject,1109,ClPkg,"printObject",true);
DO_SYMBOL(cl,_sym_controlError,1110,ClPkg,"controlError",true);
DO_SYMBOL(cl,_sym_fileError,1111,ClPkg,"fileError",true);
DO_SYMBOL(cl,_sym_satisfies,1112,ClPkg,"satisfies",true);
DO_SYMBOL(cl,_sym_T,1113,ClPkg,"T",true);
DO_SYMBOL(cl,_sym_method,1114,ClPkg,"method",true);
DO_SYMBOL(cl,_sym_generic_function,1115,ClPkg,"generic_function",true);
DO_SYMBOL(cl,_sym_cond,1116,ClPkg,"cond",true);
DO_SYMBOL(cl,_sym_stream,1117,ClPkg,"stream",true);
DO_SYMBOL(cl,_sym_boolean,1118,ClPkg,"boolean",true);
DO_SYMBOL(cl,_sym_keyword,1119,ClPkg,"keyword",true);
DO_SYMBOL(cl,_sym_array,1120,ClPkg,"array",true);
DO_SYMBOL(cl,_sym_simple_array,1121,ClPkg,"simple_array",true);
DO_SYMBOL(cl,_sym_vector,1122,ClPkg,"vector",true);
DO_SYMBOL(cl,_sym_simple_vector,1123,ClPkg,"simple_vector",true);
DO_SYMBOL(cl,_sym_input_stream_p,1124,ClPkg,"input_stream_p",true);
DO_SYMBOL(cl,_sym_output_stream_p,1125,ClPkg,"output_stream_p",true);
DO_SYMBOL(cl,_sym_STARstandard_inputSTAR,1126,ClPkg,"STARstandard_inputSTAR",true);
DO_SYMBOL(cl,_sym_STARstandard_outputSTAR,1127,ClPkg,"STARstandard_outputSTAR",true);
DO_SYMBOL(cl,_sym_STARerror_outputSTAR,1128,ClPkg,"STARerror_outputSTAR",true);
DO_SYMBOL(cl,_sym_STARtrace_outputSTAR,1129,ClPkg,"STARtrace_outputSTAR",true);
DO_SYMBOL(cl,_sym_STARdebug_ioSTAR,1130,ClPkg,"STARdebug_ioSTAR",true);
DO_SYMBOL(cl,_sym_STARquery_ioSTAR,1131,ClPkg,"STARquery_ioSTAR",true);
DO_SYMBOL(cl,_sym_STARterminal_ioSTAR,1132,ClPkg,"STARterminal_ioSTAR",true);
DO_SYMBOL(cl,_sym_STARgensym_counterSTAR,1133,ClPkg,"STARgensym_counterSTAR",true);
DO_SYMBOL(cl,_sym_standard_char,1134,ClPkg,"standard_char",true);
DO_SYMBOL(cl,_sym_extended_char,1135,ClPkg,"extended_char",true);
DO_SYMBOL(cl,_sym_special,1136,ClPkg,"special",true);
DO_SYMBOL(cl,_sym_nconc,1137,ClPkg,"nconc",true);
DO_SYMBOL(cl,_sym_cadr,1138,ClPkg,"cadr",true);
DO_SYMBOL(cl,_sym_STARmacroexpand_hookSTAR,1139,ClPkg,"STARmacroexpand_hookSTAR",true);
DO_SYMBOL(cl,_sym_STARread_baseSTAR,1140,ClPkg,"STARread_baseSTAR",true);
DO_SYMBOL(cl,_sym_compile,1141,ClPkg,"compile",true);
DO_SYMBOL(cl,_sym_load,1142,ClPkg,"load",true);
DO_SYMBOL(cl,_sym_eval,1143,ClPkg,"eval",true);
DO_SYMBOL(cl,_sym_STARread_evalSTAR,1144,ClPkg,"STARread_evalSTAR",true);
DO_SYMBOL(cl,_sym_define_modify_macro,1145,ClPkg,"define_modify_macro",true);
DO_SYMBOL(cl,_sym_destructuring_bind,1146,ClPkg,"destructuring_bind",true);
DO_SYMBOL(cl,_sym_deftype,1147,ClPkg,"deftype",true);
DO_SYMBOL(cl,_sym_define_method_combination,1148,ClPkg,"define_method_combination",true);
DO_SYMBOL(cl,_sym_defsetf,1149,ClPkg,"defsetf",true);
DO_SYMBOL(cl,_sym_AMPwhole,1150,ClPkg,"AMPwhole",true);
DO_SYMBOL(cl,_sym_AMPenvironment,1151,ClPkg,"AMPenvironment",true);
DO_SYMBOL(cl,_sym_AMPoptional,1152,ClPkg,"AMPoptional",true);
DO_SYMBOL(cl,_sym_AMPkey,1153,ClPkg,"AMPkey",true);
DO_SYMBOL(cl,_sym_AMPallow_other_keys,1154,ClPkg,"AMPallow_other_keys",true);
DO_SYMBOL(cl,_sym_AMPaux,1155,ClPkg,"AMPaux",true);
DO_SYMBOL(cl,_sym_AMPrest,1156,ClPkg,"AMPrest",true);
DO_SYMBOL(cl,_sym_AMPbody,1157,ClPkg,"AMPbody",true);
DO_SYMBOL(cl,_sym_integer,1158,ClPkg,"integer",true);
DO_SYMBOL(cl,_sym_sequence,1159,ClPkg,"sequence",true);
DO_SYMBOL(cl,_sym_declare,1160,ClPkg,"declare",true);
DO_SYMBOL(cl,_sym_variable,1161,ClPkg,"variable",true);
DO_SYMBOL(cl,_sym_bit,1162,ClPkg,"bit",true);
DO_SYMBOL(cl,_sym_STARreadtableSTAR,1163,ClPkg,"STARreadtableSTAR",true);
DO_SYMBOL(cl,_sym_and,1164,ClPkg,"and",true);
DO_SYMBOL(cl,_sym_or,1165,ClPkg,"or",true);
DO_SYMBOL(cl,_sym_car,1166,ClPkg,"car",true);
DO_SYMBOL(cl,_sym_cdr,1167,ClPkg,"cdr",true);
DO_SYMBOL(cl,_sym_dotimes,1168,ClPkg,"dotimes",true);
DO_SYMBOL(cl,_sym_dolist,1169,ClPkg,"dolist",true);
DO_SYMBOL(cl,_sym_do,1170,ClPkg,"do",true);
DO_SYMBOL(cl,_sym_package,1171,ClPkg,"package",true);
DO_SYMBOL(cl,_sym_aref,1172,ClPkg,"aref",true);
DO_SYMBOL(cl,_sym_nth,1173,ClPkg,"nth",true);
DO_SYMBOL(cl,_sym_append,1174,ClPkg,"append",true);
DO_SYMBOL(cl,_sym_gethash,1175,ClPkg,"gethash",true);
DO_SYMBOL(cl,_sym_hash_table,1176,ClPkg,"hash_table",true);
DO_SYMBOL(cl,_sym_STARfeaturesSTAR,1177,ClPkg,"STARfeaturesSTAR",true);
DO_SYMBOL(cl,_sym_STARload_printSTAR,1178,ClPkg,"STARload_printSTAR",true);
DO_SYMBOL(cl,_sym_STARload_verboseSTAR,1179,ClPkg,"STARload_verboseSTAR",true);
DO_SYMBOL(cl,_sym_lambda,1180,ClPkg,"lambda",true);
DO_SYMBOL(cl,_sym_symbol,1181,ClPkg,"symbol",true);
DO_SYMBOL(cl,_sym_STARpackageSTAR,1182,ClPkg,"STARpackageSTAR",true);
DO_SYMBOL(cl,_sym_STARmodulesSTAR,1183,ClPkg,"STARmodulesSTAR",true);
DO_SYMBOL(cl,_sym_progn,1184,ClPkg,"progn",true);
DO_SYMBOL(cl,_sym_quote,1185,ClPkg,"quote",true);
DO_SYMBOL(cl,_sym_function,1186,ClPkg,"function",true);
DO_SYMBOL(cl,_sym_slot_value,1187,ClPkg,"slot_value",true);
DO_SYMBOL(cl,_sym_values,1188,ClPkg,"values",true);
DO_SYMBOL(cl,_sym_list,1189,ClPkg,"list",true);
DO_SYMBOL(cl,_sym_standard_class,1190,ClPkg,"standard_class",true);
DO_SYMBOL(cl,_sym_rest,1191,ClPkg,"rest",true);
DO_SYMBOL(cl,_sym_most_negative_fixnum,1192,ClPkg,"most_negative_fixnum",true);
DO_SYMBOL(cl,_sym_most_positive_fixnum,1193,ClPkg,"most_positive_fixnum",true);
DO_SYMBOL(cl,_sym_array_rank_limit,1194,ClPkg,"array_rank_limit",true);
DO_SYMBOL(cl,_sym_char_code_limit,1195,ClPkg,"char_code_limit",true);
DO_SYMBOL(cl,_sym_apropos,1196,ClPkg,"apropos",true);
DO_SYMBOL(cl,_sym_export,1197,ClPkg,"export",true);
DO_SYMBOL(cl,_sym_intern,1198,ClPkg,"intern",true);
DO_SYMBOL(cl,_sym_findClass,1199,ClPkg,"findClass",true);
DO_SYMBOL(cl,_sym_error,1200,ClPkg,"error",true);
DO_SYMBOL(cl,_sym_cerror,1201,ClPkg,"cerror",true);
DO_SYMBOL(cl,_sym_not,1202,ClPkg,"not",true);
DO_SYMBOL(cl,_sym_sort,1203,ClPkg,"sort",true);
DO_SYMBOL(cl,_sym_macroexpand_1,1204,ClPkg,"macroexpand_1",true);
DO_SYMBOL(cl,_sym_macroexpand,1205,ClPkg,"macroexpand",true);
DO_SYMBOL(cl,_sym_acons,1206,ClPkg,"acons",true);
DO_SYMBOL(cl,_sym_assoc,1207,ClPkg,"assoc",true);
DO_SYMBOL(cl,_sym_member,1208,ClPkg,"member",true);
DO_SYMBOL(cl,_sym_find_package,1209,ClPkg,"find_package",true);
DO_SYMBOL(cl,_sym_copyTree,1210,ClPkg,"copyTree",true);
DO_SYMBOL(cl,_sym_eq,1211,ClPkg,"eq",true);
DO_SYMBOL(cl,_sym_eql,1212,ClPkg,"eql",true);
DO_SYMBOL(cl,_sym_equal,1213,ClPkg,"equal",true);
DO_SYMBOL(cl,_sym_equalp,1214,ClPkg,"equalp",true);
DO_SYMBOL(cl,_sym_setMacroCharacter,1215,ClPkg,"setMacroCharacter",true);
DO_SYMBOL(cl,_sym_setDispatchMacroCharacter,1216,ClPkg,"setDispatchMacroCharacter",true);
DO_SYMBOL(cl,_sym_getDispatchMacroCharacter,1217,ClPkg,"getDispatchMacroCharacter",true);
DO_SYMBOL(cl,_sym_pathname,1218,ClPkg,"pathname",true);
DO_SYMBOL(cl,_sym_mergePathnames,1219,ClPkg,"mergePathnames",true);
DO_SYMBOL(cl,_sym_wildPathnameP,1220,ClPkg,"wildPathnameP",true);
DO_SYMBOL(cl,_sym_make_pathname,1221,ClPkg,"make_pathname",true);
DO_SYMBOL(cl,_sym_pathnameHost,1222,ClPkg,"pathnameHost",true);
DO_SYMBOL(cl,_sym_pathnameDevice,1223,ClPkg,"pathnameDevice",true);
DO_SYMBOL(cl,_sym_pathnameDirectory,1224,ClPkg,"pathnameDirectory",true);
DO_SYMBOL(cl,_sym_pathnameName,1225,ClPkg,"pathnameName",true);
DO_SYMBOL(cl,_sym_pathnameType,1226,ClPkg,"pathnameType",true);
DO_SYMBOL(cl,_sym_pathnameVersion,1227,ClPkg,"pathnameVersion",true);
DO_SYMBOL(cl,_sym_pathnameMatchP,1228,ClPkg,"pathnameMatchP",true);
DO_SYMBOL(cl,_sym_translatePathname,1229,ClPkg,"translatePathname",true);
DO_SYMBOL(cl,_sym_translateLogicalPathname,1230,ClPkg,"translateLogicalPathname",true);
DO_SYMBOL(cl,_sym_namestring,1231,ClPkg,"namestring",true);
DO_SYMBOL(cl,_sym_parseNamestring,1232,ClPkg,"parseNamestring",true);
DO_SYMBOL(cl,_sym_fileNamestring,1233,ClPkg,"fileNamestring",true);
DO_SYMBOL(cl,_sym_directoryNamestring,1234,ClPkg,"directoryNamestring",true);
DO_SYMBOL(cl,_sym_hostNamestring,1235,ClPkg,"hostNamestring",true);
DO_SYMBOL(cl,_sym_enoughNamestring,1236,ClPkg,"enoughNamestring",true);
DO_SYMBOL(cl,_sym_package_use_list,1237,ClPkg,"package_use_list",true);
DO_SYMBOL(cl,_sym_gentemp,1238,ClPkg,"gentemp",true);
DO_SYMBOL(cl,_sym_makePackage,1239,ClPkg,"makePackage",true);
DO_SYMBOL(cl,_sym_listAllPackages,1240,ClPkg,"listAllPackages",true);
DO_SYMBOL(cl,_sym_use_package,1241,ClPkg,"use_package",true);
DO_SYMBOL(cl,_sym_unuse_package,1242,ClPkg,"unuse_package",true);
DO_SYMBOL(cl,_sym_package_shadowing_symbols,1243,ClPkg,"package_shadowing_symbols",true);
DO_SYMBOL(cl,_sym_import,1244,ClPkg,"import",true);
DO_SYMBOL(cl,_sym_shadow,1245,ClPkg,"shadow",true);
DO_SYMBOL(cl,_sym_shadowing_import,1246,ClPkg,"shadowing_import",true);
DO_SYMBOL(cl,_sym_findSymbol,1247,ClPkg,"findSymbol",true);
DO_SYMBOL(cl,_sym_unintern,1248,ClPkg,"unintern",true);
DO_SYMBOL(cl,_sym_condition,1249,ClPkg,"condition",true);
DO_SYMBOL(cl,_sym_defvar,1250,ClPkg,"defvar",true);
DO_SYMBOL(cl,_sym_defconstant,1251,ClPkg,"defconstant",true);
DO_SYMBOL(cl,_sym_defparameter,1252,ClPkg,"defparameter",true);
DO_SYMBOL(cl,_sym_intersection,1253,ClPkg,"intersection",true);
DO_SYMBOL(cl,_sym_union,1254,ClPkg,"union",true);
DO_SYMBOL(cl,_sym_remove,1255,ClPkg,"remove",true);
DO_SYMBOL(cl,_sym_pprint_dispatch,1256,ClPkg,"pprint_dispatch",true);
DO_SYMBOL(cl,_sym_fileStream,1257,ClPkg,"fileStream",true);
DO_SYMBOL(cl,_sym_make_list,1258,ClPkg,"make_list",true);
DO_SYMBOL(cl,_sym_cons,1259,ClPkg,"cons",true);
DO_SYMBOL(cl,_sym_getf,1260,ClPkg,"getf",true);
DO_SYMBOL(cl,_sym_make_symbol,1261,ClPkg,"make_symbol",true);
DO_SYMBOL(cl,_sym_symbolName,1262,ClPkg,"symbolName",true);
DO_SYMBOL(cl,_sym_symbolValue,1263,ClPkg,"symbolValue",true);
DO_SYMBOL(cl,_sym_symbolPackage,1264,ClPkg,"symbolPackage",true);
DO_SYMBOL(cl,_sym_symbolFunction,1265,ClPkg,"symbolFunction",true);
DO_SYMBOL(cl,_sym_boundp,1266,ClPkg,"boundp",true);
DO_SYMBOL(cl,_sym_makeCondition,1267,ClPkg,"makeCondition",true);
DO_SYMBOL(cl,_sym_format,1268,ClPkg,"format",true);
DO_SYMBOL(cl,_sym_documentation,1269,ClPkg,"documentation",true);
DO_SYMBOL(cl,_sym_copyStructure,1270,ClPkg,"copyStructure",true);
DO_SYMBOL(cl,_sym_char_code,1271,ClPkg,"char_code",true);
DO_SYMBOL(cl,_sym_code_char,1272,ClPkg,"code_char",true);
DO_SYMBOL(cl,_sym_char_int,1273,ClPkg,"char_int",true);
DO_SYMBOL(cl,_sym_name_char,1274,ClPkg,"name_char",true);
DO_SYMBOL(cl,_sym_char_name,1275,ClPkg,"char_name",true);
DO_SYMBOL(cl,_sym_alpha_char_p,1276,ClPkg,"alpha_char_p",true);
DO_SYMBOL(cl,_sym_standard_char_p,1277,ClPkg,"standard_char_p",true);
DO_SYMBOL(cl,_sym_charUpcase,1278,ClPkg,"charUpcase",true);
DO_SYMBOL(cl,_sym_charDowncase,1279,ClPkg,"charDowncase",true);
DO_SYMBOL(cl,_sym_char_LT_,1280,ClPkg,"char_LT_",true);
DO_SYMBOL(cl,_sym_char_GT_,1281,ClPkg,"char_GT_",true);
DO_SYMBOL(cl,_sym_char_LE_,1282,ClPkg,"char_LE_",true);
DO_SYMBOL(cl,_sym_char_GE_,1283,ClPkg,"char_GE_",true);
DO_SYMBOL(cl,_sym_char_NE_,1284,ClPkg,"char_NE_",true);
DO_SYMBOL(cl,_sym_char_EQ_,1285,ClPkg,"char_EQ_",true);
DO_SYMBOL(cl,_sym_charLessp,1286,ClPkg,"charLessp",true);
DO_SYMBOL(cl,_sym_charGreaterp,1287,ClPkg,"charGreaterp",true);
DO_SYMBOL(cl,_sym_charNotGreaterp,1288,ClPkg,"charNotGreaterp",true);
DO_SYMBOL(cl,_sym_charNotLessp,1289,ClPkg,"charNotLessp",true);
DO_SYMBOL(cl,_sym_charNotEqual,1290,ClPkg,"charNotEqual",true);
DO_SYMBOL(cl,_sym_charEqual,1291,ClPkg,"charEqual",true);
DO_SYMBOL(cl,_sym_digitCharP,1292,ClPkg,"digitCharP",true);
DO_SYMBOL(cl,_sym_string,1293,ClPkg,"string",true);
DO_SYMBOL(cl,_sym_string_upcase,1294,ClPkg,"string_upcase",true);
DO_SYMBOL(cl,_sym_string_downcase,1295,ClPkg,"string_downcase",true);
DO_SYMBOL(cl,_sym_nstring_upcase,1296,ClPkg,"nstring_upcase",true);
DO_SYMBOL(cl,_sym_nstring_downcase,1297,ClPkg,"nstring_downcase",true);
DO_SYMBOL(cl,_sym_stringTrim,1298,ClPkg,"stringTrim",true);
DO_SYMBOL(cl,_sym_stringLeftTrim,1299,ClPkg,"stringLeftTrim",true);
DO_SYMBOL(cl,_sym_stringRightTrim,1300,ClPkg,"stringRightTrim",true);
DO_SYMBOL(cl,_sym_char,1301,ClPkg,"char",true);
DO_SYMBOL(cl,_sym_string_EQ_,1302,ClPkg,"string_EQ_",true);
DO_SYMBOL(cl,_sym_string_NE_,1303,ClPkg,"string_NE_",true);
DO_SYMBOL(cl,_sym_string_LT_,1304,ClPkg,"string_LT_",true);
DO_SYMBOL(cl,_sym_string_GT_,1305,ClPkg,"string_GT_",true);
DO_SYMBOL(cl,_sym_string_LE_,1306,ClPkg,"string_LE_",true);
DO_SYMBOL(cl,_sym_string_GE_,1307,ClPkg,"string_GE_",true);
DO_SYMBOL(cl,_sym_string_equal,1308,ClPkg,"string_equal",true);
DO_SYMBOL(cl,_sym_string_not_equal,1309,ClPkg,"string_not_equal",true);
DO_SYMBOL(cl,_sym_string_lessp,1310,ClPkg,"string_lessp",true);
DO_SYMBOL(cl,_sym_string_greaterp,1311,ClPkg,"string_greaterp",true);
DO_SYMBOL(cl,_sym_string_not_greaterp,1312,ClPkg,"string_not_greaterp",true);
DO_SYMBOL(cl,_sym_string_not_lessp,1313,ClPkg,"string_not_lessp",true);
DO_SYMBOL(cl,_sym_make_string,1314,ClPkg,"make_string",true);
DO_SYMBOL(cl,_sym_parseInteger,1315,ClPkg,"parseInteger",true);
DO_SYMBOL(cl,_sym_make_sequence,1316,ClPkg,"make_sequence",true);
DO_SYMBOL(cl,_sym_reverse,1317,ClPkg,"reverse",true);
DO_SYMBOL(cl,_sym_nreverse,1318,ClPkg,"nreverse",true);
DO_SYMBOL(cl,_sym_subseq,1319,ClPkg,"subseq",true);
DO_SYMBOL(cl,_sym_copySeq,1320,ClPkg,"copySeq",true);
DO_SYMBOL(cl,_sym_length,1321,ClPkg,"length",true);
DO_SYMBOL(cl,_sym_subtypep,1322,ClPkg,"subtypep",true);
DO_SYMBOL(cl,_sym_vectorPush,1323,ClPkg,"vectorPush",true);
DO_SYMBOL(cl,_sym_vectorPushExtend,1324,ClPkg,"vectorPushExtend",true);
DO_SYMBOL(cl,_sym_STARread_suppressSTAR,1325,ClPkg,"STARread_suppressSTAR",true);
DO_SYMBOL(cl,_sym_RandomState_O,1326,ClPkg,"random-state",true);
DO_SYMBOL(cl,_sym_ReadTable_O,1327,ClPkg,"readtable",true);
DO_SYMBOL(cl,_sym_StructureObject_O,1328,ClPkg,"structure-object",true);
DO_SYMBOL(cl,_sym_Null_O,1329,ClPkg,"null",true);
DO_SYMBOL(cl,_sym_StructureClass_O,1330,ClPkg,"structure-class",true);
DO_SYMBOL(cl,_sym_StandardClass_O,1331,ClPkg,"StandardClass",true);
DO_SYMBOL(cl,_sym_BuiltInClass_O,1332,ClPkg,"BuiltInClass",true);
DO_SYMBOL(cl,_sym_Package_O,1333,ClPkg,"Package",true);
DO_SYMBOL(cl,_sym_Pathname_O,1334,ClPkg,"pathname",true);
DO_SYMBOL(cl,_sym_LogicalPathname_O,1335,ClPkg,"logical-pathname",true);
DO_SYMBOL(cl,_sym_Character_dummy_O,1336,ClPkg,"character",true);
DO_SYMBOL(cl,_sym_Stream_O,1337,ClPkg,"stream",true);
DO_SYMBOL(cl,_sym_FileStream_O,1338,ClPkg,"file-stream",true);
DO_SYMBOL(cl,_sym_StringStream_O,1339,ClPkg,"string-stream",true);
DO_SYMBOL(cl,_sym_SynonymStream_O,1340,ClPkg,"synonym-stream",true);
DO_SYMBOL(cl,_sym_TwoWayStream_O,1341,ClPkg,"two-way-stream",true);
DO_SYMBOL(cl,_sym_BroadcastStream_O,1342,ClPkg,"BroadcastStream",true);
DO_SYMBOL(cl,_sym_ConcatenatedStream_O,1343,ClPkg,"ConcatenatedStream",true);
DO_SYMBOL(cl,_sym_EchoStream_O,1344,ClPkg,"EchoStream",true);
DO_SYMBOL(cl,_sym_T_O,1345,ClPkg,"T",true);
DO_SYMBOL(cl,_sym_Cons_O,1346,ClPkg,"Cons",true);
DO_SYMBOL(cl,_sym_Number_O,1347,ClPkg,"number",true);
DO_SYMBOL(cl,_sym_Real_O,1348,ClPkg,"real",true);
DO_SYMBOL(cl,_sym_Rational_O,1349,ClPkg,"rational",true);
DO_SYMBOL(cl,_sym_Integer_O,1350,ClPkg,"integer",true);
DO_SYMBOL(cl,_sym_Fixnum_dummy_O,1351,ClPkg,"fixnum",true);
DO_SYMBOL(cl,_sym_Float_O,1352,ClPkg,"float",true);
DO_SYMBOL(cl,_sym_ShortFloat_O,1353,ClPkg,"ShortFloat",true);
DO_SYMBOL(cl,_sym_SingleFloat_dummy_O,1354,ClPkg,"SingleFloat",true);
DO_SYMBOL(cl,_sym_DoubleFloat_O,1355,ClPkg,"double-float",true);
DO_SYMBOL(cl,_sym_LongFloat_O,1356,ClPkg,"LongFloat",true);
DO_SYMBOL(cl,_sym_Complex_O,1357,ClPkg,"complex",true);
DO_SYMBOL(cl,_sym_Ratio_O,1358,ClPkg,"ratio",true);
DO_SYMBOL(cl,_sym_Bignum_O,1359,ClPkg,"Bignum",true);
DO_SYMBOL(cl,_sym_Symbol_O,1360,ClPkg,"Symbol",true);
DO_SYMBOL(cl,_sym_Function_O,1361,ClPkg,"Function",true);
DO_SYMBOL(cl,_sym_CompiledFunction_O,1362,ClPkg,"CompiledFunction",true);
DO_SYMBOL(cl,_sym_StandardObject_O,1363,ClPkg,"standard-object",true);
DO_SYMBOL(cl,_sym_Class_O,1364,ClPkg,"class",true);
DO_SYMBOL(cl,_sym_Array_O,1365,ClPkg,"array",true);
DO_SYMBOL(cl,_sym_Vector_O,1366,ClPkg,"vector",true);
DO_SYMBOL(cl,_sym_String_O,1367,ClPkg,"String",true);
DO_SYMBOL(cl,_sym_Str_O,1368,ClPkg,"base-string",true);
DO_SYMBOL(cl,_sym_HashTable_O,1369,ClPkg,"HashTable",true);
DO_SYMBOL(cl,_sym_BitVector_O,1370,ClPkg,"bit-vector",true);
DO_SYMBOL(cl,_sym_SimpleBitVector_O,1371,ClPkg,"simple-bit-vector",true);
DO_SYMBOL(cl,_sym_BitVectorWithFillPtr_O,1372,ClPkg,"bit-vector-with-fill-ptr",true);
#endif // ClPkg_SYMBOLS
#if defined(ExtPkg_SYMBOLS)
DO_SYMBOL(ext,_sym_STARinspectorHookSTAR,1373,ExtPkg,"STARinspectorHookSTAR",true);
DO_SYMBOL(ext,_sym_integer8,1374,ExtPkg,"integer8",true);
DO_SYMBOL(ext,_sym_byte8,1375,ExtPkg,"byte8",true);
DO_SYMBOL(ext,_sym_float_nan_string,1376,ExtPkg,"float_nan_string",true);
DO_SYMBOL(ext,_sym_float_infinity_string,1377,ExtPkg,"float_infinity_string",true);
DO_SYMBOL(ext,_sym_STARdefault_external_formatSTAR,1378,ExtPkg,"STARdefault_external_formatSTAR",true);
DO_SYMBOL(ext,_sym_truly_the,1379,ExtPkg,"truly_the",true);
DO_SYMBOL(ext,_sym_specialVar,1380,ExtPkg,"specialVar",true);
DO_SYMBOL(ext,_sym_lexicalVar,1381,ExtPkg,"lexicalVar",true);
DO_SYMBOL(ext,_sym_stackVar,1382,ExtPkg,"stackVar",true);
DO_SYMBOL(ext,_sym__PLUS_processStandardInput_PLUS_,1383,ExtPkg,"_PLUS_processStandardInput_PLUS_",true);
DO_SYMBOL(ext,_sym__PLUS_processStandardOutput_PLUS_,1384,ExtPkg,"_PLUS_processStandardOutput_PLUS_",true);
DO_SYMBOL(ext,_sym__PLUS_processErrorOutput_PLUS_,1385,ExtPkg,"_PLUS_processErrorOutput_PLUS_",true);
DO_SYMBOL(ext,_sym_lambda_block,1386,ExtPkg,"lambda_block",true);
DO_SYMBOL(ext,_sym_system,1387,ExtPkg,"system",true);
DO_SYMBOL(ext,_sym_setenv,1388,ExtPkg,"setenv",true);
DO_SYMBOL(ext,_sym_getenv,1389,ExtPkg,"getenv",true);
DO_SYMBOL(ext,_sym_STARloadHooksSTAR,1390,ExtPkg,"STARloadHooksSTAR",true);
DO_SYMBOL(ext,_sym_aSingleExtSymbol,1391,ExtPkg,"aSingleExtSymbol",true);
DO_SYMBOL(ext,_sym_STARinvokeDebuggerHookSTAR,1392,ExtPkg,"STARinvokeDebuggerHookSTAR",true);
DO_SYMBOL(ext,_sym_compiledFunctionName,1393,ExtPkg,"compiledFunctionName",true);
DO_SYMBOL(ext,_sym_ansi_stream,1394,ExtPkg,"ansi_stream",true);
DO_SYMBOL(ext,_sym_maybeQuote,1395,ExtPkg,"maybeQuote",true);
DO_SYMBOL(ext,_sym_annotate,1396,ExtPkg,"annotate",true);
DO_SYMBOL(ext,_sym_AnsiStream_O,1397,ExtPkg,"AnsiStream",true);
#endif // ExtPkg_SYMBOLS
#if defined(GeomPkg_SYMBOLS)
DO_SYMBOL(geom,_sym_colorTable,1398,GeomPkg,"colorTable",true);
DO_SYMBOL(geom,_sym_OVector2_O,1399,GeomPkg,"OVector2",true);
DO_SYMBOL(geom,_sym_BoundingBox_O,1400,GeomPkg,"BoundingBox",true);
DO_SYMBOL(geom,_sym_Color_O,1401,GeomPkg,"Color",true);
DO_SYMBOL(geom,_sym_OMatrix_O,1402,GeomPkg,"OMatrix",true);
DO_SYMBOL(geom,_sym_CoordinateArray_O,1403,GeomPkg,"CoordinateArray",true);
DO_SYMBOL(geom,_sym_CoordinateArrayWithHash_O,1404,GeomPkg,"CoordinateArrayWithHash",true);
DO_SYMBOL(geom,_sym_OVector3_O,1405,GeomPkg,"OVector3",true);
#endif // GeomPkg_SYMBOLS
#if defined(KeywordPkg_SYMBOLS)
DO_SYMBOL(kw,_sym_catchFrame,1406,KeywordPkg,"catchFrame",true);
DO_SYMBOL(kw,_sym_blockFrame,1407,KeywordPkg,"blockFrame",true);
DO_SYMBOL(kw,_sym_tagbodyFrame,1408,KeywordPkg,"tagbodyFrame",true);
DO_SYMBOL(kw,_sym_landingPadFrame,1409,KeywordPkg,"landingPadFrame",true);
DO_SYMBOL(kw,_sym_splatted,1410,KeywordPkg,"splatted",true);
DO_SYMBOL(kw,_sym_unbound,1411,KeywordPkg,"unbound",true);
DO_SYMBOL(kw,_sym_deleted,1412,KeywordPkg,"deleted",true);
DO_SYMBOL(kw,_sym_rtld_default,1413,KeywordPkg,"rtld_default",true);
DO_SYMBOL(kw,_sym_rtld_next,1414,KeywordPkg,"rtld_next",true);
DO_SYMBOL(kw,_sym_rtld_self,1415,KeywordPkg,"rtld_self",true);
DO_SYMBOL(kw,_sym_rtld_main_only,1416,KeywordPkg,"rtld_main_only",true);
DO_SYMBOL(kw,_sym_iclass,1417,KeywordPkg,"iclass",true);
DO_SYMBOL(kw,_sym_next,1418,KeywordPkg,"next",true);
DO_SYMBOL(kw,_sym_prev,1419,KeywordPkg,"prev",true);
DO_SYMBOL(kw,_sym_key,1420,KeywordPkg,"key",true);
DO_SYMBOL(kw,_sym_defaults,1421,KeywordPkg,"defaults",true);
DO_SYMBOL(kw,_sym_error,1422,KeywordPkg,"error",true);
DO_SYMBOL(kw,_sym_link,1423,KeywordPkg,"link",true);
DO_SYMBOL(kw,_sym_broken_link,1424,KeywordPkg,"broken_link",true);
DO_SYMBOL(kw,_sym_special,1425,KeywordPkg,"special",true);
DO_SYMBOL(kw,_sym_supersede,1426,KeywordPkg,"supersede",true);
DO_SYMBOL(kw,_sym_calledFunction,1427,KeywordPkg,"calledFunction",true);
DO_SYMBOL(kw,_sym_givenNumberOfArguments,1428,KeywordPkg,"givenNumberOfArguments",true);
DO_SYMBOL(kw,_sym_requiredNumberOfArguments,1429,KeywordPkg,"requiredNumberOfArguments",true);
DO_SYMBOL(kw,_sym_unrecognizedKeyword,1430,KeywordPkg,"unrecognizedKeyword",true);
DO_SYMBOL(kw,_sym_body,1431,KeywordPkg,"body",true);
DO_SYMBOL(kw,_sym_lambda_list_handler,1432,KeywordPkg,"lambda_list_handler",true);
DO_SYMBOL(kw,_sym_docstring,1433,KeywordPkg,"docstring",true);
DO_SYMBOL(kw,_sym_arguments,1434,KeywordPkg,"arguments",true);
DO_SYMBOL(kw,_sym_create,1435,KeywordPkg,"create",true);
DO_SYMBOL(kw,_sym_append,1436,KeywordPkg,"append",true);
DO_SYMBOL(kw,_sym_debugStartup,1437,KeywordPkg,"debugStartup",true);
DO_SYMBOL(kw,_sym_cclasp,1438,KeywordPkg,"cclasp",true);
DO_SYMBOL(kw,_sym_bclasp,1439,KeywordPkg,"bclasp",true);
DO_SYMBOL(kw,_sym_load,1440,KeywordPkg,"load",true);
DO_SYMBOL(kw,_sym_eval,1441,KeywordPkg,"eval",true);
DO_SYMBOL(kw,_sym_ecl_min,1442,KeywordPkg,"ecl_min",true);
DO_SYMBOL(kw,_sym_use_mps,1443,KeywordPkg,"use_mps",true);
DO_SYMBOL(kw,_sym_use_boehmdc,1444,KeywordPkg,"use_boehmdc",true);
DO_SYMBOL(kw,_sym_use_boehm,1445,KeywordPkg,"use_boehm",true);
DO_SYMBOL(kw,_sym_cr,1446,KeywordPkg,"cr",true);
DO_SYMBOL(kw,_sym_lf,1447,KeywordPkg,"lf",true);
DO_SYMBOL(kw,_sym_littleEndian,1448,KeywordPkg,"littleEndian",true);
DO_SYMBOL(kw,_sym_bigEndian,1449,KeywordPkg,"bigEndian",true);
DO_SYMBOL(kw,_sym_crlf,1450,KeywordPkg,"crlf",true);
DO_SYMBOL(kw,_sym_latin_1,1451,KeywordPkg,"latin_1",true);
DO_SYMBOL(kw,_sym_ucs_4,1452,KeywordPkg,"ucs_4",true);
DO_SYMBOL(kw,_sym_passThrough,1453,KeywordPkg,"passThrough",true);
DO_SYMBOL(kw,_sym_if_does_not_exist,1454,KeywordPkg,"if_does_not_exist",true);
DO_SYMBOL(kw,_sym_new_version,1455,KeywordPkg,"new_version",true);
DO_SYMBOL(kw,_sym_rename,1456,KeywordPkg,"rename",true);
DO_SYMBOL(kw,_sym_rename_and_delete,1457,KeywordPkg,"rename_and_delete",true);
DO_SYMBOL(kw,_sym_overwrite,1458,KeywordPkg,"overwrite",true);
DO_SYMBOL(kw,_sym_if_exists,1459,KeywordPkg,"if_exists",true);
DO_SYMBOL(kw,_sym_probe,1460,KeywordPkg,"probe",true);
DO_SYMBOL(kw,_sym_FullDebug,1461,KeywordPkg,"FullDebug",true);
DO_SYMBOL(kw,_sym_LineTablesOnly,1462,KeywordPkg,"LineTablesOnly",true);
DO_SYMBOL(kw,_sym__uid,1463,KeywordPkg,"_uid",true);
DO_SYMBOL(kw,_sym_none,1464,KeywordPkg,"none",true);
DO_SYMBOL(kw,_sym_line,1465,KeywordPkg,"line",true);
DO_SYMBOL(kw,_sym_full,1466,KeywordPkg,"full",true);
DO_SYMBOL(kw,_sym_message,1467,KeywordPkg,"message",true);
DO_SYMBOL(kw,_sym_line_buffered,1468,KeywordPkg,"line_buffered",true);
DO_SYMBOL(kw,_sym_fully_buffered,1469,KeywordPkg,"fully_buffered",true);
DO_SYMBOL(kw,_sym_array,1470,KeywordPkg,"array",true);
DO_SYMBOL(kw,_sym_UnsignedByte,1471,KeywordPkg,"UnsignedByte",true);
DO_SYMBOL(kw,_sym_junkAllowed,1472,KeywordPkg,"junkAllowed",true);
DO_SYMBOL(kw,_sym_absolute,1473,KeywordPkg,"absolute",true);
DO_SYMBOL(kw,_sym_relative,1474,KeywordPkg,"relative",true);
DO_SYMBOL(kw,_sym_back,1475,KeywordPkg,"back",true);
DO_SYMBOL(kw,_sym_operation,1476,KeywordPkg,"operation",true);
DO_SYMBOL(kw,_sym_operands,1477,KeywordPkg,"operands",true);
DO_SYMBOL(kw,_sym_escape,1478,KeywordPkg,"escape",true);
DO_SYMBOL(kw,_sym_capitalize,1479,KeywordPkg,"capitalize",true);
DO_SYMBOL(kw,_sym_typeError,1480,KeywordPkg,"typeError",true);
DO_SYMBOL(kw,_sym_datum,1481,KeywordPkg,"datum",true);
DO_SYMBOL(kw,_sym_expectedType,1482,KeywordPkg,"expectedType",true);
DO_SYMBOL(kw,_sym_print,1483,KeywordPkg,"print",true);
DO_SYMBOL(kw,_sym_pathname,1484,KeywordPkg,"pathname",true);
DO_SYMBOL(kw,_sym_object,1485,KeywordPkg,"object",true);
DO_SYMBOL(kw,_sym_formatControl,1486,KeywordPkg,"formatControl",true);
DO_SYMBOL(kw,_sym_formatArguments,1487,KeywordPkg,"formatArguments",true);
DO_SYMBOL(kw,_sym_stream,1488,KeywordPkg,"stream",true);
DO_SYMBOL(kw,_sym_package,1489,KeywordPkg,"package",true);
DO_SYMBOL(kw,_sym_compile_toplevel,1490,KeywordPkg,"compile_toplevel",true);
DO_SYMBOL(kw,_sym_load_toplevel,1491,KeywordPkg,"load_toplevel",true);
DO_SYMBOL(kw,_sym_execute,1492,KeywordPkg,"execute",true);
DO_SYMBOL(kw,_sym_allow_other_keys,1493,KeywordPkg,"allow_other_keys",true);
DO_SYMBOL(kw,_sym_macro,1494,KeywordPkg,"macro",true);
DO_SYMBOL(kw,_sym_function,1495,KeywordPkg,"function",true);
DO_SYMBOL(kw,_sym_invalid_character,1496,KeywordPkg,"invalid_character",true);
DO_SYMBOL(kw,_sym_brcl,1497,KeywordPkg,"brcl",true);
DO_SYMBOL(kw,_sym_not,1498,KeywordPkg,"not",true);
DO_SYMBOL(kw,_sym_and,1499,KeywordPkg,"and",true);
DO_SYMBOL(kw,_sym_or,1500,KeywordPkg,"or",true);
DO_SYMBOL(kw,_sym_class,1501,KeywordPkg,"class",true);
DO_SYMBOL(kw,_sym_instance,1502,KeywordPkg,"instance",true);
DO_SYMBOL(kw,_sym_output,1503,KeywordPkg,"output",true);
DO_SYMBOL(kw,_sym_input,1504,KeywordPkg,"input",true);
DO_SYMBOL(kw,_sym_io,1505,KeywordPkg,"io",true);
DO_SYMBOL(kw,_sym_default,1506,KeywordPkg,"default",true);
DO_SYMBOL(kw,_sym_internal,1507,KeywordPkg,"internal",true);
DO_SYMBOL(kw,_sym_external,1508,KeywordPkg,"external",true);
DO_SYMBOL(kw,_sym_inherited,1509,KeywordPkg,"inherited",true);
DO_SYMBOL(kw,_sym_debug,1510,KeywordPkg,"debug",true);
DO_SYMBOL(kw,_sym_direct_super_classes,1511,KeywordPkg,"direct_super_classes",true);
DO_SYMBOL(kw,_sym_changed,1512,KeywordPkg,"changed",true);
DO_SYMBOL(kw,_sym_address_model_64,1513,KeywordPkg,"address_model_64",true);
DO_SYMBOL(kw,_sym_target_os_darwin,1514,KeywordPkg,"target_os_darwin",true);
DO_SYMBOL(kw,_sym_podSymbolMap,1515,KeywordPkg,"podSymbolMap",true);
DO_SYMBOL(kw,_sym_constituent_character,1516,KeywordPkg,"constituent_character",true);
DO_SYMBOL(kw,_sym_syntax,1517,KeywordPkg,"syntax",true);
DO_SYMBOL(kw,_sym_whitespace_character,1518,KeywordPkg,"whitespace_character",true);
DO_SYMBOL(kw,_sym_single_escape_character,1519,KeywordPkg,"single_escape_character",true);
DO_SYMBOL(kw,_sym_multiple_escape_character,1520,KeywordPkg,"multiple_escape_character",true);
DO_SYMBOL(kw,_sym_upcase,1521,KeywordPkg,"upcase",true);
DO_SYMBOL(kw,_sym_downcase,1522,KeywordPkg,"downcase",true);
DO_SYMBOL(kw,_sym_preserve,1523,KeywordPkg,"preserve",true);
DO_SYMBOL(kw,_sym_invert,1524,KeywordPkg,"invert",true);
DO_SYMBOL(kw,_sym_non_terminating_macro_character,1525,KeywordPkg,"non_terminating_macro_character",true);
DO_SYMBOL(kw,_sym_terminating_macro_character,1526,KeywordPkg,"terminating_macro_character",true);
DO_SYMBOL(kw,_sym_macro_function,1527,KeywordPkg,"macro_function",true);
DO_SYMBOL(kw,_sym_case,1528,KeywordPkg,"case",true);
DO_SYMBOL(kw,_sym_file,1529,KeywordPkg,"file",true);
DO_SYMBOL(kw,_sym_unspecific,1530,KeywordPkg,"unspecific",true);
DO_SYMBOL(kw,_sym_local,1531,KeywordPkg,"local",true);
DO_SYMBOL(kw,_sym_common,1532,KeywordPkg,"common",true);
DO_SYMBOL(kw,_sym_wild_inferiors,1533,KeywordPkg,"wild_inferiors",true);
DO_SYMBOL(kw,_sym_up,1534,KeywordPkg,"up",true);
DO_SYMBOL(kw,_sym_wild,1535,KeywordPkg,"wild",true);
DO_SYMBOL(kw,_sym_host,1536,KeywordPkg,"host",true);
DO_SYMBOL(kw,_sym_device,1537,KeywordPkg,"device",true);
DO_SYMBOL(kw,_sym_newest,1538,KeywordPkg,"newest",true);
DO_SYMBOL(kw,_sym_version,1539,KeywordPkg,"version",true);
DO_SYMBOL(kw,_sym_directory,1540,KeywordPkg,"directory",true);
DO_SYMBOL(kw,_sym_supplied,1541,KeywordPkg,"supplied",true);
DO_SYMBOL(kw,_sym_min,1542,KeywordPkg,"min",true);
DO_SYMBOL(kw,_sym_max,1543,KeywordPkg,"max",true);
DO_SYMBOL(kw,_sym_eof,1544,KeywordPkg,"eof",true);
DO_SYMBOL(kw,_sym_fillPointer,1545,KeywordPkg,"fillPointer",true);
DO_SYMBOL(kw,_sym_elementType,1546,KeywordPkg,"elementType",true);
DO_SYMBOL(kw,_sym_adjustable,1547,KeywordPkg,"adjustable",true);
DO_SYMBOL(kw,_sym_start,1548,KeywordPkg,"start",true);
DO_SYMBOL(kw,_sym_end,1549,KeywordPkg,"end",true);
DO_SYMBOL(kw,_sym_x,1550,KeywordPkg,"x",true);
DO_SYMBOL(kw,_sym_y,1551,KeywordPkg,"y",true);
DO_SYMBOL(kw,_sym_z,1552,KeywordPkg,"z",true);
DO_SYMBOL(kw,_sym_white,1553,KeywordPkg,"white",true);
DO_SYMBOL(kw,_sym_black,1554,KeywordPkg,"black",true);
DO_SYMBOL(kw,_sym_red,1555,KeywordPkg,"red",true);
DO_SYMBOL(kw,_sym_green,1556,KeywordPkg,"green",true);
DO_SYMBOL(kw,_sym_blue,1557,KeywordPkg,"blue",true);
DO_SYMBOL(kw,_sym_magenta,1558,KeywordPkg,"magenta",true);
DO_SYMBOL(kw,_sym_yellow,1559,KeywordPkg,"yellow",true);
DO_SYMBOL(kw,_sym_cyan,1560,KeywordPkg,"cyan",true);
DO_SYMBOL(kw,_sym_grey10,1561,KeywordPkg,"grey10",true);
DO_SYMBOL(kw,_sym_greyF0,1562,KeywordPkg,"greyF0",true);
DO_SYMBOL(kw,_sym_goldenrod,1563,KeywordPkg,"goldenrod",true);
DO_SYMBOL(kw,_sym_purple,1564,KeywordPkg,"purple",true);
DO_SYMBOL(kw,_sym_pink,1565,KeywordPkg,"pink",true);
DO_SYMBOL(kw,_sym_plum,1566,KeywordPkg,"plum",true);
DO_SYMBOL(kw,_sym_coral,1567,KeywordPkg,"coral",true);
DO_SYMBOL(kw,_sym_orange,1568,KeywordPkg,"orange",true);
DO_SYMBOL(kw,_sym_brown,1569,KeywordPkg,"brown",true);
DO_SYMBOL(kw,_sym_wheat,1570,KeywordPkg,"wheat",true);
DO_SYMBOL(kw,_sym_chartreuse,1571,KeywordPkg,"chartreuse",true);
DO_SYMBOL(kw,_sym_aquamarine,1572,KeywordPkg,"aquamarine",true);
DO_SYMBOL(kw,_sym_mediumBlue,1573,KeywordPkg,"mediumBlue",true);
DO_SYMBOL(kw,_sym_steelBlue,1574,KeywordPkg,"steelBlue",true);
DO_SYMBOL(kw,_sym_chemdraw_color,1575,KeywordPkg,"chemdraw_color",true);
DO_SYMBOL(kw,_sym_chemdraw_dashed_bond,1576,KeywordPkg,"chemdraw_dashed_bond",true);
DO_SYMBOL(kw,_sym_comment,1577,KeywordPkg,"comment",true);
DO_SYMBOL(kw,_sym_chiral_centers,1578,KeywordPkg,"chiral_centers",true);
DO_SYMBOL(kw,_sym_group,1579,KeywordPkg,"group",true);
DO_SYMBOL(kw,_sym_name_template,1580,KeywordPkg,"name_template",true);
DO_SYMBOL(kw,_sym_pdb_template,1581,KeywordPkg,"pdb_template",true);
DO_SYMBOL(kw,_sym_residue_charge,1582,KeywordPkg,"residue_charge",true);
DO_SYMBOL(kw,_sym_restrained_pi_bonds,1583,KeywordPkg,"restrained_pi_bonds",true);
DO_SYMBOL(kw,_sym_caps,1584,KeywordPkg,"caps",true);
DO_SYMBOL(kw,_sym_matches,1585,KeywordPkg,"matches",true);
DO_SYMBOL(kw,_sym_tags,1586,KeywordPkg,"tags",true);
DO_SYMBOL(kw,_sym_closestMatch,1587,KeywordPkg,"closestMatch",true);
DO_SYMBOL(kw,_sym_data,1588,KeywordPkg,"data",true);
DO_SYMBOL(kw,_sym_root,1589,KeywordPkg,"root",true);
DO_SYMBOL(kw,_sym_op,1590,KeywordPkg,"op",true);
DO_SYMBOL(kw,_sym_ringTag,1591,KeywordPkg,"ringTag",true);
DO_SYMBOL(kw,_sym_atomTest,1592,KeywordPkg,"atomTest",true);
DO_SYMBOL(kw,_sym_test,1593,KeywordPkg,"test",true);
DO_SYMBOL(kw,_sym_int,1594,KeywordPkg,"int",true);
DO_SYMBOL(kw,_sym_num,1595,KeywordPkg,"num",true);
DO_SYMBOL(kw,_sym_str,1596,KeywordPkg,"str",true);
DO_SYMBOL(kw,_sym_sym,1597,KeywordPkg,"sym",true);
DO_SYMBOL(kw,_sym_head,1598,KeywordPkg,"head",true);
DO_SYMBOL(kw,_sym_tail,1599,KeywordPkg,"tail",true);
DO_SYMBOL(kw,_sym_left,1600,KeywordPkg,"left",true);
DO_SYMBOL(kw,_sym_right,1601,KeywordPkg,"right",true);
DO_SYMBOL(kw,_sym_tag1,1602,KeywordPkg,"tag1",true);
DO_SYMBOL(kw,_sym_tag2,1603,KeywordPkg,"tag2",true);
DO_SYMBOL(kw,_sym_bond,1604,KeywordPkg,"bond",true);
DO_SYMBOL(kw,_sym_residueNames,1605,KeywordPkg,"residueNames",true);
DO_SYMBOL(kw,_sym_atomicProperty,1606,KeywordPkg,"atomicProperty",true);
DO_SYMBOL(kw,_sym_atomicNumber,1607,KeywordPkg,"atomicNumber",true);
DO_SYMBOL(kw,_sym_attachedAtoms,1608,KeywordPkg,"attachedAtoms",true);
DO_SYMBOL(kw,_sym_attachedHs,1609,KeywordPkg,"attachedHs",true);
DO_SYMBOL(kw,_sym_attachedEWGs,1610,KeywordPkg,"attachedEWGs",true);
DO_SYMBOL(kw,_sym_neighbors,1611,KeywordPkg,"neighbors",true);
DO_SYMBOL(kw,_sym_tag,1612,KeywordPkg,"tag",true);
DO_SYMBOL(kw,_sym_atomProps,1613,KeywordPkg,"atomProps",true);
DO_SYMBOL(kw,_sym_firstTest,1614,KeywordPkg,"firstTest",true);
DO_SYMBOL(kw,_sym_chain,1615,KeywordPkg,"chain",true);
DO_SYMBOL(kw,_sym_tests,1616,KeywordPkg,"tests",true);
DO_SYMBOL(kw,_sym_assignType,1617,KeywordPkg,"assignType",true);
DO_SYMBOL(kw,_sym_afterMatchTests,1618,KeywordPkg,"afterMatchTests",true);
DO_SYMBOL(kw,_sym_wildDict,1619,KeywordPkg,"wildDict",true);
DO_SYMBOL(kw,_sym_type_rules,1620,KeywordPkg,"type_rules",true);
DO_SYMBOL(kw,_sym_r0,1621,KeywordPkg,"r0",true);
DO_SYMBOL(kw,_sym_kb,1622,KeywordPkg,"kb",true);
DO_SYMBOL(kw,_sym_stretches,1623,KeywordPkg,"stretches",true);
DO_SYMBOL(kw,_sym_R,1624,KeywordPkg,"R",true);
DO_SYMBOL(kw,_sym_Eps,1625,KeywordPkg,"Eps",true);
DO_SYMBOL(kw,_sym_M,1626,KeywordPkg,"M",true);
DO_SYMBOL(kw,_sym_N,1627,KeywordPkg,"N",true);
DO_SYMBOL(kw,_sym_Edep,1628,KeywordPkg,"Edep",true);
DO_SYMBOL(kw,_sym_vdw,1629,KeywordPkg,"vdw",true);
DO_SYMBOL(kw,_sym_angRad,1630,KeywordPkg,"angRad",true);
DO_SYMBOL(kw,_sym_k2,1631,KeywordPkg,"k2",true);
DO_SYMBOL(kw,_sym_angleFunction,1632,KeywordPkg,"angleFunction",true);
DO_SYMBOL(kw,_sym_angles,1633,KeywordPkg,"angles",true);
DO_SYMBOL(kw,_sym_zConstants,1634,KeywordPkg,"zConstants",true);
DO_SYMBOL(kw,_sym_cConstants,1635,KeywordPkg,"cConstants",true);
DO_SYMBOL(kw,_sym_level,1636,KeywordPkg,"level",true);
DO_SYMBOL(kw,_sym_forceField,1637,KeywordPkg,"forceField",true);
DO_SYMBOL(kw,_sym_itors,1638,KeywordPkg,"itors",true);
DO_SYMBOL(kw,_sym_type1,1639,KeywordPkg,"type1",true);
DO_SYMBOL(kw,_sym_type2,1640,KeywordPkg,"type2",true);
DO_SYMBOL(kw,_sym_type3,1641,KeywordPkg,"type3",true);
DO_SYMBOL(kw,_sym_type4,1642,KeywordPkg,"type4",true);
DO_SYMBOL(kw,_sym_v0,1643,KeywordPkg,"v0",true);
DO_SYMBOL(kw,_sym_ph0,1644,KeywordPkg,"ph0",true);
DO_SYMBOL(kw,_sym_v1,1645,KeywordPkg,"v1",true);
DO_SYMBOL(kw,_sym_ph1,1646,KeywordPkg,"ph1",true);
DO_SYMBOL(kw,_sym_v2,1647,KeywordPkg,"v2",true);
DO_SYMBOL(kw,_sym_ph2,1648,KeywordPkg,"ph2",true);
DO_SYMBOL(kw,_sym_v3,1649,KeywordPkg,"v3",true);
DO_SYMBOL(kw,_sym_ph3,1650,KeywordPkg,"ph3",true);
DO_SYMBOL(kw,_sym_v4,1651,KeywordPkg,"v4",true);
DO_SYMBOL(kw,_sym_ph4,1652,KeywordPkg,"ph4",true);
DO_SYMBOL(kw,_sym_v5,1653,KeywordPkg,"v5",true);
DO_SYMBOL(kw,_sym_ph5,1654,KeywordPkg,"ph5",true);
DO_SYMBOL(kw,_sym_ptors,1655,KeywordPkg,"ptors",true);
DO_SYMBOL(kw,_sym_radius,1656,KeywordPkg,"radius",true);
DO_SYMBOL(kw,_sym_well,1657,KeywordPkg,"well",true);
DO_SYMBOL(kw,_sym_apol,1658,KeywordPkg,"apol",true);
DO_SYMBOL(kw,_sym_neff,1659,KeywordPkg,"neff",true);
DO_SYMBOL(kw,_sym_mass,1660,KeywordPkg,"mass",true);
DO_SYMBOL(kw,_sym_pol,1661,KeywordPkg,"pol",true);
DO_SYMBOL(kw,_sym_initCharge,1662,KeywordPkg,"initCharge",true);
DO_SYMBOL(kw,_sym_fcadj,1663,KeywordPkg,"fcadj",true);
DO_SYMBOL(kw,_sym_pbci,1664,KeywordPkg,"pbci",true);
DO_SYMBOL(kw,_sym_da,1665,KeywordPkg,"da",true);
DO_SYMBOL(kw,_sym_eleDielectricValue,1666,KeywordPkg,"eleDielectricValue",true);
DO_SYMBOL(kw,_sym_eleBuffer,1667,KeywordPkg,"eleBuffer",true);
DO_SYMBOL(kw,_sym_eleScale14,1668,KeywordPkg,"eleScale14",true);
DO_SYMBOL(kw,_sym_eleChargeFcn,1669,KeywordPkg,"eleChargeFcn",true);
DO_SYMBOL(kw,_sym_vdwScale14,1670,KeywordPkg,"vdwScale14",true);
DO_SYMBOL(kw,_sym_vdwScaleBufferA,1671,KeywordPkg,"vdwScaleBufferA",true);
DO_SYMBOL(kw,_sym_vdwScaleBufferB,1672,KeywordPkg,"vdwScaleBufferB",true);
DO_SYMBOL(kw,_sym_nonbonds,1673,KeywordPkg,"nonbonds",true);
DO_SYMBOL(kw,_sym_map,1674,KeywordPkg,"map",true);
DO_SYMBOL(kw,_sym_eleDielectricCode,1675,KeywordPkg,"eleDielectricCode",true);
DO_SYMBOL(kw,_sym_vdwMixRadius,1676,KeywordPkg,"vdwMixRadius",true);
DO_SYMBOL(kw,_sym_vdwMixWell,1677,KeywordPkg,"vdwMixWell",true);
DO_SYMBOL(kw,_sym_name,1678,KeywordPkg,"name",true);
DO_SYMBOL(kw,_sym_id,1679,KeywordPkg,"id",true);
DO_SYMBOL(kw,_sym_restraints,1680,KeywordPkg,"restraints",true);
DO_SYMBOL(kw,_sym_contents,1681,KeywordPkg,"contents",true);
DO_SYMBOL(kw,_sym_pdbName,1682,KeywordPkg,"pdbName",true);
DO_SYMBOL(kw,_sym_uniqueLabel,1683,KeywordPkg,"uniqueLabel",true);
DO_SYMBOL(kw,_sym_NetCharge,1684,KeywordPkg,"NetCharge",true);
DO_SYMBOL(kw,_sym_fileSeqNum,1685,KeywordPkg,"fileSeqNum",true);
DO_SYMBOL(kw,_sym_monomerAliases,1686,KeywordPkg,"monomerAliases",true);
DO_SYMBOL(kw,_sym_bl,1687,KeywordPkg,"bl",true);
DO_SYMBOL(kw,_sym_alias,1688,KeywordPkg,"alias",true);
DO_SYMBOL(kw,_sym_flags,1689,KeywordPkg,"flags",true);
DO_SYMBOL(kw,_sym_element,1690,KeywordPkg,"element",true);
DO_SYMBOL(kw,_sym_hybridization,1691,KeywordPkg,"hybridization",true);
DO_SYMBOL(kw,_sym_priority,1692,KeywordPkg,"priority",true);
DO_SYMBOL(kw,_sym_hintLP,1693,KeywordPkg,"hintLP",true);
DO_SYMBOL(kw,_sym_chg,1694,KeywordPkg,"chg",true);
DO_SYMBOL(kw,_sym_ion,1695,KeywordPkg,"ion",true);
DO_SYMBOL(kw,_sym_rings,1696,KeywordPkg,"rings",true);
DO_SYMBOL(kw,_sym_tempInt,1697,KeywordPkg,"tempInt",true);
DO_SYMBOL(kw,_sym_type,1698,KeywordPkg,"type",true);
DO_SYMBOL(kw,_sym_ar1,1699,KeywordPkg,"ar1",true);
DO_SYMBOL(kw,_sym_ar2,1700,KeywordPkg,"ar2",true);
DO_SYMBOL(kw,_sym_ar3,1701,KeywordPkg,"ar3",true);
DO_SYMBOL(kw,_sym_ar4,1702,KeywordPkg,"ar4",true);
DO_SYMBOL(kw,_sym_ar5,1703,KeywordPkg,"ar5",true);
DO_SYMBOL(kw,_sym_mask,1704,KeywordPkg,"mask",true);
DO_SYMBOL(kw,_sym_configuration,1705,KeywordPkg,"configuration",true);
DO_SYMBOL(kw,_sym_stereochemistryType,1706,KeywordPkg,"stereochemistryType",true);
DO_SYMBOL(kw,_sym_pos,1707,KeywordPkg,"pos",true);
DO_SYMBOL(kw,_sym_order,1708,KeywordPkg,"order",true);
DO_SYMBOL(kw,_sym_properties,1709,KeywordPkg,"properties",true);
DO_SYMBOL(kw,_sym_a1,1710,KeywordPkg,"a1",true);
DO_SYMBOL(kw,_sym_a2,1711,KeywordPkg,"a2",true);
DO_SYMBOL(kw,_sym_bonds,1712,KeywordPkg,"bonds",true);
DO_SYMBOL(kw,_sym_atom,1713,KeywordPkg,"atom",true);
DO_SYMBOL(kw,_sym_position,1714,KeywordPkg,"position",true);
DO_SYMBOL(kw,_sym_weight,1715,KeywordPkg,"weight",true);
DO_SYMBOL(kw,_sym_atoms,1716,KeywordPkg,"atoms",true);
DO_SYMBOL(kw,_sym_k,1717,KeywordPkg,"k",true);
DO_SYMBOL(kw,_sym_title,1718,KeywordPkg,"title",true);
DO_SYMBOL(kw,_sym_ref,1719,KeywordPkg,"ref",true);
DO_SYMBOL(kw,_sym_bondDistinctions,1720,KeywordPkg,"bondDistinctions",true);
DO_SYMBOL(kw,_sym_Info,1721,KeywordPkg,"Info",true);
DO_SYMBOL(kw,_sym_Types,1722,KeywordPkg,"Types",true);
DO_SYMBOL(kw,_sym_Stretches,1723,KeywordPkg,"Stretches",true);
DO_SYMBOL(kw,_sym_Angles,1724,KeywordPkg,"Angles",true);
DO_SYMBOL(kw,_sym_Itors,1725,KeywordPkg,"Itors",true);
DO_SYMBOL(kw,_sym_Ptors,1726,KeywordPkg,"Ptors",true);
DO_SYMBOL(kw,_sym_Nonbonds,1727,KeywordPkg,"Nonbonds",true);
DO_SYMBOL(kw,_sym_Vdws,1728,KeywordPkg,"Vdws",true);
#endif // KeywordPkg_SYMBOLS
#if defined(ChemKwPkg_SYMBOLS)
DO_SYMBOL(chemkw,_sym_undefinedConfiguration,1729,ChemKwPkg,"undefinedConfiguration",true);
DO_SYMBOL(chemkw,_sym_R,1730,ChemKwPkg,"R",true);
DO_SYMBOL(chemkw,_sym_undefinedCenter,1731,ChemKwPkg,"undefinedCenter",true);
DO_SYMBOL(chemkw,_sym_chiral,1732,ChemKwPkg,"chiral",true);
DO_SYMBOL(chemkw,_sym_prochiral,1733,ChemKwPkg,"prochiral",true);
DO_SYMBOL(chemkw,_sym__singleBond,1734,ChemKwPkg,"_singleBond",true);
DO_SYMBOL(chemkw,_sym__doubleBond,1735,ChemKwPkg,"_doubleBond",true);
DO_SYMBOL(chemkw,_sym__tripleBond,1736,ChemKwPkg,"_tripleBond",true);
DO_SYMBOL(chemkw,_sym__aromaticBond,1737,ChemKwPkg,"_aromaticBond",true);
DO_SYMBOL(chemkw,_sym__hydrogenBond,1738,ChemKwPkg,"_hydrogenBond",true);
DO_SYMBOL(chemkw,_sym__virtualBond,1739,ChemKwPkg,"_virtualBond",true);
DO_SYMBOL(chemkw,_sym__dashedSingleBond,1740,ChemKwPkg,"_dashedSingleBond",true);
DO_SYMBOL(chemkw,_sym__dashedDoubleBond,1741,ChemKwPkg,"_dashedDoubleBond",true);
DO_SYMBOL(chemkw,_sym_noBond,1742,ChemKwPkg,"noBond",true);
DO_SYMBOL(chemkw,_sym_singleBond,1743,ChemKwPkg,"singleBond",true);
DO_SYMBOL(chemkw,_sym_doubleBond,1744,ChemKwPkg,"doubleBond",true);
DO_SYMBOL(chemkw,_sym_tripleBond,1745,ChemKwPkg,"tripleBond",true);
DO_SYMBOL(chemkw,_sym_aromaticBond,1746,ChemKwPkg,"aromaticBond",true);
DO_SYMBOL(chemkw,_sym_hydrogenBond,1747,ChemKwPkg,"hydrogenBond",true);
DO_SYMBOL(chemkw,_sym_virtualBond,1748,ChemKwPkg,"virtualBond",true);
DO_SYMBOL(chemkw,_sym_dashedSingleBond,1749,ChemKwPkg,"dashedSingleBond",true);
DO_SYMBOL(chemkw,_sym_dashedDoubleBond,1750,ChemKwPkg,"dashedDoubleBond",true);
DO_SYMBOL(chemkw,_sym_C,1751,ChemKwPkg,"C",true);
DO_SYMBOL(chemkw,_sym_N,1752,ChemKwPkg,"N",true);
DO_SYMBOL(chemkw,_sym_O,1753,ChemKwPkg,"O",true);
DO_SYMBOL(chemkw,_sym_S,1754,ChemKwPkg,"S",true);
DO_SYMBOL(chemkw,_sym_P,1755,ChemKwPkg,"P",true);
DO_SYMBOL(chemkw,_sym_F,1756,ChemKwPkg,"F",true);
DO_SYMBOL(chemkw,_sym_Cl,1757,ChemKwPkg,"Cl",true);
DO_SYMBOL(chemkw,_sym_Br,1758,ChemKwPkg,"Br",true);
DO_SYMBOL(chemkw,_sym_I,1759,ChemKwPkg,"I",true);
DO_SYMBOL(chemkw,_sym_message,1760,ChemKwPkg,"message",true);
DO_SYMBOL(chemkw,_sym_constitution,1761,ChemKwPkg,"constitution",true);
DO_SYMBOL(chemkw,_sym_entity,1762,ChemKwPkg,"entity",true);
DO_SYMBOL(chemkw,_sym_frameRecognizer,1763,ChemKwPkg,"frameRecognizer",true);
DO_SYMBOL(chemkw,_sym_E,1764,ChemKwPkg,"E",true);
DO_SYMBOL(chemkw,_sym_Z,1765,ChemKwPkg,"Z",true);
DO_SYMBOL(chemkw,_sym_1,1766,ChemKwPkg,"1",true);
DO_SYMBOL(chemkw,_sym_2,1767,ChemKwPkg,"2",true);
DO_SYMBOL(chemkw,_sym_3,1768,ChemKwPkg,"3",true);
DO_SYMBOL(chemkw,_sym_4,1769,ChemKwPkg,"4",true);
DO_SYMBOL(chemkw,_sym_5,1770,ChemKwPkg,"5",true);
DO_SYMBOL(chemkw,_sym_6,1771,ChemKwPkg,"6",true);
DO_SYMBOL(chemkw,_sym_idle,1772,ChemKwPkg,"idle",true);
DO_SYMBOL(chemkw,_sym_translate,1773,ChemKwPkg,"translate",true);
DO_SYMBOL(chemkw,_sym_rotate,1774,ChemKwPkg,"rotate",true);
DO_SYMBOL(chemkw,_sym_scale,1775,ChemKwPkg,"scale",true);
DO_SYMBOL(chemkw,_sym_XX,1776,ChemKwPkg,"XX",true);
DO_SYMBOL(chemkw,_sym_XA,1777,ChemKwPkg,"XA",true);
DO_SYMBOL(chemkw,_sym_XB,1778,ChemKwPkg,"XB",true);
DO_SYMBOL(chemkw,_sym_XC,1779,ChemKwPkg,"XC",true);
DO_SYMBOL(chemkw,_sym_XD,1780,ChemKwPkg,"XD",true);
DO_SYMBOL(chemkw,_sym_parameterized,1781,ChemKwPkg,"parameterized",true);
DO_SYMBOL(chemkw,_sym_estimated,1782,ChemKwPkg,"estimated",true);
DO_SYMBOL(chemkw,_sym_rough,1783,ChemKwPkg,"rough",true);
#endif // ChemKwPkg_SYMBOLS
#if defined(UnitsPkg_SYMBOLS)
DO_SYMBOL(units,_sym_NamedUnit_O,1784,UnitsPkg,"NamedUnit",true);
DO_SYMBOL(units,_sym_meters,1785,UnitsPkg,"meters",true);
DO_SYMBOL(units,_sym_kilometers,1786,UnitsPkg,"kilometers",true);
DO_SYMBOL(units,_sym_millimeters,1787,UnitsPkg,"millimeters",true);
DO_SYMBOL(units,_sym_micrometers,1788,UnitsPkg,"micrometers",true);
DO_SYMBOL(units,_sym_nanometers,1789,UnitsPkg,"nanometers",true);
DO_SYMBOL(units,_sym_picometers,1790,UnitsPkg,"picometers",true);
DO_SYMBOL(units,_sym_angstroms,1791,UnitsPkg,"angstroms",true);
DO_SYMBOL(units,_sym_kilograms,1792,UnitsPkg,"kilograms",true);
DO_SYMBOL(units,_sym_grams,1793,UnitsPkg,"grams",true);
DO_SYMBOL(units,_sym_daltons,1794,UnitsPkg,"daltons",true);
DO_SYMBOL(units,_sym_seconds,1795,UnitsPkg,"seconds",true);
DO_SYMBOL(units,_sym_milliseconds,1796,UnitsPkg,"milliseconds",true);
DO_SYMBOL(units,_sym_microseconds,1797,UnitsPkg,"microseconds",true);
DO_SYMBOL(units,_sym_nanoseconds,1798,UnitsPkg,"nanoseconds",true);
DO_SYMBOL(units,_sym_picoseconds,1799,UnitsPkg,"picoseconds",true);
DO_SYMBOL(units,_sym_femtoseconds,1800,UnitsPkg,"femtoseconds",true);
DO_SYMBOL(units,_sym_per_picosecond,1801,UnitsPkg,"per_picosecond",true);
DO_SYMBOL(units,_sym_amperes,1802,UnitsPkg,"amperes",true);
DO_SYMBOL(units,_sym_coulomb,1803,UnitsPkg,"coulomb",true);
DO_SYMBOL(units,_sym_elementaryCharge,1804,UnitsPkg,"elementaryCharge",true);
DO_SYMBOL(units,_sym_kelvin,1805,UnitsPkg,"kelvin",true);
DO_SYMBOL(units,_sym_candelas,1806,UnitsPkg,"candelas",true);
DO_SYMBOL(units,_sym_moles,1807,UnitsPkg,"moles",true);
DO_SYMBOL(units,_sym_Joule,1808,UnitsPkg,"Joule",true);
DO_SYMBOL(units,_sym_joule,1809,UnitsPkg,"joule",true);
DO_SYMBOL(units,_sym_Joules,1810,UnitsPkg,"Joules",true);
DO_SYMBOL(units,_sym_joules,1811,UnitsPkg,"joules",true);
DO_SYMBOL(units,_sym_kiloJoule,1812,UnitsPkg,"kiloJoule",true);
DO_SYMBOL(units,_sym_kilojoule,1813,UnitsPkg,"kilojoule",true);
DO_SYMBOL(units,_sym_kiloJoules,1814,UnitsPkg,"kiloJoules",true);
DO_SYMBOL(units,_sym_kilojoules,1815,UnitsPkg,"kilojoules",true);
DO_SYMBOL(units,_sym_kiloJoules_per_mole,1816,UnitsPkg,"kiloJoules_per_mole",true);
DO_SYMBOL(units,_sym_kilojoules_per_mole,1817,UnitsPkg,"kilojoules_per_mole",true);
DO_SYMBOL(units,_sym_kiloCalories_per_mole,1818,UnitsPkg,"kiloCalories_per_mole",true);
DO_SYMBOL(units,_sym_kilocalories_per_mole,1819,UnitsPkg,"kilocalories_per_mole",true);
DO_SYMBOL(units,_sym_nm_per_ps,1820,UnitsPkg,"nm_per_ps",true);
DO_SYMBOL(units,_sym_Dimension_O,1821,UnitsPkg,"Dimension",true);
DO_SYMBOL(units,_sym_Unit_O,1822,UnitsPkg,"Unit",true);
DO_SYMBOL(units,_sym_Quantity_O,1823,UnitsPkg,"Quantity",true);
#endif // UnitsPkg_SYMBOLS
#if defined(ClosPkg_SYMBOLS)
DO_SYMBOL(clos,_sym_compute_applicable_methods_using_classes,1824,ClosPkg,"compute_applicable_methods_using_classes",true);
DO_SYMBOL(clos,_sym_compute_effective_method_function,1825,ClosPkg,"compute_effective_method_function",true);
DO_SYMBOL(clos,_sym_std_compute_applicable_methods,1826,ClosPkg,"std_compute_applicable_methods",true);
DO_SYMBOL(clos,_sym_std_compute_effective_method,1827,ClosPkg,"std_compute_effective_method",true);
DO_SYMBOL(clos,_sym_clearGfunHash,1828,ClosPkg,"clearGfunHash",true);
DO_SYMBOL(clos,_sym_setFuncallableInstanceFunction,1829,ClosPkg,"setFuncallableInstanceFunction",true);
DO_SYMBOL(clos,_sym_standardOptimizedReaderMethod,1830,ClosPkg,"standardOptimizedReaderMethod",true);
DO_SYMBOL(clos,_sym_standardOptimizedWriterMethod,1831,ClosPkg,"standardOptimizedWriterMethod",true);
DO_SYMBOL(clos,_sym_standardOptimizedReaderFunction,1832,ClosPkg,"standardOptimizedReaderFunction",true);
DO_SYMBOL(clos,_sym_standardOptimizedWriterFunction,1833,ClosPkg,"standardOptimizedWriterFunction",true);
DO_SYMBOL(clos,_sym_classp,1834,ClosPkg,"classp",true);
DO_SYMBOL(clos,_sym_aSingleClosSymbol,1835,ClosPkg,"aSingleClosSymbol",true);
DO_SYMBOL(clos,_sym_class_precedence_list,1836,ClosPkg,"class_precedence_list",true);
DO_SYMBOL(clos,_sym_StdClass_O,1837,ClosPkg,"STD-CLASS",true);
DO_SYMBOL(clos,_sym_FuncallableStandardClass_O,1838,ClosPkg,"FuncallableStandardClass",true);
#endif // ClosPkg_SYMBOLS
#if defined(ClbindPkg_SYMBOLS)
DO_SYMBOL(clbind,_sym_STARtheClassRegistrySTAR,1839,ClbindPkg,"STARtheClassRegistrySTAR",true);
DO_SYMBOL(clbind,_sym_ClassRegistry_O,1840,ClbindPkg,"ClassRegistry",true);
DO_SYMBOL(clbind,_sym_ClassRep_O,1841,ClbindPkg,"ClassRep",true);
#endif // ClbindPkg_SYMBOLS
#if defined(LlvmoPkg_SYMBOLS)
DO_SYMBOL(llvmo,_sym_dwTag,1842,LlvmoPkg,"dwTag",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion11,1843,LlvmoPkg,"LLVMDebugVersion11",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion10,1844,LlvmoPkg,"LLVMDebugVersion10",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion9,1845,LlvmoPkg,"LLVMDebugVersion9",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion8,1846,LlvmoPkg,"LLVMDebugVersion8",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion7,1847,LlvmoPkg,"LLVMDebugVersion7",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion6,1848,LlvmoPkg,"LLVMDebugVersion6",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion5,1849,LlvmoPkg,"LLVMDebugVersion5",true);
DO_SYMBOL(llvmo,_sym_LLVMDebugVersion4,1850,LlvmoPkg,"LLVMDebugVersion4",true);
DO_SYMBOL(llvmo,_sym__PLUS_DebugMetadataVersion_PLUS_,1851,LlvmoPkg,"_PLUS_DebugMetadataVersion_PLUS_",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_array_type,1852,LlvmoPkg,"DW_TAG_array_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_class_type,1853,LlvmoPkg,"DW_TAG_class_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_entry_point,1854,LlvmoPkg,"DW_TAG_entry_point",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_enumeration_type,1855,LlvmoPkg,"DW_TAG_enumeration_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_formal_parameter,1856,LlvmoPkg,"DW_TAG_formal_parameter",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_imported_declaration,1857,LlvmoPkg,"DW_TAG_imported_declaration",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_label,1858,LlvmoPkg,"DW_TAG_label",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_lexical_block,1859,LlvmoPkg,"DW_TAG_lexical_block",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_member,1860,LlvmoPkg,"DW_TAG_member",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_pointer_type,1861,LlvmoPkg,"DW_TAG_pointer_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_reference_type,1862,LlvmoPkg,"DW_TAG_reference_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_compile_unit,1863,LlvmoPkg,"DW_TAG_compile_unit",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_string_type,1864,LlvmoPkg,"DW_TAG_string_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_structure_type,1865,LlvmoPkg,"DW_TAG_structure_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_subroutine_type,1866,LlvmoPkg,"DW_TAG_subroutine_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_typedef,1867,LlvmoPkg,"DW_TAG_typedef",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_union_type,1868,LlvmoPkg,"DW_TAG_union_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_unspecified_parameters,1869,LlvmoPkg,"DW_TAG_unspecified_parameters",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_variant,1870,LlvmoPkg,"DW_TAG_variant",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_common_block,1871,LlvmoPkg,"DW_TAG_common_block",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_common_inclusion,1872,LlvmoPkg,"DW_TAG_common_inclusion",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_inheritance,1873,LlvmoPkg,"DW_TAG_inheritance",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_inlined_subroutine,1874,LlvmoPkg,"DW_TAG_inlined_subroutine",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_module,1875,LlvmoPkg,"DW_TAG_module",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_ptr_to_member_type,1876,LlvmoPkg,"DW_TAG_ptr_to_member_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_set_type,1877,LlvmoPkg,"DW_TAG_set_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_subrange_type,1878,LlvmoPkg,"DW_TAG_subrange_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_with_stmt,1879,LlvmoPkg,"DW_TAG_with_stmt",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_access_declaration,1880,LlvmoPkg,"DW_TAG_access_declaration",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_base_type,1881,LlvmoPkg,"DW_TAG_base_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_catch_block,1882,LlvmoPkg,"DW_TAG_catch_block",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_const_type,1883,LlvmoPkg,"DW_TAG_const_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_constant,1884,LlvmoPkg,"DW_TAG_constant",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_enumerator,1885,LlvmoPkg,"DW_TAG_enumerator",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_file_type,1886,LlvmoPkg,"DW_TAG_file_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_friend,1887,LlvmoPkg,"DW_TAG_friend",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_namelist,1888,LlvmoPkg,"DW_TAG_namelist",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_namelist_item,1889,LlvmoPkg,"DW_TAG_namelist_item",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_packed_type,1890,LlvmoPkg,"DW_TAG_packed_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_subprogram,1891,LlvmoPkg,"DW_TAG_subprogram",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_template_type_parameter,1892,LlvmoPkg,"DW_TAG_template_type_parameter",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_template_value_parameter,1893,LlvmoPkg,"DW_TAG_template_value_parameter",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_thrown_type,1894,LlvmoPkg,"DW_TAG_thrown_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_try_block,1895,LlvmoPkg,"DW_TAG_try_block",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_variant_part,1896,LlvmoPkg,"DW_TAG_variant_part",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_variable,1897,LlvmoPkg,"DW_TAG_variable",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_volatile_type,1898,LlvmoPkg,"DW_TAG_volatile_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_dwarf_procedure,1899,LlvmoPkg,"DW_TAG_dwarf_procedure",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_restrict_type,1900,LlvmoPkg,"DW_TAG_restrict_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_interface_type,1901,LlvmoPkg,"DW_TAG_interface_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_namespace,1902,LlvmoPkg,"DW_TAG_namespace",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_imported_module,1903,LlvmoPkg,"DW_TAG_imported_module",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_unspecified_type,1904,LlvmoPkg,"DW_TAG_unspecified_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_partial_unit,1905,LlvmoPkg,"DW_TAG_partial_unit",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_imported_unit,1906,LlvmoPkg,"DW_TAG_imported_unit",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_condition,1907,LlvmoPkg,"DW_TAG_condition",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_shared_type,1908,LlvmoPkg,"DW_TAG_shared_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_type_unit,1909,LlvmoPkg,"DW_TAG_type_unit",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_rvalue_reference_type,1910,LlvmoPkg,"DW_TAG_rvalue_reference_type",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_template_alias,1911,LlvmoPkg,"DW_TAG_template_alias",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_MIPS_loop,1912,LlvmoPkg,"DW_TAG_MIPS_loop",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_format_label,1913,LlvmoPkg,"DW_TAG_format_label",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_function_template,1914,LlvmoPkg,"DW_TAG_function_template",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_class_template,1915,LlvmoPkg,"DW_TAG_class_template",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_GNU_template_template_param,1916,LlvmoPkg,"DW_TAG_GNU_template_template_param",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_GNU_template_parameter_pack,1917,LlvmoPkg,"DW_TAG_GNU_template_parameter_pack",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_GNU_formal_parameter_pack,1918,LlvmoPkg,"DW_TAG_GNU_formal_parameter_pack",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_lo_user,1919,LlvmoPkg,"DW_TAG_lo_user",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_APPLE_property,1920,LlvmoPkg,"DW_TAG_APPLE_property",true);
DO_SYMBOL(llvmo,_sym_DW_TAG_hi_user,1921,LlvmoPkg,"DW_TAG_hi_user",true);
DO_SYMBOL(llvmo,_sym_STARdwarfConstantsSTAR,1922,LlvmoPkg,"STARdwarfConstantsSTAR",true);
DO_SYMBOL(llvmo,_sym_DW_LANG_COMMON_LISP,1923,LlvmoPkg,"DW_LANG_COMMON_LISP",true);
DO_SYMBOL(llvmo,_sym_DW_LANG_C,1924,LlvmoPkg,"DW_LANG_C",true);
DO_SYMBOL(llvmo,_sym_DW_LANG_C_plus_plus,1925,LlvmoPkg,"DW_LANG_C_plus_plus",true);
DO_SYMBOL(llvmo,_sym__PLUS_DW_ATE_SIGNED_FIXED_PLUS_,1926,LlvmoPkg,"_PLUS_DW_ATE_SIGNED_FIXED_PLUS_",true);
DO_SYMBOL(llvmo,_sym_STARaSTAR,1927,LlvmoPkg,"STARaSTAR",true);
DO_SYMBOL(llvmo,_sym_CodeGenFileType,1928,LlvmoPkg,"CodeGenFileType",true);
DO_SYMBOL(llvmo,_sym_CodeGenFileType_Null,1929,LlvmoPkg,"CodeGenFileType_Null",true);
DO_SYMBOL(llvmo,_sym_CodeGenFileType_AssemblyFile,1930,LlvmoPkg,"CodeGenFileType_AssemblyFile",true);
DO_SYMBOL(llvmo,_sym_CodeGenFileType_ObjectFile,1931,LlvmoPkg,"CodeGenFileType_ObjectFile",true);
DO_SYMBOL(llvmo,_sym_CodeGenOpt,1932,LlvmoPkg,"CodeGenOpt",true);
DO_SYMBOL(llvmo,_sym_CodeGenOpt_None,1933,LlvmoPkg,"CodeGenOpt_None",true);
DO_SYMBOL(llvmo,_sym_CodeGenOpt_Less,1934,LlvmoPkg,"CodeGenOpt_Less",true);
DO_SYMBOL(llvmo,_sym_CodeGenOpt_Default,1935,LlvmoPkg,"CodeGenOpt_Default",true);
DO_SYMBOL(llvmo,_sym_CodeGenOpt_Aggressive,1936,LlvmoPkg,"CodeGenOpt_Aggressive",true);
DO_SYMBOL(llvmo,_sym_RelocModel,1937,LlvmoPkg,"RelocModel",true);
DO_SYMBOL(llvmo,_sym_RelocModel_Default,1938,LlvmoPkg,"RelocModel_Default",true);
DO_SYMBOL(llvmo,_sym_RelocModel_Static,1939,LlvmoPkg,"RelocModel_Static",true);
DO_SYMBOL(llvmo,_sym_RelocModel_PIC_,1940,LlvmoPkg,"RelocModel_PIC_",true);
DO_SYMBOL(llvmo,_sym_RelocModel_DynamicNoPIC,1941,LlvmoPkg,"RelocModel_DynamicNoPIC",true);
DO_SYMBOL(llvmo,_sym_CodeModel,1942,LlvmoPkg,"CodeModel",true);
DO_SYMBOL(llvmo,_sym_CodeModel_Default,1943,LlvmoPkg,"CodeModel_Default",true);
DO_SYMBOL(llvmo,_sym_CodeModel_JITDefault,1944,LlvmoPkg,"CodeModel_JITDefault",true);
DO_SYMBOL(llvmo,_sym_CodeModel_Small,1945,LlvmoPkg,"CodeModel_Small",true);
DO_SYMBOL(llvmo,_sym_CodeModel_Kernel,1946,LlvmoPkg,"CodeModel_Kernel",true);
DO_SYMBOL(llvmo,_sym_CodeModel_Medium,1947,LlvmoPkg,"CodeModel_Medium",true);
DO_SYMBOL(llvmo,_sym_CodeModel_Large,1948,LlvmoPkg,"CodeModel_Large",true);
DO_SYMBOL(llvmo,_sym_ArchType,1949,LlvmoPkg,"ArchType",true);
DO_SYMBOL(llvmo,_sym_ArchType_UnknownArch,1950,LlvmoPkg,"ArchType_UnknownArch",true);
DO_SYMBOL(llvmo,_sym_ArchType_arm,1951,LlvmoPkg,"ArchType_arm",true);
DO_SYMBOL(llvmo,_sym_ArchType_armeb,1952,LlvmoPkg,"ArchType_armeb",true);
DO_SYMBOL(llvmo,_sym_ArchType_aarch64,1953,LlvmoPkg,"ArchType_aarch64",true);
DO_SYMBOL(llvmo,_sym_ArchType_aarch64_be,1954,LlvmoPkg,"ArchType_aarch64_be",true);
DO_SYMBOL(llvmo,_sym_ArchType_hexagon,1955,LlvmoPkg,"ArchType_hexagon",true);
DO_SYMBOL(llvmo,_sym_ArchType_mips,1956,LlvmoPkg,"ArchType_mips",true);
DO_SYMBOL(llvmo,_sym_ArchType_mipsel,1957,LlvmoPkg,"ArchType_mipsel",true);
DO_SYMBOL(llvmo,_sym_ArchType_mips64,1958,LlvmoPkg,"ArchType_mips64",true);
DO_SYMBOL(llvmo,_sym_ArchType_mips64el,1959,LlvmoPkg,"ArchType_mips64el",true);
DO_SYMBOL(llvmo,_sym_ArchType_msp430,1960,LlvmoPkg,"ArchType_msp430",true);
DO_SYMBOL(llvmo,_sym_ArchType_ppc,1961,LlvmoPkg,"ArchType_ppc",true);
DO_SYMBOL(llvmo,_sym_ArchType_ppc64,1962,LlvmoPkg,"ArchType_ppc64",true);
DO_SYMBOL(llvmo,_sym_ArchType_ppc64le,1963,LlvmoPkg,"ArchType_ppc64le",true);
DO_SYMBOL(llvmo,_sym_ArchType_r600,1964,LlvmoPkg,"ArchType_r600",true);
DO_SYMBOL(llvmo,_sym_ArchType_sparc,1965,LlvmoPkg,"ArchType_sparc",true);
DO_SYMBOL(llvmo,_sym_ArchType_sparcv9,1966,LlvmoPkg,"ArchType_sparcv9",true);
DO_SYMBOL(llvmo,_sym_ArchType_systemz,1967,LlvmoPkg,"ArchType_systemz",true);
DO_SYMBOL(llvmo,_sym_ArchType_tce,1968,LlvmoPkg,"ArchType_tce",true);
DO_SYMBOL(llvmo,_sym_ArchType_thumb,1969,LlvmoPkg,"ArchType_thumb",true);
DO_SYMBOL(llvmo,_sym_ArchType_thumbeb,1970,LlvmoPkg,"ArchType_thumbeb",true);
DO_SYMBOL(llvmo,_sym_ArchType_x86,1971,LlvmoPkg,"ArchType_x86",true);
DO_SYMBOL(llvmo,_sym_ArchType_x86_64,1972,LlvmoPkg,"ArchType_x86_64",true);
DO_SYMBOL(llvmo,_sym_ArchType_xcore,1973,LlvmoPkg,"ArchType_xcore",true);
DO_SYMBOL(llvmo,_sym_ArchType_nvptx,1974,LlvmoPkg,"ArchType_nvptx",true);
DO_SYMBOL(llvmo,_sym_ArchType_nvptx64,1975,LlvmoPkg,"ArchType_nvptx64",true);
DO_SYMBOL(llvmo,_sym_ArchType_le32,1976,LlvmoPkg,"ArchType_le32",true);
DO_SYMBOL(llvmo,_sym_ArchType_le64,1977,LlvmoPkg,"ArchType_le64",true);
DO_SYMBOL(llvmo,_sym_ArchType_amdil,1978,LlvmoPkg,"ArchType_amdil",true);
DO_SYMBOL(llvmo,_sym_ArchType_amdil64,1979,LlvmoPkg,"ArchType_amdil64",true);
DO_SYMBOL(llvmo,_sym_ArchType_hsail,1980,LlvmoPkg,"ArchType_hsail",true);
DO_SYMBOL(llvmo,_sym_ArchType_hsail64,1981,LlvmoPkg,"ArchType_hsail64",true);
DO_SYMBOL(llvmo,_sym_ArchType_spir,1982,LlvmoPkg,"ArchType_spir",true);
DO_SYMBOL(llvmo,_sym_ArchType_spir64,1983,LlvmoPkg,"ArchType_spir64",true);
DO_SYMBOL(llvmo,_sym_ArchType_kalimba,1984,LlvmoPkg,"ArchType_kalimba",true);
DO_SYMBOL(llvmo,_sym_SubArchType_NoSubArch,1985,LlvmoPkg,"SubArchType_NoSubArch",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v8,1986,LlvmoPkg,"SubArchType_ARMSubArch_v8",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v7,1987,LlvmoPkg,"SubArchType_ARMSubArch_v7",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v7em,1988,LlvmoPkg,"SubArchType_ARMSubArch_v7em",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v7m,1989,LlvmoPkg,"SubArchType_ARMSubArch_v7m",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v7s,1990,LlvmoPkg,"SubArchType_ARMSubArch_v7s",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v6,1991,LlvmoPkg,"SubArchType_ARMSubArch_v6",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v6m,1992,LlvmoPkg,"SubArchType_ARMSubArch_v6m",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v6t2,1993,LlvmoPkg,"SubArchType_ARMSubArch_v6t2",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v5,1994,LlvmoPkg,"SubArchType_ARMSubArch_v5",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v5te,1995,LlvmoPkg,"SubArchType_ARMSubArch_v5te",true);
DO_SYMBOL(llvmo,_sym_SubArchType_ARMSubArch_v4t,1996,LlvmoPkg,"SubArchType_ARMSubArch_v4t",true);
DO_SYMBOL(llvmo,_sym_SubArchType_KalimbaSubArch_v3,1997,LlvmoPkg,"SubArchType_KalimbaSubArch_v3",true);
DO_SYMBOL(llvmo,_sym_SubArchType_KalimbaSubArch_v4,1998,LlvmoPkg,"SubArchType_KalimbaSubArch_v4",true);
DO_SYMBOL(llvmo,_sym_SubArchType_KalimbaSubArch_v5,1999,LlvmoPkg,"SubArchType_KalimbaSubArch_v5",true);
DO_SYMBOL(llvmo,_sym_SubArchType,2000,LlvmoPkg,"SubArchType",true);
DO_SYMBOL(llvmo,_sym_VendorType_UnknownVendor,2001,LlvmoPkg,"VendorType_UnknownVendor",true);
DO_SYMBOL(llvmo,_sym_VendorType_Apple,2002,LlvmoPkg,"VendorType_Apple",true);
DO_SYMBOL(llvmo,_sym_VendorType_PC,2003,LlvmoPkg,"VendorType_PC",true);
DO_SYMBOL(llvmo,_sym_VendorType_SCEI,2004,LlvmoPkg,"VendorType_SCEI",true);
DO_SYMBOL(llvmo,_sym_VendorType_BGP,2005,LlvmoPkg,"VendorType_BGP",true);
DO_SYMBOL(llvmo,_sym_VendorType_BGQ,2006,LlvmoPkg,"VendorType_BGQ",true);
DO_SYMBOL(llvmo,_sym_VendorType_Freescale,2007,LlvmoPkg,"VendorType_Freescale",true);
DO_SYMBOL(llvmo,_sym_VendorType_IBM,2008,LlvmoPkg,"VendorType_IBM",true);
DO_SYMBOL(llvmo,_sym_VendorType_ImaginationTechnologies,2009,LlvmoPkg,"VendorType_ImaginationTechnologies",true);
DO_SYMBOL(llvmo,_sym_VendorType_MipsTechnologies,2010,LlvmoPkg,"VendorType_MipsTechnologies",true);
DO_SYMBOL(llvmo,_sym_VendorType_NVIDIA,2011,LlvmoPkg,"VendorType_NVIDIA",true);
DO_SYMBOL(llvmo,_sym_VendorType_CSR,2012,LlvmoPkg,"VendorType_CSR",true);
DO_SYMBOL(llvmo,_sym_VendorType,2013,LlvmoPkg,"VendorType",true);
DO_SYMBOL(llvmo,_sym_OSType_UnknownOS,2014,LlvmoPkg,"OSType_UnknownOS",true);
DO_SYMBOL(llvmo,_sym_OSType_Darwin,2015,LlvmoPkg,"OSType_Darwin",true);
DO_SYMBOL(llvmo,_sym_OSType_DragonFly,2016,LlvmoPkg,"OSType_DragonFly",true);
DO_SYMBOL(llvmo,_sym_OSType_FreeBSD,2017,LlvmoPkg,"OSType_FreeBSD",true);
DO_SYMBOL(llvmo,_sym_OSType_IOS,2018,LlvmoPkg,"OSType_IOS",true);
DO_SYMBOL(llvmo,_sym_OSType_KFreeBSD,2019,LlvmoPkg,"OSType_KFreeBSD",true);
DO_SYMBOL(llvmo,_sym_OSType_Linux,2020,LlvmoPkg,"OSType_Linux",true);
DO_SYMBOL(llvmo,_sym_OSType_Lv2,2021,LlvmoPkg,"OSType_Lv2",true);
DO_SYMBOL(llvmo,_sym_OSType_MacOSX,2022,LlvmoPkg,"OSType_MacOSX",true);
DO_SYMBOL(llvmo,_sym_OSType_NetBSD,2023,LlvmoPkg,"OSType_NetBSD",true);
DO_SYMBOL(llvmo,_sym_OSType_OpenBSD,2024,LlvmoPkg,"OSType_OpenBSD",true);
DO_SYMBOL(llvmo,_sym_OSType_Solaris,2025,LlvmoPkg,"OSType_Solaris",true);
DO_SYMBOL(llvmo,_sym_OSType_Win32,2026,LlvmoPkg,"OSType_Win32",true);
DO_SYMBOL(llvmo,_sym_OSType_Haiku,2027,LlvmoPkg,"OSType_Haiku",true);
DO_SYMBOL(llvmo,_sym_OSType_Minix,2028,LlvmoPkg,"OSType_Minix",true);
DO_SYMBOL(llvmo,_sym_OSType_RTEMS,2029,LlvmoPkg,"OSType_RTEMS",true);
DO_SYMBOL(llvmo,_sym_OSType_NaCl,2030,LlvmoPkg,"OSType_NaCl",true);
DO_SYMBOL(llvmo,_sym_OSType_CNK,2031,LlvmoPkg,"OSType_CNK",true);
DO_SYMBOL(llvmo,_sym_OSType_Bitrig,2032,LlvmoPkg,"OSType_Bitrig",true);
DO_SYMBOL(llvmo,_sym_OSType_AIX,2033,LlvmoPkg,"OSType_AIX",true);
DO_SYMBOL(llvmo,_sym_OSType_CUDA,2034,LlvmoPkg,"OSType_CUDA",true);
DO_SYMBOL(llvmo,_sym_OSType_NVCL,2035,LlvmoPkg,"OSType_NVCL",true);
DO_SYMBOL(llvmo,_sym_OSType,2036,LlvmoPkg,"OSType",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_UnknownEnvironment,2037,LlvmoPkg,"EnvironmentType_UnknownEnvironment",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_GNU,2038,LlvmoPkg,"EnvironmentType_GNU",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_GNUEABI,2039,LlvmoPkg,"EnvironmentType_GNUEABI",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_GNUEABIHF,2040,LlvmoPkg,"EnvironmentType_GNUEABIHF",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_GNUX32,2041,LlvmoPkg,"EnvironmentType_GNUX32",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_CODE16,2042,LlvmoPkg,"EnvironmentType_CODE16",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_EABI,2043,LlvmoPkg,"EnvironmentType_EABI",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_EABIHF,2044,LlvmoPkg,"EnvironmentType_EABIHF",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_Android,2045,LlvmoPkg,"EnvironmentType_Android",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_MSVC,2046,LlvmoPkg,"EnvironmentType_MSVC",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_Itanium,2047,LlvmoPkg,"EnvironmentType_Itanium",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType_Cygnus,2048,LlvmoPkg,"EnvironmentType_Cygnus",true);
DO_SYMBOL(llvmo,_sym_EnvironmentType,2049,LlvmoPkg,"EnvironmentType",true);
DO_SYMBOL(llvmo,_sym_ObjectFormatType_UnknownObjectFormat,2050,LlvmoPkg,"ObjectFormatType_UnknownObjectFormat",true);
DO_SYMBOL(llvmo,_sym_ObjectFormatType_COFF,2051,LlvmoPkg,"ObjectFormatType_COFF",true);
DO_SYMBOL(llvmo,_sym_ObjectFormatType_ELF,2052,LlvmoPkg,"ObjectFormatType_ELF",true);
DO_SYMBOL(llvmo,_sym_ObjectFormatType_MachO,2053,LlvmoPkg,"ObjectFormatType_MachO",true);
DO_SYMBOL(llvmo,_sym_ObjectFormatType,2054,LlvmoPkg,"ObjectFormatType",true);
DO_SYMBOL(llvmo,_sym_AttributeNone,2055,LlvmoPkg,"AttributeNone",true);
DO_SYMBOL(llvmo,_sym_AttributeZExt,2056,LlvmoPkg,"AttributeZExt",true);
DO_SYMBOL(llvmo,_sym_AttributeSExt,2057,LlvmoPkg,"AttributeSExt",true);
DO_SYMBOL(llvmo,_sym_AttributeNoReturn,2058,LlvmoPkg,"AttributeNoReturn",true);
DO_SYMBOL(llvmo,_sym_AttributeInReg,2059,LlvmoPkg,"AttributeInReg",true);
DO_SYMBOL(llvmo,_sym_AttributeStructRet,2060,LlvmoPkg,"AttributeStructRet",true);
DO_SYMBOL(llvmo,_sym_AttributeNoUnwind,2061,LlvmoPkg,"AttributeNoUnwind",true);
DO_SYMBOL(llvmo,_sym_AttributeNoAlias,2062,LlvmoPkg,"AttributeNoAlias",true);
DO_SYMBOL(llvmo,_sym_AttributeByVal,2063,LlvmoPkg,"AttributeByVal",true);
DO_SYMBOL(llvmo,_sym_AttributeNest,2064,LlvmoPkg,"AttributeNest",true);
DO_SYMBOL(llvmo,_sym_AttributeReadNone,2065,LlvmoPkg,"AttributeReadNone",true);
DO_SYMBOL(llvmo,_sym_AttributeReadOnly,2066,LlvmoPkg,"AttributeReadOnly",true);
DO_SYMBOL(llvmo,_sym_AttributeNoInline,2067,LlvmoPkg,"AttributeNoInline",true);
DO_SYMBOL(llvmo,_sym_AttributeAlwaysInline,2068,LlvmoPkg,"AttributeAlwaysInline",true);
DO_SYMBOL(llvmo,_sym_AttributeOptimizeForSize,2069,LlvmoPkg,"AttributeOptimizeForSize",true);
DO_SYMBOL(llvmo,_sym_AttributeStackProtect,2070,LlvmoPkg,"AttributeStackProtect",true);
DO_SYMBOL(llvmo,_sym_AttributeStackProtectReq,2071,LlvmoPkg,"AttributeStackProtectReq",true);
DO_SYMBOL(llvmo,_sym_AttributeAlignment,2072,LlvmoPkg,"AttributeAlignment",true);
DO_SYMBOL(llvmo,_sym_AttributeNoCapture,2073,LlvmoPkg,"AttributeNoCapture",true);
DO_SYMBOL(llvmo,_sym_AttributeNoRedZone,2074,LlvmoPkg,"AttributeNoRedZone",true);
DO_SYMBOL(llvmo,_sym_AttributeNoImplicitFloat,2075,LlvmoPkg,"AttributeNoImplicitFloat",true);
DO_SYMBOL(llvmo,_sym_AttributeNaked,2076,LlvmoPkg,"AttributeNaked",true);
DO_SYMBOL(llvmo,_sym_AttributeInlineHint,2077,LlvmoPkg,"AttributeInlineHint",true);
DO_SYMBOL(llvmo,_sym_AttributeStackAlignment,2078,LlvmoPkg,"AttributeStackAlignment",true);
DO_SYMBOL(llvmo,_sym_AttributeReturnsTwice,2079,LlvmoPkg,"AttributeReturnsTwice",true);
DO_SYMBOL(llvmo,_sym_AttributeUWTable,2080,LlvmoPkg,"AttributeUWTable",true);
DO_SYMBOL(llvmo,_sym_AttributeNonLazyBind,2081,LlvmoPkg,"AttributeNonLazyBind",true);
DO_SYMBOL(llvmo,_sym_AttributeAddressSafety,2082,LlvmoPkg,"AttributeAddressSafety",true);
DO_SYMBOL(llvmo,_sym_AttributeEnum,2083,LlvmoPkg,"AttributeEnum",true);
DO_SYMBOL(llvmo,_sym_attributesGet,2084,LlvmoPkg,"attributesGet",true);
DO_SYMBOL(llvmo,_sym_verifyModule,2085,LlvmoPkg,"verifyModule",true);
DO_SYMBOL(llvmo,_sym_module_get_function_list,2086,LlvmoPkg,"module_get_function_list",true);
DO_SYMBOL(llvmo,_sym_STARmoduleModFlagBehaviorSTAR,2087,LlvmoPkg,"STARmoduleModFlagBehaviorSTAR",true);
DO_SYMBOL(llvmo,_sym_moduleFlagError,2088,LlvmoPkg,"moduleFlagError",true);
DO_SYMBOL(llvmo,_sym_moduleFlagWarning,2089,LlvmoPkg,"moduleFlagWarning",true);
DO_SYMBOL(llvmo,_sym_moduleFlagRequire,2090,LlvmoPkg,"moduleFlagRequire",true);
DO_SYMBOL(llvmo,_sym_moduleFlagOverride,2091,LlvmoPkg,"moduleFlagOverride",true);
DO_SYMBOL(llvmo,_sym_moduleFlagAppend,2092,LlvmoPkg,"moduleFlagAppend",true);
DO_SYMBOL(llvmo,_sym_moduleFlagAppendUnique,2093,LlvmoPkg,"moduleFlagAppendUnique",true);
DO_SYMBOL(llvmo,_sym_interpreter,2094,LlvmoPkg,"interpreter",true);
DO_SYMBOL(llvmo,_sym_jit,2095,LlvmoPkg,"jit",true);
DO_SYMBOL(llvmo,_sym_makeAPInt1,2096,LlvmoPkg,"makeAPInt1",true);
DO_SYMBOL(llvmo,_sym_makeAPInt,2097,LlvmoPkg,"makeAPInt",true);
DO_SYMBOL(llvmo,_sym_makeAPWidth,2098,LlvmoPkg,"makeAPWidth",true);
DO_SYMBOL(llvmo,_sym_makeAP32,2099,LlvmoPkg,"makeAP32",true);
DO_SYMBOL(llvmo,_sym_makeAP64,2100,LlvmoPkg,"makeAP64",true);
DO_SYMBOL(llvmo,_sym_mdnodeGet,2101,LlvmoPkg,"mdnodeGet",true);
DO_SYMBOL(llvmo,_sym_ValueAsMetadataGet,2102,LlvmoPkg,"ValueAsMetadataGet",true);
DO_SYMBOL(llvmo,_sym_STARglobal_value_linkage_typesSTAR,2103,LlvmoPkg,"STARglobal_value_linkage_typesSTAR",true);
DO_SYMBOL(llvmo,_sym_ExternalLinkage,2104,LlvmoPkg,"ExternalLinkage",true);
DO_SYMBOL(llvmo,_sym_AvailableExternallyLinkage,2105,LlvmoPkg,"AvailableExternallyLinkage",true);
DO_SYMBOL(llvmo,_sym_LinkOnceAnyLinkage,2106,LlvmoPkg,"LinkOnceAnyLinkage",true);
DO_SYMBOL(llvmo,_sym_LinkOnceODRLinkage,2107,LlvmoPkg,"LinkOnceODRLinkage",true);
DO_SYMBOL(llvmo,_sym_LinkOnceODRAutoHideLinkage,2108,LlvmoPkg,"LinkOnceODRAutoHideLinkage",true);
DO_SYMBOL(llvmo,_sym_WeakAnyLinkage,2109,LlvmoPkg,"WeakAnyLinkage",true);
DO_SYMBOL(llvmo,_sym_WeakODRLinkage,2110,LlvmoPkg,"WeakODRLinkage",true);
DO_SYMBOL(llvmo,_sym_AppendingLinkage,2111,LlvmoPkg,"AppendingLinkage",true);
DO_SYMBOL(llvmo,_sym_InternalLinkage,2112,LlvmoPkg,"InternalLinkage",true);
DO_SYMBOL(llvmo,_sym_PrivateLinkage,2113,LlvmoPkg,"PrivateLinkage",true);
DO_SYMBOL(llvmo,_sym_LinkerPrivateLinkage,2114,LlvmoPkg,"LinkerPrivateLinkage",true);
DO_SYMBOL(llvmo,_sym_LinkerPrivateWeakLinkage,2115,LlvmoPkg,"LinkerPrivateWeakLinkage",true);
DO_SYMBOL(llvmo,_sym_DLLImportLinkage,2116,LlvmoPkg,"DLLImportLinkage",true);
DO_SYMBOL(llvmo,_sym_DLLExportLinkage,2117,LlvmoPkg,"DLLExportLinkage",true);
DO_SYMBOL(llvmo,_sym_ExternalWeakLinkage,2118,LlvmoPkg,"ExternalWeakLinkage",true);
DO_SYMBOL(llvmo,_sym_CommonLinkage,2119,LlvmoPkg,"CommonLinkage",true);
DO_SYMBOL(llvmo,_sym_STARglobal_ThreadLocalModesSTAR,2120,LlvmoPkg,"STARglobal_ThreadLocalModesSTAR",true);
DO_SYMBOL(llvmo,_sym_NotThreadLocal,2121,LlvmoPkg,"NotThreadLocal",true);
DO_SYMBOL(llvmo,_sym_GeneralDynamicTLSModel,2122,LlvmoPkg,"GeneralDynamicTLSModel",true);
DO_SYMBOL(llvmo,_sym_LocalDynamicTLSModel,2123,LlvmoPkg,"LocalDynamicTLSModel",true);
DO_SYMBOL(llvmo,_sym_InitialExecTLSModel,2124,LlvmoPkg,"InitialExecTLSModel",true);
DO_SYMBOL(llvmo,_sym_LocalExecTLSModel,2125,LlvmoPkg,"LocalExecTLSModel",true);
DO_SYMBOL(llvmo,_sym_verifyFunction,2126,LlvmoPkg,"verifyFunction",true);
DO_SYMBOL(llvmo,_sym_STARatomic_orderingSTAR,2127,LlvmoPkg,"STARatomic_orderingSTAR",true);
DO_SYMBOL(llvmo,_sym_NotAtomic,2128,LlvmoPkg,"NotAtomic",true);
DO_SYMBOL(llvmo,_sym_Unordered,2129,LlvmoPkg,"Unordered",true);
DO_SYMBOL(llvmo,_sym_Monotonic,2130,LlvmoPkg,"Monotonic",true);
DO_SYMBOL(llvmo,_sym_Acquire,2131,LlvmoPkg,"Acquire",true);
DO_SYMBOL(llvmo,_sym_Release,2132,LlvmoPkg,"Release",true);
DO_SYMBOL(llvmo,_sym_AquireRelease,2133,LlvmoPkg,"AquireRelease",true);
DO_SYMBOL(llvmo,_sym_SequentiallyConsistent,2134,LlvmoPkg,"SequentiallyConsistent",true);
DO_SYMBOL(llvmo,_sym_STARsynchronization_scopeSTAR,2135,LlvmoPkg,"STARsynchronization_scopeSTAR",true);
DO_SYMBOL(llvmo,_sym_SingleThread,2136,LlvmoPkg,"SingleThread",true);
DO_SYMBOL(llvmo,_sym_CrossThread,2137,LlvmoPkg,"CrossThread",true);
DO_SYMBOL(llvmo,_sym_STARAtomicRMWInstBinOpSTAR,2138,LlvmoPkg,"STARAtomicRMWInstBinOpSTAR",true);
DO_SYMBOL(llvmo,_sym_Xchg,2139,LlvmoPkg,"Xchg",true);
DO_SYMBOL(llvmo,_sym_Nand,2140,LlvmoPkg,"Nand",true);
DO_SYMBOL(llvmo,_sym_Max,2141,LlvmoPkg,"Max",true);
DO_SYMBOL(llvmo,_sym_Min,2142,LlvmoPkg,"Min",true);
DO_SYMBOL(llvmo,_sym_UMax,2143,LlvmoPkg,"UMax",true);
DO_SYMBOL(llvmo,_sym_UMin,2144,LlvmoPkg,"UMin",true);
DO_SYMBOL(llvmo,_sym_Add,2145,LlvmoPkg,"Add",true);
DO_SYMBOL(llvmo,_sym_FAdd,2146,LlvmoPkg,"FAdd",true);
DO_SYMBOL(llvmo,_sym_Sub,2147,LlvmoPkg,"Sub",true);
DO_SYMBOL(llvmo,_sym_FSub,2148,LlvmoPkg,"FSub",true);
DO_SYMBOL(llvmo,_sym_Mul,2149,LlvmoPkg,"Mul",true);
DO_SYMBOL(llvmo,_sym_FMul,2150,LlvmoPkg,"FMul",true);
DO_SYMBOL(llvmo,_sym_UDiv,2151,LlvmoPkg,"UDiv",true);
DO_SYMBOL(llvmo,_sym_SDiv,2152,LlvmoPkg,"SDiv",true);
DO_SYMBOL(llvmo,_sym_FDiv,2153,LlvmoPkg,"FDiv",true);
DO_SYMBOL(llvmo,_sym_URem,2154,LlvmoPkg,"URem",true);
DO_SYMBOL(llvmo,_sym_SRem,2155,LlvmoPkg,"SRem",true);
DO_SYMBOL(llvmo,_sym_FRem,2156,LlvmoPkg,"FRem",true);
DO_SYMBOL(llvmo,_sym_Shl,2157,LlvmoPkg,"Shl",true);
DO_SYMBOL(llvmo,_sym_LShr,2158,LlvmoPkg,"LShr",true);
DO_SYMBOL(llvmo,_sym_AShr,2159,LlvmoPkg,"AShr",true);
DO_SYMBOL(llvmo,_sym_And,2160,LlvmoPkg,"And",true);
DO_SYMBOL(llvmo,_sym_Or,2161,LlvmoPkg,"Or",true);
DO_SYMBOL(llvmo,_sym_Xor,2162,LlvmoPkg,"Xor",true);
DO_SYMBOL(llvmo,_sym_STARBinaryOpsSTAR,2163,LlvmoPkg,"STARBinaryOpsSTAR",true);
DO_SYMBOL(llvmo,_sym_Trunc,2164,LlvmoPkg,"Trunc",true);
DO_SYMBOL(llvmo,_sym_ZExt,2165,LlvmoPkg,"ZExt",true);
DO_SYMBOL(llvmo,_sym_SExt,2166,LlvmoPkg,"SExt",true);
DO_SYMBOL(llvmo,_sym_FPToUI,2167,LlvmoPkg,"FPToUI",true);
DO_SYMBOL(llvmo,_sym_FPToSI,2168,LlvmoPkg,"FPToSI",true);
DO_SYMBOL(llvmo,_sym_UIToFP,2169,LlvmoPkg,"UIToFP",true);
DO_SYMBOL(llvmo,_sym_SIToFP,2170,LlvmoPkg,"SIToFP",true);
DO_SYMBOL(llvmo,_sym_FPTrunc,2171,LlvmoPkg,"FPTrunc",true);
DO_SYMBOL(llvmo,_sym_FPExt,2172,LlvmoPkg,"FPExt",true);
DO_SYMBOL(llvmo,_sym_PtrToInt,2173,LlvmoPkg,"PtrToInt",true);
DO_SYMBOL(llvmo,_sym_IntToPtr,2174,LlvmoPkg,"IntToPtr",true);
DO_SYMBOL(llvmo,_sym_BitCast,2175,LlvmoPkg,"BitCast",true);
DO_SYMBOL(llvmo,_sym_STARInstructionCastOpsSTAR,2176,LlvmoPkg,"STARInstructionCastOpsSTAR",true);
DO_SYMBOL(llvmo,_sym_FCMP_FALSE,2177,LlvmoPkg,"FCMP_FALSE",true);
DO_SYMBOL(llvmo,_sym_FCMP_OEQ,2178,LlvmoPkg,"FCMP_OEQ",true);
DO_SYMBOL(llvmo,_sym_FCMP_OGT,2179,LlvmoPkg,"FCMP_OGT",true);
DO_SYMBOL(llvmo,_sym_FCMP_OGE,2180,LlvmoPkg,"FCMP_OGE",true);
DO_SYMBOL(llvmo,_sym_FCMP_OLT,2181,LlvmoPkg,"FCMP_OLT",true);
DO_SYMBOL(llvmo,_sym_FCMP_OLE,2182,LlvmoPkg,"FCMP_OLE",true);
DO_SYMBOL(llvmo,_sym_FCMP_ONE,2183,LlvmoPkg,"FCMP_ONE",true);
DO_SYMBOL(llvmo,_sym_FCMP_ORD,2184,LlvmoPkg,"FCMP_ORD",true);
DO_SYMBOL(llvmo,_sym_FCMP_UNO,2185,LlvmoPkg,"FCMP_UNO",true);
DO_SYMBOL(llvmo,_sym_FCMP_UEQ,2186,LlvmoPkg,"FCMP_UEQ",true);
DO_SYMBOL(llvmo,_sym_FCMP_UGT,2187,LlvmoPkg,"FCMP_UGT",true);
DO_SYMBOL(llvmo,_sym_FCMP_UGE,2188,LlvmoPkg,"FCMP_UGE",true);
DO_SYMBOL(llvmo,_sym_FCMP_ULT,2189,LlvmoPkg,"FCMP_ULT",true);
DO_SYMBOL(llvmo,_sym_FCMP_ULE,2190,LlvmoPkg,"FCMP_ULE",true);
DO_SYMBOL(llvmo,_sym_FCMP_UNE,2191,LlvmoPkg,"FCMP_UNE",true);
DO_SYMBOL(llvmo,_sym_FCMP_TRUE,2192,LlvmoPkg,"FCMP_TRUE",true);
DO_SYMBOL(llvmo,_sym_FIRST_FCMP_PREDICATE,2193,LlvmoPkg,"FIRST_FCMP_PREDICATE",true);
DO_SYMBOL(llvmo,_sym_FCMP_PREDICATE,2194,LlvmoPkg,"FCMP_PREDICATE",true);
DO_SYMBOL(llvmo,_sym_ICMP_EQ,2195,LlvmoPkg,"ICMP_EQ",true);
DO_SYMBOL(llvmo,_sym_ICMP_NE,2196,LlvmoPkg,"ICMP_NE",true);
DO_SYMBOL(llvmo,_sym_ICMP_UGT,2197,LlvmoPkg,"ICMP_UGT",true);
DO_SYMBOL(llvmo,_sym_ICMP_UGE,2198,LlvmoPkg,"ICMP_UGE",true);
DO_SYMBOL(llvmo,_sym_ICMP_ULT,2199,LlvmoPkg,"ICMP_ULT",true);
DO_SYMBOL(llvmo,_sym_ICMP_ULE,2200,LlvmoPkg,"ICMP_ULE",true);
DO_SYMBOL(llvmo,_sym_ICMP_SGT,2201,LlvmoPkg,"ICMP_SGT",true);
DO_SYMBOL(llvmo,_sym_ICMP_SGE,2202,LlvmoPkg,"ICMP_SGE",true);
DO_SYMBOL(llvmo,_sym_ICMP_SLT,2203,LlvmoPkg,"ICMP_SLT",true);
DO_SYMBOL(llvmo,_sym_ICMP_SLE,2204,LlvmoPkg,"ICMP_SLE",true);
DO_SYMBOL(llvmo,_sym_STARCmpInstPredicateSTAR,2205,LlvmoPkg,"STARCmpInstPredicateSTAR",true);
DO_SYMBOL(llvmo,_sym_valid,2206,LlvmoPkg,"valid",true);
DO_SYMBOL(llvmo,_sym_makeStringGlobal,2207,LlvmoPkg,"makeStringGlobal",true);
DO_SYMBOL(llvmo,_sym_valuep,2208,LlvmoPkg,"valuep",true);
DO_SYMBOL(llvmo,_sym_parseBitcodeFile,2209,LlvmoPkg,"parseBitcodeFile",true);
DO_SYMBOL(llvmo,_sym_writeBitcodeToFile,2210,LlvmoPkg,"writeBitcodeToFile",true);
DO_SYMBOL(llvmo,_sym_writeIrToFile,2211,LlvmoPkg,"writeIrToFile",true);
DO_SYMBOL(llvmo,_sym_llvm_value_p,2212,LlvmoPkg,"llvm_value_p",true);
DO_SYMBOL(llvmo,_sym_STARmostRecentLlvmFinalizationTimeSTAR,2213,LlvmoPkg,"STARmostRecentLlvmFinalizationTimeSTAR",true);
DO_SYMBOL(llvmo,_sym_STARaccumulatedLlvmFinalizationTimeSTAR,2214,LlvmoPkg,"STARaccumulatedLlvmFinalizationTimeSTAR",true);
DO_SYMBOL(llvmo,_sym_STARnumberOfLlvmFinalizationsSTAR,2215,LlvmoPkg,"STARnumberOfLlvmFinalizationsSTAR",true);
DO_SYMBOL(llvmo,_sym_STARrunTimeExecutionEngineSTAR,2216,LlvmoPkg,"STARrunTimeExecutionEngineSTAR",true);
DO_SYMBOL(llvmo,_sym_getOrCreateExternalGlobal,2217,LlvmoPkg,"getOrCreateExternalGlobal",true);
DO_SYMBOL(llvmo,_sym_disassembleSTAR,2218,LlvmoPkg,"disassembleSTAR",true);
DO_SYMBOL(llvmo,_sym_throwIfMismatchedStructureSizes,2219,LlvmoPkg,"throwIfMismatchedStructureSizes",true);
DO_SYMBOL(llvmo,_sym__PLUS_ClaspMainFunctionName_PLUS_,2220,LlvmoPkg,"_PLUS_ClaspMainFunctionName_PLUS_",true);
DO_SYMBOL(llvmo,_sym__PLUS_globalBootFunctionsName_PLUS_,2221,LlvmoPkg,"_PLUS_globalBootFunctionsName_PLUS_",true);
DO_SYMBOL(llvmo,_sym__PLUS_globalBootFunctionsNameSize_PLUS_,2222,LlvmoPkg,"_PLUS_globalBootFunctionsNameSize_PLUS_",true);
DO_SYMBOL(llvmo,_sym_LLVMContext_O,2223,LlvmoPkg,"llvm-context",true);
DO_SYMBOL(llvmo,_sym_Linker_O,2224,LlvmoPkg,"Linker",true);
DO_SYMBOL(llvmo,_sym_Pass_O,2225,LlvmoPkg,"Pass",true);
DO_SYMBOL(llvmo,_sym_AttributeSet_O,2226,LlvmoPkg,"AttributeSet",true);
DO_SYMBOL(llvmo,_sym_Triple_O,2227,LlvmoPkg,"Triple",true);
DO_SYMBOL(llvmo,_sym_TargetOptions_O,2228,LlvmoPkg,"TargetOptions",true);
DO_SYMBOL(llvmo,_sym_Target_O,2229,LlvmoPkg,"Target",true);
DO_SYMBOL(llvmo,_sym_MCSubtargetInfo_O,2230,LlvmoPkg,"MCSubtargetInfo",true);
DO_SYMBOL(llvmo,_sym_TargetSubtargetInfo_O,2231,LlvmoPkg,"TargetSubtargetInfo",true);
DO_SYMBOL(llvmo,_sym_TargetMachine_O,2232,LlvmoPkg,"TargetMachine",true);
DO_SYMBOL(llvmo,_sym_LLVMTargetMachine_O,2233,LlvmoPkg,"LLVMTargetMachine",true);
DO_SYMBOL(llvmo,_sym_FunctionPass_O,2234,LlvmoPkg,"FunctionPass",true);
DO_SYMBOL(llvmo,_sym_ModulePass_O,2235,LlvmoPkg,"ModulePass",true);
DO_SYMBOL(llvmo,_sym_ImmutablePass_O,2236,LlvmoPkg,"ImmutablePass",true);
DO_SYMBOL(llvmo,_sym_PassManagerBase_O,2237,LlvmoPkg,"PassManagerBase",true);
DO_SYMBOL(llvmo,_sym_Value_O,2238,LlvmoPkg,"value",true);
DO_SYMBOL(llvmo,_sym_Metadata_O,2239,LlvmoPkg,"metadata",true);
DO_SYMBOL(llvmo,_sym_User_O,2240,LlvmoPkg,"user",true);
DO_SYMBOL(llvmo,_sym_Attribute_O,2241,LlvmoPkg,"Attribute",true);
DO_SYMBOL(llvmo,_sym_DataLayout_O,2242,LlvmoPkg,"DataLayout",true);
DO_SYMBOL(llvmo,_sym_Constant_O,2243,LlvmoPkg,"constant",true);
DO_SYMBOL(llvmo,_sym_ConstantArray_O,2244,LlvmoPkg,"constant-array",true);
DO_SYMBOL(llvmo,_sym_BlockAddress_O,2245,LlvmoPkg,"BlockAddress",true);
DO_SYMBOL(llvmo,_sym_ConstantDataSequential_O,2246,LlvmoPkg,"ConstantDataSequential",true);
DO_SYMBOL(llvmo,_sym_ConstantDataArray_O,2247,LlvmoPkg,"constant-data-array",true);
DO_SYMBOL(llvmo,_sym_ConstantExpr_O,2248,LlvmoPkg,"ConstantExpr",true);
DO_SYMBOL(llvmo,_sym_GlobalValue_O,2249,LlvmoPkg,"global-value",true);
DO_SYMBOL(llvmo,_sym_GlobalVariable_O,2250,LlvmoPkg,"GlobalVariable",true);
DO_SYMBOL(llvmo,_sym_ExecutionEngine_O,2251,LlvmoPkg,"EXECUTION-ENGINE",true);
DO_SYMBOL(llvmo,_sym_Module_O,2252,LlvmoPkg,"module",true);
DO_SYMBOL(llvmo,_sym_DataLayoutPass_O,2253,LlvmoPkg,"DataLayoutPass",true);
DO_SYMBOL(llvmo,_sym_TargetLibraryInfo_O,2254,LlvmoPkg,"TargetLibraryInfo",true);
DO_SYMBOL(llvmo,_sym_FunctionPassManager_O,2255,LlvmoPkg,"FUNCTION-PASS-MANAGER",true);
DO_SYMBOL(llvmo,_sym_PassManager_O,2256,LlvmoPkg,"PASS-MANAGER",true);
DO_SYMBOL(llvmo,_sym_EngineBuilder_O,2257,LlvmoPkg,"ENGINEBUILDER",true);
DO_SYMBOL(llvmo,_sym_PassManagerBuilder_O,2258,LlvmoPkg,"PASS-MANAGER-BUILDER",true);
DO_SYMBOL(llvmo,_sym_APFloat_O,2259,LlvmoPkg,"APFLOAT",true);
DO_SYMBOL(llvmo,_sym_APInt_O,2260,LlvmoPkg,"APINT",true);
DO_SYMBOL(llvmo,_sym_IRBuilderBase_O,2261,LlvmoPkg,"IRBuilderBase",true);
DO_SYMBOL(llvmo,_sym_IRBuilder_O,2262,LlvmoPkg,"IRBUILDER",true);
DO_SYMBOL(llvmo,_sym_Instruction_O,2263,LlvmoPkg,"Instruction",true);
DO_SYMBOL(llvmo,_sym_StoreInst_O,2264,LlvmoPkg,"StoreInst",true);
DO_SYMBOL(llvmo,_sym_FenceInst_O,2265,LlvmoPkg,"FenceInst",true);
DO_SYMBOL(llvmo,_sym_AtomicCmpXchgInst_O,2266,LlvmoPkg,"AtomicCmpXchgInst",true);
DO_SYMBOL(llvmo,_sym_AtomicRMWInst_O,2267,LlvmoPkg,"AtomicRMWInst",true);
DO_SYMBOL(llvmo,_sym_PHINode_O,2268,LlvmoPkg,"PHINode",true);
DO_SYMBOL(llvmo,_sym_CallInst_O,2269,LlvmoPkg,"CallInst",true);
DO_SYMBOL(llvmo,_sym_LandingPadInst_O,2270,LlvmoPkg,"LandingPadInst",true);
DO_SYMBOL(llvmo,_sym_UnaryInstruction_O,2271,LlvmoPkg,"UnaryInstruction",true);
DO_SYMBOL(llvmo,_sym_AllocaInst_O,2272,LlvmoPkg,"AllocaInst",true);
DO_SYMBOL(llvmo,_sym_VAArgInst_O,2273,LlvmoPkg,"VAArgInst",true);
DO_SYMBOL(llvmo,_sym_LoadInst_O,2274,LlvmoPkg,"LoadInst",true);
DO_SYMBOL(llvmo,_sym_TerminatorInst_O,2275,LlvmoPkg,"TerminatorInst",true);
DO_SYMBOL(llvmo,_sym_BranchInst_O,2276,LlvmoPkg,"BranchInst",true);
DO_SYMBOL(llvmo,_sym_SwitchInst_O,2277,LlvmoPkg,"SwitchInst",true);
DO_SYMBOL(llvmo,_sym_IndirectBrInst_O,2278,LlvmoPkg,"IndirectBrInst",true);
DO_SYMBOL(llvmo,_sym_InvokeInst_O,2279,LlvmoPkg,"InvokeInst",true);
DO_SYMBOL(llvmo,_sym_ResumeInst_O,2280,LlvmoPkg,"ResumeInst",true);
DO_SYMBOL(llvmo,_sym_UnreachableInst_O,2281,LlvmoPkg,"UnreachableInst",true);
DO_SYMBOL(llvmo,_sym_ReturnInst_O,2282,LlvmoPkg,"ReturnInst",true);
DO_SYMBOL(llvmo,_sym_ConstantFP_O,2283,LlvmoPkg,"ConstantFP",true);
DO_SYMBOL(llvmo,_sym_ConstantInt_O,2284,LlvmoPkg,"ConstantInt",true);
DO_SYMBOL(llvmo,_sym_ConstantStruct_O,2285,LlvmoPkg,"ConstantStruct",true);
DO_SYMBOL(llvmo,_sym_UndefValue_O,2286,LlvmoPkg,"UndefValue",true);
DO_SYMBOL(llvmo,_sym_ConstantPointerNull_O,2287,LlvmoPkg,"ConstantPointerNull",true);
DO_SYMBOL(llvmo,_sym_MDNode_O,2288,LlvmoPkg,"MDNode",true);
DO_SYMBOL(llvmo,_sym_MDString_O,2289,LlvmoPkg,"MDString",true);
DO_SYMBOL(llvmo,_sym_ValueAsMetadata_O,2290,LlvmoPkg,"ValueAsMetadata",true);
DO_SYMBOL(llvmo,_sym_NamedMDNode_O,2291,LlvmoPkg,"NamedMDNode",true);
DO_SYMBOL(llvmo,_sym_Function_O,2292,LlvmoPkg,"FUNCTION",true);
DO_SYMBOL(llvmo,_sym_BasicBlock_O,2293,LlvmoPkg,"BasicBlock",true);
DO_SYMBOL(llvmo,_sym_Argument_O,2294,LlvmoPkg,"Argument",true);
DO_SYMBOL(llvmo,_sym_Type_O,2295,LlvmoPkg,"TYPE",true);
DO_SYMBOL(llvmo,_sym_FunctionType_O,2296,LlvmoPkg,"FUNCTION-TYPE",true);
DO_SYMBOL(llvmo,_sym_IntegerType_O,2297,LlvmoPkg,"INTEGER-TYPE",true);
DO_SYMBOL(llvmo,_sym_CompositeType_O,2298,LlvmoPkg,"CompositeType",true);
DO_SYMBOL(llvmo,_sym_StructType_O,2299,LlvmoPkg,"StructType",true);
DO_SYMBOL(llvmo,_sym_SequentialType_O,2300,LlvmoPkg,"SequentialType",true);
DO_SYMBOL(llvmo,_sym_PointerType_O,2301,LlvmoPkg,"PointerType",true);
DO_SYMBOL(llvmo,_sym_ArrayType_O,2302,LlvmoPkg,"ArrayType",true);
DO_SYMBOL(llvmo,_sym_VectorType_O,2303,LlvmoPkg,"VectorType",true);
DO_SYMBOL(llvmo,_sym_DebugInfo_O,2304,LlvmoPkg,"DebugInfo",true);
DO_SYMBOL(llvmo,_sym_DIDescriptor_O,2305,LlvmoPkg,"DIDescriptor",true);
DO_SYMBOL(llvmo,_sym_DIScope_O,2306,LlvmoPkg,"discope",true);
DO_SYMBOL(llvmo,_sym_DIArray_O,2307,LlvmoPkg,"diarray",true);
DO_SYMBOL(llvmo,_sym_DITypeArray_O,2308,LlvmoPkg,"ditypearray",true);
DO_SYMBOL(llvmo,_sym_DIFile_O,2309,LlvmoPkg,"difile",true);
DO_SYMBOL(llvmo,_sym_DISubprogram_O,2310,LlvmoPkg,"DISubprogram",true);
DO_SYMBOL(llvmo,_sym_DIType_O,2311,LlvmoPkg,"DIType",true);
DO_SYMBOL(llvmo,_sym_DIDerivedType_O,2312,LlvmoPkg,"DIDerivedType",true);
DO_SYMBOL(llvmo,_sym_DIBasicType_O,2313,LlvmoPkg,"DIBasicType",true);
DO_SYMBOL(llvmo,_sym_DICompositeType_O,2314,LlvmoPkg,"DICompositeType",true);
DO_SYMBOL(llvmo,_sym_DISubroutineType_O,2315,LlvmoPkg,"DISubroutineType",true);
DO_SYMBOL(llvmo,_sym_DILexicalBlock_O,2316,LlvmoPkg,"DILexicalBlock",true);
DO_SYMBOL(llvmo,_sym_DICompileUnit_O,2317,LlvmoPkg,"DICompileUnit",true);
DO_SYMBOL(llvmo,_sym_DIBuilder_O,2318,LlvmoPkg,"DIBuilder",true);
DO_SYMBOL(llvmo,_sym_DebugLoc_O,2319,LlvmoPkg,"DebugLoc",true);
DO_SYMBOL(llvmo,_sym_InsertPoint_O,2320,LlvmoPkg,"InsertPoint",true);
#endif // LlvmoPkg_SYMBOLS
#if defined(CffiPkg_SYMBOLS)
DO_SYMBOL(cffi,_sym_char,2321,CffiPkg,"char",true);
DO_SYMBOL(cffi,_sym_unsigned_char,2322,CffiPkg,"unsigned_char",true);
DO_SYMBOL(cffi,_sym_short,2323,CffiPkg,"short",true);
DO_SYMBOL(cffi,_sym_unsigned_short,2324,CffiPkg,"unsigned_short",true);
DO_SYMBOL(cffi,_sym_int,2325,CffiPkg,"int",true);
DO_SYMBOL(cffi,_sym_unsigned_int,2326,CffiPkg,"unsigned_int",true);
DO_SYMBOL(cffi,_sym_long,2327,CffiPkg,"long",true);
DO_SYMBOL(cffi,_sym_unsigned_long,2328,CffiPkg,"unsigned_long",true);
DO_SYMBOL(cffi,_sym_long_long,2329,CffiPkg,"long_long",true);
DO_SYMBOL(cffi,_sym_unsigned_long_long,2330,CffiPkg,"unsigned_long_long",true);
DO_SYMBOL(cffi,_sym_int8,2331,CffiPkg,"int8",true);
DO_SYMBOL(cffi,_sym_uint8,2332,CffiPkg,"uint8",true);
DO_SYMBOL(cffi,_sym_int16,2333,CffiPkg,"int16",true);
DO_SYMBOL(cffi,_sym_uint16,2334,CffiPkg,"uint16",true);
DO_SYMBOL(cffi,_sym_int32,2335,CffiPkg,"int32",true);
DO_SYMBOL(cffi,_sym_uint32,2336,CffiPkg,"uint32",true);
DO_SYMBOL(cffi,_sym_int64,2337,CffiPkg,"int64",true);
DO_SYMBOL(cffi,_sym_uint64,2338,CffiPkg,"uint64",true);
DO_SYMBOL(cffi,_sym_size,2339,CffiPkg,"size",true);
DO_SYMBOL(cffi,_sym_ssize,2340,CffiPkg,"ssize",true);
DO_SYMBOL(cffi,_sym_ptrdiff,2341,CffiPkg,"ptrdiff",true);
DO_SYMBOL(cffi,_sym_time,2342,CffiPkg,"time",true);
DO_SYMBOL(cffi,_sym_float,2343,CffiPkg,"float",true);
DO_SYMBOL(cffi,_sym_double,2344,CffiPkg,"double",true);
DO_SYMBOL(cffi,_sym_pointer,2345,CffiPkg,"pointer",true);
DO_SYMBOL(cffi,_sym_void,2346,CffiPkg,"void",true);
DO_SYMBOL(cffi,_sym_PERCENTmem_ref,2347,CffiPkg,"PERCENTmem_ref",true);
DO_SYMBOL(cffi,_sym_PERCENTsetf_mem_ref,2348,CffiPkg,"PERCENTsetf_mem_ref",true);
DO_SYMBOL(cffi,_sym_PERCENTforeign_type_alignment,2349,CffiPkg,"PERCENTforeign_type_alignment",true);
DO_SYMBOL(cffi,_sym_PERCENTforeign_type_size,2350,CffiPkg,"PERCENTforeign_type_size",true);
DO_SYMBOL(cffi,_sym_foreign_alloc,2351,CffiPkg,"foreign_alloc",true);
DO_SYMBOL(cffi,_sym_foreign_symbol_pointer,2352,CffiPkg,"foreign_symbol_pointer",true);
DO_SYMBOL(cffi,_sym_PERCENTload_foreign_library,2353,CffiPkg,"PERCENTload_foreign_library",true);
DO_SYMBOL(cffi,_sym_Pointer_O,2354,CffiPkg,"Pointer",true);
#endif // CffiPkg_SYMBOLS
#if defined(AstToolingPkg_SYMBOLS)
DO_SYMBOL(asttooling,_sym_STARclangTemplateSpecializationKindSTAR,2355,AstToolingPkg,"STARclangTemplateSpecializationKindSTAR",true);
DO_SYMBOL(asttooling,_sym_STARclangTemplateArgumentArgKindSTAR,2356,AstToolingPkg,"STARclangTemplateArgumentArgKindSTAR",true);
DO_SYMBOL(asttooling,_sym_ArgumentsAdjusterAdjust,2357,AstToolingPkg,"ArgumentsAdjusterAdjust",true);
DO_SYMBOL(asttooling,_sym_bind,2358,AstToolingPkg,"bind",true);
DO_SYMBOL(asttooling,_sym_VisitStmt,2359,AstToolingPkg,"VisitStmt",true);
DO_SYMBOL(asttooling,_sym_VisitDecl,2360,AstToolingPkg,"VisitDecl",true);
DO_SYMBOL(asttooling,_sym_VisitType,2361,AstToolingPkg,"VisitType",true);
DO_SYMBOL(asttooling,_sym_HandleTranslationUnit,2362,AstToolingPkg,"HandleTranslationUnit",true);
DO_SYMBOL(asttooling,_sym_CreateASTConsumer,2363,AstToolingPkg,"CreateASTConsumer",true);
DO_SYMBOL(asttooling,_sym_create,2364,AstToolingPkg,"create",true);
DO_SYMBOL(asttooling,_sym_run,2365,AstToolingPkg,"run",true);
DO_SYMBOL(asttooling,_sym_onStartOfTranslationUnit,2366,AstToolingPkg,"onStartOfTranslationUnit",true);
DO_SYMBOL(asttooling,_sym_onEndOfTranslationUnit,2367,AstToolingPkg,"onEndOfTranslationUnit",true);
DO_SYMBOL(asttooling,_sym_AstVisitor_O,2368,AstToolingPkg,"AstVisitor",true);
#endif // AstToolingPkg_SYMBOLS
#if defined(ServeEventPkg_SYMBOLS)
DO_SYMBOL(serveEvent,_sym__PLUS_EINTR_PLUS_,2369,ServeEventPkg,"_PLUS_EINTR_PLUS_",true);
DO_SYMBOL(serveEvent,_sym_ll_fd_zero,2370,ServeEventPkg,"ll_fd_zero",true);
DO_SYMBOL(serveEvent,_sym_ll_fd_set,2371,ServeEventPkg,"ll_fd_set",true);
DO_SYMBOL(serveEvent,_sym_ll_fd_isset,2372,ServeEventPkg,"ll_fd_isset",true);
DO_SYMBOL(serveEvent,_sym_ll_fdset_size,2373,ServeEventPkg,"ll_fdset_size",true);
DO_SYMBOL(serveEvent,_sym_ll_serveEventNoTimeout,2374,ServeEventPkg,"ll_serveEventNoTimeout",true);
DO_SYMBOL(serveEvent,_sym_ll_serveEventWithTimeout,2375,ServeEventPkg,"ll_serveEventWithTimeout",true);
#endif // ServeEventPkg_SYMBOLS
#if defined(SocketsPkg_SYMBOLS)
DO_SYMBOL(sockets,_sym__PLUS_af_inet_PLUS_,2376,SocketsPkg,"_PLUS_af_inet_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_af_local_PLUS_,2377,SocketsPkg,"_PLUS_af_local_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_sock_dgram_PLUS_,2378,SocketsPkg,"_PLUS_sock_dgram_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_sock_stream_PLUS_,2379,SocketsPkg,"_PLUS_sock_stream_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_clasp_stream_mode_input_PLUS_,2380,SocketsPkg,"_PLUS_clasp_stream_mode_input_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_clasp_stream_mode_output_PLUS_,2381,SocketsPkg,"_PLUS_clasp_stream_mode_output_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_clasp_stream_mode_io_PLUS_,2382,SocketsPkg,"_PLUS_clasp_stream_mode_io_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EADDRINUSE_PLUS_,2383,SocketsPkg,"_PLUS_EADDRINUSE_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EAGAIN_PLUS_,2384,SocketsPkg,"_PLUS_EAGAIN_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EBADF_PLUS_,2385,SocketsPkg,"_PLUS_EBADF_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ECONNREFUSED_PLUS_,2386,SocketsPkg,"_PLUS_ECONNREFUSED_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ETIMEDOUT_PLUS_,2387,SocketsPkg,"_PLUS_ETIMEDOUT_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EINTR_PLUS_,2388,SocketsPkg,"_PLUS_EINTR_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EINVAL_PLUS_,2389,SocketsPkg,"_PLUS_EINVAL_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ENOBUFS_PLUS_,2390,SocketsPkg,"_PLUS_ENOBUFS_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ENOMEM_PLUS_,2391,SocketsPkg,"_PLUS_ENOMEM_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EOPNOTSUPP_PLUS_,2392,SocketsPkg,"_PLUS_EOPNOTSUPP_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EPERM_PLUS_,2393,SocketsPkg,"_PLUS_EPERM_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_EPROTONOSUPPORT_PLUS_,2394,SocketsPkg,"_PLUS_EPROTONOSUPPORT_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ESOCKTNOSUPPORT_PLUS_,2395,SocketsPkg,"_PLUS_ESOCKTNOSUPPORT_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_ENETUNREACH_PLUS_,2396,SocketsPkg,"_PLUS_ENETUNREACH_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_NETDB_INTERNAL_PLUS_,2397,SocketsPkg,"_PLUS_NETDB_INTERNAL_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_NETDB_SUCCESS_PLUS_,2398,SocketsPkg,"_PLUS_NETDB_SUCCESS_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_HOST_NOT_FOUND_PLUS_,2399,SocketsPkg,"_PLUS_HOST_NOT_FOUND_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_TRY_AGAIN_PLUS_,2400,SocketsPkg,"_PLUS_TRY_AGAIN_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_NO_RECOVERY_PLUS_,2401,SocketsPkg,"_PLUS_NO_RECOVERY_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_NO_ADDRESS_PLUS_,2402,SocketsPkg,"_PLUS_NO_ADDRESS_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SOL_SOCKET_PLUS_,2403,SocketsPkg,"_PLUS_SOL_SOCKET_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_IPPROTO_TCP_PLUS_,2404,SocketsPkg,"_PLUS_IPPROTO_TCP_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_TYPE_PLUS_,2405,SocketsPkg,"_PLUS_SO_TYPE_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_RCVBUF_PLUS_,2406,SocketsPkg,"_PLUS_SO_RCVBUF_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_RCVTIMEO_PLUS_,2407,SocketsPkg,"_PLUS_SO_RCVTIMEO_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_SNDTIMEO_PLUS_,2408,SocketsPkg,"_PLUS_SO_SNDTIMEO_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_REUSEADDR_PLUS_,2409,SocketsPkg,"_PLUS_SO_REUSEADDR_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_KEEPALIVE_PLUS_,2410,SocketsPkg,"_PLUS_SO_KEEPALIVE_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_DONTROUTE_PLUS_,2411,SocketsPkg,"_PLUS_SO_DONTROUTE_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_LINGER_PLUS_,2412,SocketsPkg,"_PLUS_SO_LINGER_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_SO_REUSEPORT_PLUS_,2413,SocketsPkg,"_PLUS_SO_REUSEPORT_PLUS_",true);
DO_SYMBOL(sockets,_sym__PLUS_TCP_NODELAY_PLUS_,2414,SocketsPkg,"_PLUS_TCP_NODELAY_PLUS_",true);
DO_SYMBOL(sockets,_sym_ff_socket,2415,SocketsPkg,"ff_socket",true);
DO_SYMBOL(sockets,_sym_ff_listen,2416,SocketsPkg,"ff_listen",true);
DO_SYMBOL(sockets,_sym_ff_close,2417,SocketsPkg,"ff_close",true);
DO_SYMBOL(sockets,_sym_ll_get_name_service_h_errno,2418,SocketsPkg,"ll_get_name_service_h_errno",true);
DO_SYMBOL(sockets,_sym_ll_socket_errno,2419,SocketsPkg,"ll_socket_errno",true);
DO_SYMBOL(sockets,_sym_ll_getNameServiceErrorMessage,2420,SocketsPkg,"ll_getNameServiceErrorMessage",true);
DO_SYMBOL(sockets,_sym_ll_getHostByName,2421,SocketsPkg,"ll_getHostByName",true);
DO_SYMBOL(sockets,_sym_ll_getHostByAddress,2422,SocketsPkg,"ll_getHostByAddress",true);
DO_SYMBOL(sockets,_sym_ll_socketReceive,2423,SocketsPkg,"ll_socketReceive",true);
DO_SYMBOL(sockets,_sym_ll_getProtocolByName,2424,SocketsPkg,"ll_getProtocolByName",true);
DO_SYMBOL(sockets,_sym_ll_socketBind_inetSocket,2425,SocketsPkg,"ll_socketBind_inetSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketAccept_inetSocket,2426,SocketsPkg,"ll_socketAccept_inetSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketConnect_inetSocket,2427,SocketsPkg,"ll_socketConnect_inetSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketPeername_inetSocket,2428,SocketsPkg,"ll_socketPeername_inetSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketName,2429,SocketsPkg,"ll_socketName",true);
DO_SYMBOL(sockets,_sym_ll_socketSendAddress,2430,SocketsPkg,"ll_socketSendAddress",true);
DO_SYMBOL(sockets,_sym_socketSendNoAddress,2431,SocketsPkg,"socketSendNoAddress",true);
DO_SYMBOL(sockets,_sym_ll_socketBind_localSocket,2432,SocketsPkg,"ll_socketBind_localSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketAccept_localSocket,2433,SocketsPkg,"ll_socketAccept_localSocket",true);
DO_SYMBOL(sockets,_sym_ll_socketConnect_localSocket,2434,SocketsPkg,"ll_socketConnect_localSocket",true);
DO_SYMBOL(sockets,_sym_socketPeername_localSocket,2435,SocketsPkg,"socketPeername_localSocket",true);
DO_SYMBOL(sockets,_sym_ll_nonBlockingMode,2436,SocketsPkg,"ll_nonBlockingMode",true);
DO_SYMBOL(sockets,_sym_ll_setfNonBlockingMode,2437,SocketsPkg,"ll_setfNonBlockingMode",true);
DO_SYMBOL(sockets,_sym_ll_dup,2438,SocketsPkg,"ll_dup",true);
DO_SYMBOL(sockets,_sym_ll_makeStreamFromFd,2439,SocketsPkg,"ll_makeStreamFromFd",true);
DO_SYMBOL(sockets,_sym_ll_autoCloseTwoWayStream,2440,SocketsPkg,"ll_autoCloseTwoWayStream",true);
DO_SYMBOL(sockets,_sym_ll_strerror,2441,SocketsPkg,"ll_strerror",true);
DO_SYMBOL(sockets,_sym_ll_strerror_errno,2442,SocketsPkg,"ll_strerror_errno",true);
DO_SYMBOL(sockets,_sym_ll_getSockoptInt,2443,SocketsPkg,"ll_getSockoptInt",true);
DO_SYMBOL(sockets,_sym_ll_getSockoptBool,2444,SocketsPkg,"ll_getSockoptBool",true);
DO_SYMBOL(sockets,_sym_ll_getSockoptTimeval,2445,SocketsPkg,"ll_getSockoptTimeval",true);
DO_SYMBOL(sockets,_sym_ll_getSockoptLinger,2446,SocketsPkg,"ll_getSockoptLinger",true);
DO_SYMBOL(sockets,_sym_ll_setSockoptInt,2447,SocketsPkg,"ll_setSockoptInt",true);
DO_SYMBOL(sockets,_sym_ll_setSockoptBool,2448,SocketsPkg,"ll_setSockoptBool",true);
DO_SYMBOL(sockets,_sym_ll_setSockoptTimeval,2449,SocketsPkg,"ll_setSockoptTimeval",true);
DO_SYMBOL(sockets,_sym_ll_setSockoptLinger,2450,SocketsPkg,"ll_setSockoptLinger",true);
#endif // SocketsPkg_SYMBOLS
#if defined(GcToolsPkg_SYMBOLS)
DO_SYMBOL(gctools,_sym_STARallocPatternStackSTAR,2451,GcToolsPkg,"STARallocPatternStackSTAR",true);
DO_SYMBOL(gctools,_sym_ramp,2452,GcToolsPkg,"ramp",true);
DO_SYMBOL(gctools,_sym_rampCollectAll,2453,GcToolsPkg,"rampCollectAll",true);
DO_SYMBOL(gctools,_sym_garbageCollect,2454,GcToolsPkg,"garbageCollect",true);
DO_SYMBOL(gctools,_sym_maxBootstrapKinds,2455,GcToolsPkg,"maxBootstrapKinds",true);
DO_SYMBOL(gctools,_sym_bootstrapKindsP,2456,GcToolsPkg,"bootstrapKindsP",true);
DO_SYMBOL(gctools,_sym_bootstrapKindSymbols,2457,GcToolsPkg,"bootstrapKindSymbols",true);
#endif // GcToolsPkg_SYMBOLS
#if defined(CompPkg_SYMBOLS)
DO_SYMBOL(comp,_sym_compileInEnv,2458,CompPkg,"compileInEnv",true);
DO_SYMBOL(comp,_sym_compileFormAndEvalWithEnv,2459,CompPkg,"compileFormAndEvalWithEnv",true);
DO_SYMBOL(comp,_sym_STARimplicit_compile_hookSTAR,2460,CompPkg,"STARimplicit_compile_hookSTAR",true);
DO_SYMBOL(comp,_sym_implicit_compile_hook_default,2461,CompPkg,"implicit_compile_hook_default",true);
DO_SYMBOL(comp,_sym_STARall_functions_for_one_compileSTAR,2462,CompPkg,"STARall_functions_for_one_compileSTAR",true);
DO_SYMBOL(comp,_sym_aSingleCompilerSymbol,2463,CompPkg,"aSingleCompilerSymbol",true);
DO_SYMBOL(comp,_sym_STARlowLevelTraceSTAR,2464,CompPkg,"STARlowLevelTraceSTAR",true);
DO_SYMBOL(comp,_sym_STARlowLevelTracePrintSTAR,2465,CompPkg,"STARlowLevelTracePrintSTAR",true);
#endif // CompPkg_SYMBOLS
#if defined(CleavirEnvPkg_SYMBOLS)
DO_SYMBOL(cleavirEnv,_sym_macroFunction,2466,CleavirEnvPkg,"macroFunction",true);
DO_SYMBOL(cleavirEnv,_sym_symbolMacroExpansion,2467,CleavirEnvPkg,"symbolMacroExpansion",true);
#endif // CleavirEnvPkg_SYMBOLS
#if defined(CleavirPrimopsPkg_SYMBOLS)
DO_SYMBOL(cleavirPrimops,_sym_callWithVariableBound,2468,CleavirPrimopsPkg,"callWithVariableBound",true);
#endif // CleavirPrimopsPkg_SYMBOLS
#if defined(GrayPkg_SYMBOLS)
DO_SYMBOL(gray,_sym_aSingleGraySymbol,2469,GrayPkg,"aSingleGraySymbol",true);
DO_SYMBOL(gray,_sym_open_stream_p,2470,GrayPkg,"open_stream_p",true);
DO_SYMBOL(gray,_sym_stream_read_byte,2471,GrayPkg,"stream_read_byte",true);
DO_SYMBOL(gray,_sym_stream_write_byte,2472,GrayPkg,"stream_write_byte",true);
DO_SYMBOL(gray,_sym_stream_read_char,2473,GrayPkg,"stream_read_char",true);
DO_SYMBOL(gray,_sym_stream_read_char_no_hang,2474,GrayPkg,"stream_read_char_no_hang",true);
DO_SYMBOL(gray,_sym_stream_write_char,2475,GrayPkg,"stream_write_char",true);
DO_SYMBOL(gray,_sym_stream_write_string,2476,GrayPkg,"stream_write_string",true);
DO_SYMBOL(gray,_sym_stream_terpri,2477,GrayPkg,"stream_terpri",true);
DO_SYMBOL(gray,_sym_stream_fresh_line,2478,GrayPkg,"stream_fresh_line",true);
DO_SYMBOL(gray,_sym_stream_read_sequence,2479,GrayPkg,"stream_read_sequence",true);
DO_SYMBOL(gray,_sym_stream_write_sequence,2480,GrayPkg,"stream_write_sequence",true);
DO_SYMBOL(gray,_sym_stream_unread_char,2481,GrayPkg,"stream_unread_char",true);
DO_SYMBOL(gray,_sym_stream_peek_char,2482,GrayPkg,"stream_peek_char",true);
DO_SYMBOL(gray,_sym_stream_listen,2483,GrayPkg,"stream_listen",true);
DO_SYMBOL(gray,_sym_streamClearInput,2484,GrayPkg,"streamClearInput",true);
DO_SYMBOL(gray,_sym_stream_clear_input,2485,GrayPkg,"stream_clear_input",true);
DO_SYMBOL(gray,_sym_stream_clear_output,2486,GrayPkg,"stream_clear_output",true);
DO_SYMBOL(gray,_sym_stream_force_output,2487,GrayPkg,"stream_force_output",true);
DO_SYMBOL(gray,_sym_stream_finish_output,2488,GrayPkg,"stream_finish_output",true);
DO_SYMBOL(gray,_sym_streamp,2489,GrayPkg,"streamp",true);
DO_SYMBOL(gray,_sym_input_stream_p,2490,GrayPkg,"input_stream_p",true);
DO_SYMBOL(gray,_sym_output_stream_p,2491,GrayPkg,"output_stream_p",true);
DO_SYMBOL(gray,_sym_stream_interactive_p,2492,GrayPkg,"stream_interactive_p",true);
DO_SYMBOL(gray,_sym_stream_element_type,2493,GrayPkg,"stream_element_type",true);
DO_SYMBOL(gray,_sym_stream_file_position,2494,GrayPkg,"stream_file_position",true);
DO_SYMBOL(gray,_sym_stream_line_column,2495,GrayPkg,"stream_line_column",true);
DO_SYMBOL(gray,_sym_stream_advance_to_column,2496,GrayPkg,"stream_advance_to_column",true);
DO_SYMBOL(gray,_sym_close,2497,GrayPkg,"close",true);
#endif // GrayPkg_SYMBOLS
