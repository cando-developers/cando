#ifdef EXPOSE_FUNCTION_SIGNATURES
namespace core {
    bool cl__eq(T_sp x, T_sp y);
    bool cl__eql(T_sp x, T_sp y);
    bool cl__equal(T_sp x, T_sp y);
    bool cl__equalp(T_sp x, T_sp y);
    bool cl__endp(T_sp arg);
    bool cl__atom(T_sp obj);
    VectorDisplaced_sp core__make_vector_displaced(T_sp dim, T_sp elementType, T_sp displacedTo, size_t displacedOffset);
    int core__test_add(int x, int y);
    WeakKeyHashTable_sp core__make_weak_key_hash_table(Fixnum_sp size);
    T_mv core__weak_gethash(T_sp tkey, WeakKeyHashTable_sp ht, T_sp defaultValue);
    void core__weak_setf_gethash(T_sp key, WeakKeyHashTable_sp ht, T_sp val);
    void core__weak_remhash(WeakKeyHashTable_sp ht, T_sp key);
    void core__weak_clrhash(WeakKeyHashTable_sp ht);
    void core__weak_splat(WeakKeyHashTable_sp ht, Fixnum_sp idx);
    void core__weak_rehash(WeakKeyHashTable_sp ht, T_sp sz);
    T_mv core__compile_form_and_eval_with_env(T_sp form, T_sp env, T_sp stepping, T_sp compiler_env_p, T_sp execute);
    T_mv cl__apply(T_sp head, VaList_sp args);
    T_mv cl__eval(T_sp form);
    T_mv cl__funcall(T_sp function_desig, VaList_sp args);
    Function_sp core__coerce_to_function(T_sp arg);
    T_mv core__process_declarations(List_sp inputBody, T_sp expectDocString);
    T_sp core__extract_lambda_name_from_declares(List_sp declares, T_sp defaultValue);
    T_sp core__extract_lambda_name(List_sp lambdaExpression, T_sp defaultValue);
    T_sp core__lookup_symbol_macro(Symbol_sp sym, T_sp env);
    T_mv core__classify_let_variables_and_declares(List_sp variables, List_sp declaredSpecials);
    int core__evaluate_depth();
    void core__evaluate_verbosity(Fixnum_sp level);
    T_mv core__eval_with_env_default(T_sp form, T_sp env);
    void core__help_booting();
    Fixnum_sp core__test_tagged_cast(Fixnum_sp pow2);
    Integer_sp core__cxx_fibn(Fixnum_sp reps, Fixnum_sp num);
    T_mv core__mangle_name(Symbol_sp sym, bool is_function);
    T_sp core__startup_image_pathname();
    T_mv core__load_bundle(T_sp pathDesig, T_sp verbose, T_sp print, T_sp external_format);
    T_mv core__dlopen(T_sp pathDesig);
    T_sp core__dlsym(T_sp ohandle, Str_sp name);
    void core__call_dl_main_function(Pointer_sp addr);
    T_mv core__dladdr(Integer_sp addr);
    T_mv core__call_with_variable_bound(Symbol_sp sym, T_sp val, T_sp thunk);
    T_mv core__funwind_protect(T_sp protected_fn, T_sp cleanup_fn);
    T_mv core__multiple_value_funcall(T_sp funcDesignator, List_sp functions);
    T_mv core__multiple_value_prog1_function(Function_sp func1, Function_sp func2);
    T_mv core__catch_function(T_sp tag, Function_sp thunk);
    void core__throw_function(T_sp tag, T_sp result_form);
    T_mv core__progv_function(List_sp symbols, List_sp values, Function_sp func);
    T_sp core__maybe_expand_generic_function_arguments(T_sp args);
    void core__clear_gfun_hash(T_sp what);
    T_sp core__instance_class_set(T_sp obj, Class_sp mc);
    Instance_sp core__copy_instance(Instance_sp obj);
    void core__clear_generic_function_dispatch_cache();
    void cl__sleep(T_sp oseconds);
    T_sp cl__lisp_implementation_type();
    T_sp cl__lisp_implementation_version();
    void core__method_cache_resize(Fixnum_sp pow);
    void core__slot_cache_resize(Fixnum_sp pow);
    void core__single_dispatch_method_cache_resize(Fixnum_sp pow);
    T_mv core__method_cache_status();
    T_mv core__slot_cache_status();
    T_mv core__single_dispatch_method_cache_status();
    T_sp core__lisp_implementation_id();
    T_sp core__create_tagged_immediate_value_or_nil(T_sp object);
    T_sp cl__software_type();
    T_sp cl__software_version();
    T_sp cl__machine_type();
    T_sp cl__machine_version();
    T_sp cl__machine_instance();
    int core__argc();
    Str_sp core__argv(int idx);
    T_sp cl__set(Symbol_sp sym, T_sp val);
    void core__dump_address_of(T_sp arg);
    int core__incomplete_next_higher_power_of_2(Fixnum_sp fn);
    Vector_sp core__all_registered_class_names();
    T_sp core__to_tagged_fixnum(int val);
    gctools::Fixnum core__from_tagged_fixnum(T_sp val);
    void core__dump_tagged_fixnum(T_sp val);
    void ext__setenv(Str_sp name, Str_sp value);
    T_mv ext__system(Str_sp cmd);
    T_mv ext__vfork_execvp(List_sp call_and_arguments);
    T_sp ext__getenv(Str_sp arg);
    T_sp ext__llvm_version();
    void core__describe_cxx_object(T_sp obj, T_sp stream);
    void core__setenv(Str_sp name, Str_sp arg, bool overwrite);
    int core__pointer(T_sp obj);
    bool core__is_true(T_sp arg);
    T_mv core__substitute();
    T_sp core__unbound();
    T_mv core__smart_pointer_details();
    T_mv cl__values(List_sp args);
    T_mv core__values_testing(List_sp args);
    T_mv cl__values_list(List_sp list);
    Symbol_mv core__function_block_name(T_sp functionName);
    T_mv core__valid_function_name_p(T_sp arg);
    void core__test_memory_error();
    T_mv core__separate_pair_list(List_sp listOfPairs);
    T_sp cl__macro_function(Symbol_sp symbol, T_sp env);
    T_mv cl__special_operator_p(T_sp sym);
    Integer_sp cl__ash(Integer_sp integer, Integer_sp count);
    void core__break(T_sp fmt, List_sp args);
    void core__gdb(T_sp msg);
    Integer_sp core__cxx_lambda_list_handler_create_bindings_calls();
    void core__trap_execution(T_sp msg);
    void core__gdb_inspect(Str_sp msg, T_sp o);
    bool cl__constantp(T_sp obj, T_sp env);
    T_mv cl__identity(T_sp arg);
    T_mv core__macroexpand_default(Function_sp macro_function, T_sp form, T_sp macro_env);
    T_mv cl__null(T_sp obj);
    Class_sp cl__class_of(T_sp obj);
    T_sp core__STARfset(T_sp functionName, Function_sp functionObject, T_sp macro);
    T_sp cl__fdefinition(T_sp functionName);
    bool cl__fboundp(T_sp functionName);
    T_mv cl__fmakunbound(T_sp functionName);
    T_mv cl__read_delimited_list(Character_sp chr, T_sp input_stream_designator, T_sp recursive_p);
    T_sp cl__read(T_sp input_stream_designator, T_sp eof_error_p, T_sp eof_value, T_sp recursive_p);
    T_sp cl__read_preserving_whitespace(T_sp input_stream_designator, T_sp eof_error_p, T_sp eof_value, T_sp recursive_p);
    T_sp cl__every(T_sp predicate, List_sp sequences);
    T_sp cl__some(T_sp predicate, List_sp sequences);
    T_sp cl__notany(T_sp predicate, List_sp sequences);
    T_sp cl__notevery(T_sp predicate, List_sp sequences);
    T_sp cl__mapcar(T_sp func_desig, List_sp lists);
    T_sp cl__mapc(T_sp top, List_sp lists);
    T_sp cl__maplist(T_sp func_desig, List_sp lists);
    T_sp cl__mapl(T_sp top, List_sp lists);
    T_mv core__mapappend(Function_sp fun, List_sp cargs);
    T_mv cl__mapcon(T_sp op, List_sp lists);
    T_mv cl__mapcan(T_sp op, List_sp lists);
    List_sp cl__append(List_sp lists);
    T_mv core__sequence_start_end(T_sp func, T_sp sequence, Fixnum_sp start, T_sp end);
    Symbol_mv cl__gensym(T_sp x);
    Symbol_mv core__type_to_symbol(T_sp x);
    T_sp cl__type_of(T_sp x);
    Integer_sp cl__sxhash(T_sp obj);
    InvocationHistoryFrameIterator_sp core__get_invocation_history_frame_search(T_sp idx, Symbol_sp direction);
    InvocationHistoryFrameIterator_sp core__get_invocation_history_frame_top();
    InvocationHistoryFrameIterator_sp core__get_invocation_history_frame(int idx);
    InvocationHistoryFrameIterator_sp core__get_invocation_history_frame_prev(int idx);
    InvocationHistoryFrameIterator_sp core__get_invocation_history_frame_next(int idx);
    void core__ihs_backtrace_no_args();
    int core__ihs_top();
    int core__ihs_prev(int idx);
    int core__ihs_next(int idx);
    T_sp core__ihs_fun(int idx);
    T_sp core__ihs_arguments(int idx);
    T_sp core__ihs_env(int idx);
    int core__ihs_bds(int idx);
    int core__ihs_current_frame();
    int core__set_ihs_current_frame(int icf);
    int core__bds_top();
    Symbol_sp core__bds_var(int idx);
    T_sp core__bds_val(int idx);
    Vector_sp core__exception_stack();
    void core__exception_stack_dump();
    void core__dynamic_binding_stack_dump(std::ostream &out);
    T_sp core__ihs_backtrace(T_sp outputDesignator, T_sp msg);
    T_sp cl__random(T_sp olimit, RandomState_sp random_state);
    void core__low_level_backtrace();
    void core__clib_backtrace(int depth);
    void core__frame_pointers();
    void core__print_current_ihs_frame_environment();
    SmallMap_sp core__make_small_map();
    SmallMultimap_sp core__make_small_multimap();
    void core__debug_hash_table(bool don);
    T_sp cl__make_hash_table(T_sp test, Fixnum_sp size, Number_sp rehash_size, Real_sp orehash_threshold, Symbol_sp weakness, T_sp debug);
    Symbol_sp core__hash_table_weakness(T_sp ht);
    T_mv cl__maphash(T_sp function_desig, T_sp thash_table);
    T_mv cl__clrhash(HashTable_sp hash_table);
    bool core__hash_table_entry_deleted_p(T_sp cons);
    int core__hash_eql(List_sp args);
    int core__hash_equal(List_sp args);
    int core__hash_equalp(List_sp args);
    bool cl__remhash(T_sp key, HashTable_sp ht);
    T_mv cl__gethash(T_sp key, T_sp hashTable, T_sp default_value);
    void core__hash_table_force_rehash(HashTable_sp ht);
    bool cl__zerop(T_sp num);
    Integer_sp core__convert_overflow_result_to_bignum(Fixnum_sp z);
    Fixnum_sp core__fixnum_number_of_bits();
    Real_sp cl__min(Real_sp min, List_sp nums);
    Real_sp cl__max(Real_sp max, List_sp nums);
    Integer_sp cl__logand(List_sp integers);
    Integer_sp cl__logior(List_sp integers);
    Integer_sp cl__logxor(List_sp integers);
    Integer_mv cl__logeqv(List_sp integers);
    T_mv cl__logandc1(Integer_sp a, Integer_sp b);
    T_mv cl__logandc2(Integer_sp a, Integer_sp b);
    T_mv cl__logorc1(Integer_sp a, Integer_sp b);
    T_mv cl__logorc2(Integer_sp a, Integer_sp b);
    T_mv cl__lognot(Integer_sp a);
    T_mv cl__lognand(Integer_sp a, Integer_sp b);
    T_mv cl__lognor(Integer_sp a, Integer_sp b);
    T_mv cl___TIMES_(List_sp numbers);
    T_mv cl___MINUS_(Number_sp num, List_sp numbers);
    T_sp cl___NE_(List_sp args);
    T_sp cl___EQ_(List_sp args);
    DoubleFloat_mv core__nan();
    Number_sp cl__sqrt(Number_sp x);
    Number_sp cl__sin(Number_sp x);
    Number_sp cl__cos(Number_sp x);
    Number_sp cl__tan(Number_sp x);
    Number_sp cl__sinh(Number_sp x);
    Number_sp cl__cosh(Number_sp x);
    Number_sp cl__tanh(Number_sp x);
    Number_sp cl__conjugate(Number_sp x);
    Number_sp cl__exp(Number_sp x);
    Number_sp cl__expt(Number_sp x, Number_sp y);
    T_sp cl__atan(Number_sp x, T_sp y);
    Number_sp cl__log(Number_sp number, T_sp base);
    Number_sp core__log1p(Number_sp arg);
    gc::Fixnum cl__integer_length(Integer_sp i);
    Integer_sp cl__get_universal_time();
    double core__asin(double x);
    double core__acos(double x);
    double core__asinh(double x);
    double core__acosh(double x);
    double core__atanh(double x);
    Integer_sp cl__gcd(List_sp nums);
    Integer_sp cl__lcm(List_sp nums);
    StrWithFillPtr_sp core__bignum_to_string(StrWithFillPtr_sp buffer, const Bignum &bn, Fixnum_sp base);
    StrWithFillPtr_sp core__integer_to_string(StrWithFillPtr_sp buffer, Integer_sp integer,
                                       Fixnum_sp base, bool radix, bool decimalp);
    Float_sp cl__float(Real_sp x, T_sp y);
    Number_sp cl__numerator(Number_sp x);
    Number_sp cl__denominator(Number_sp x);
    Real_mv cl__floor(Real_sp x, T_sp y);
    Real_mv cl__ceiling(Real_sp x, T_sp y);
    Real_mv cl__truncate(Real_sp x, T_sp y);
    Number_mv cl__round(Real_sp x, T_sp y);
    Real_sp cl__mod(Real_sp x, Real_sp y);
    Real_sp cl__rem(Real_sp x, Real_sp y);
    Number_mv cl__decode_float(Float_sp x);
    Number_sp cl__scale_float(Number_sp x, Number_sp y);
    Float_sp cl__float_sign(Float_sp x, Float_sp y, T_sp yp);
    Integer_sp cl__float_digits(Float_sp x);
    Integer_sp cl__float_precision(Float_sp x);
    Real_mv cl__integer_decode_float(Float_sp x);
    Complex_sp cl__complex(Real_sp r, Real_sp i);
    Real_sp cl__realpart(Number_sp x);
    Real_sp cl__imagpart(Number_sp x);
    T_sp core__load_source(T_sp source, bool verbose, bool print, T_sp externalFormat);
    T_sp cl__load(T_sp source, T_sp verbose, T_sp print, T_sp if_does_not_exist, T_sp external_format, T_sp search_list);
    T_sp core__write_object(T_sp obj, T_sp ostrm);
    T_sp cl__write(T_sp x, T_sp strm, T_sp array, T_sp base,
              T_sp cas, T_sp circle, T_sp escape, T_sp gensym, T_sp length,
              T_sp level, T_sp lines, T_sp miser_width, T_sp pprint_dispatch,
              T_sp pretty, T_sp radix, T_sp readably, T_sp right_margin);
    void core__print_unreadable_object_function(T_sp o, T_sp ostream, T_sp type, T_sp id, T_sp function);
    void cl__pprint(T_sp obj, T_sp stream);
    T_sp cl__princ(T_sp obj, T_sp output_stream_desig);
    T_sp cl__prin1(T_sp obj, T_sp output_stream_desig);
    T_sp cl__print(T_sp obj, T_sp output_stream_desig);
    T_mv core__source_file_info(T_sp sourceFile, T_sp sourceDebugNamestring, size_t sourceDebugOffset, bool useLineno);
    Integer_sp core__source_pos_info_filepos(SourcePosInfo_sp info);
    Fixnum_sp core__source_pos_info_lineno(SourcePosInfo_sp info);
    Fixnum_sp core__source_pos_info_column(SourcePosInfo_sp info);
    T_mv core__walk_to_find_source_info(T_sp obj);
    void core__walk_to_assign_source_pos_info(T_sp obj, SourcePosInfo_sp topInfo, T_sp stream);
    T_sp core__walk_to_find_source_pos_info(T_sp obj, T_sp defaultSpi);
    void core__dump_source_manager(T_sp dumpAll);
    SourceManager_sp core__make_source_manager();
    T_sp core__fork();
    int core__waitpid(Fixnum_sp pid, Fixnum_sp options);
    T_sp core__getpid();
    T_sp core__getppid();
    T_sp ext__chdir(Pathname_sp dir);
    Str_sp core__current_dir();
    Symbol_sp core__file_kind(T_sp filename, bool follow_links);
    T_sp core__readlink(Str_sp filename);
    Pathname_mv core__file_truename(T_sp pathname, T_sp filename, bool follow_links);
    Pathname_sp cl__truename(T_sp orig_pathname);
    T_mv cl__rename_file(T_sp oldn, T_sp newn, T_sp if_exists);
    T_sp cl__delete_file(T_sp file);
    T_sp cl__probe_file(T_sp filespec);
    Number_sp cl__file_write_date(T_sp pathspec);
    T_sp cl__file_author(T_sp file);
    Pathname_sp cl__user_homedir_pathname(T_sp host);
    T_sp core__mkstemp(Str_sp thetemplate);
    T_sp core__rmdir(T_sp directory);
    void core__chmod(T_sp file, T_sp mode);
    T_sp core__copy_file(T_sp orig, T_sp dest);
    T_sp cl__directory(T_sp mask, T_sp resolveSymlinks);
    bool core__unix_daylight_saving_time(Integer_sp unix_time);
    Ratio_sp core__unix_get_local_time_zone();
    T_sp core__mkdir(T_sp directory, T_sp mode);
    T_mv core__function_lambda_list(T_sp obj);
    gc::Nilable<SourcePosInfo_sp> core__function_source_pos_info(T_sp functionDesignator);
    void core__set_kind(Function_sp fn, Symbol_sp kind);
    T_mv cl__function_lambda_expression(Function_sp fn);
    T_sp core__function_source_code(Function_sp fn);
    T_sp cl__rassoc(T_sp item, List_sp a_list, T_sp test, T_sp test_not, T_sp key);
    T_sp cl__nth(int idx, T_sp arg);
    T_sp cl__nthcdr(int idx, T_sp arg);
    T_sp cl__copy_list(T_sp arg);
    List_sp cl__butlast(List_sp ll, Integer_sp in);
    List_sp cl__nbutlast(List_sp l, Integer_sp in);
    T_sp cl__list(T_sp objects);
    T_sp cl__listSTAR(T_sp tobjects);
    T_sp cl__last(T_sp list, int n);
    T_sp cl__nconc(List_sp lists);
    T_sp cl__revappend(List_sp list, T_sp tail);
    T_sp cl__nreconc(List_sp list, T_sp tail);
    T_mv core__classify_return_from_symbol(T_sp env, Symbol_sp sym);
    int core__environment_length(T_sp frame);
    T_sp core__environment_debug_names(T_sp frame);
    T_sp core__environment_debug_values(T_sp frame);
    T_mv core__lexical_function(T_sp name, T_sp env);
    T_mv core__lexical_macro_function(T_sp name, T_sp env);
    T_sp core__environment_activation_frame(T_sp env);
    T_sp core__environment_list(T_sp env);
    T_sp core__environment_type_list(T_sp env);
    T_sp core__runtime_environment(T_sp tenv);
    int core__environment_id(T_sp tenv);
    Str_sp core__lispify_name(Str_sp name);
    T_sp core__process_macro_lambda_list(List_sp lambda_list);
    T_mv core__process_single_dispatch_lambda_list(List_sp lambda_list);
    T_mv core__process_lambda_list(List_sp lambdaList, T_sp context);
    T_sp core__make_string_output_stream_from_string(T_sp s);
    T_sp cl__make_string_output_stream(Symbol_sp elementType);
    T_sp cl__get_output_stream_string(T_sp strm);
    T_sp cl__make_string_input_stream(Str_sp strng, Fixnum_sp istart, T_sp iend);
    T_sp cl__make_two_way_stream(T_sp istrm, T_sp ostrm);
    T_sp cl__two_way_stream_input_stream(T_sp strm);
    T_sp cl__two_way_stream_output_stream(T_sp strm);
    T_sp cl__make_broadcast_stream(List_sp ap);
    T_sp cl__make_echo_stream(T_sp strm1, T_sp strm2);
    T_sp cl__make_concatenated_stream(List_sp ap);
    T_sp cl__make_synonym_stream(T_sp tsym);
    T_sp cl__synonym_stream_symbol(T_sp strm);
    T_sp core__set_buffering_mode(T_sp stream, T_sp buffer_mode_symbol);
    T_sp core__file_stream_fd(T_sp s);
    T_sp core__do_write_sequence(T_sp seq, T_sp stream, T_sp s, T_sp e);
    T_sp cl__read_sequence(T_sp sequence, T_sp stream, T_sp start, T_sp oend);
    T_sp cl__file_length(T_sp strm);
    T_sp cl__file_position(T_sp stream, T_sp position);
    T_sp cl__input_stream_p(T_sp strm);
    T_sp cl__output_stream_p(T_sp strm);
    T_sp cl__interactive_stream_p(T_sp strm);
    bool cl__streamp(T_sp strm);
    T_sp cl__open(T_sp filename,
             T_sp direction,
             T_sp element_type,
             T_sp if_exists, bool iesp,
             T_sp if_does_not_exist, bool idnesp,
             T_sp external_format,
             T_sp cstream);
    T_sp cl__close(T_sp strm, T_sp abort);
    int core__stream_linenumber(T_sp tstream);
    int core__stream_column(T_sp tstream);
    SourcePosInfo_sp core__input_stream_source_pos_info(T_sp strm);
    T_sp cl__read_byte(T_sp strm, T_sp eof_error_p, T_sp eof_value);
    T_sp cl__peek_char(T_sp peek_type, T_sp strm, T_sp eof_errorp, T_sp eof_value, T_sp recursive_p);
    T_sp cl__read_char(T_sp strm, T_sp eof_error_p, T_sp eof_value, T_sp recursive_p);
    T_sp cl__read_char_no_hang(T_sp strm, T_sp eof_error_p, T_sp eof_value, T_sp recursive_p);
    T_mv cl__read_from_string(Str_sp content, T_sp eof_error_p, T_sp eof_value, Fixnum_sp start, T_sp end, T_sp preserve_whitespace);
    T_mv cl__read_line(T_sp sin, T_sp eof_error_p, T_sp eof_value, T_sp recursive_p);
    void cl__terpri(T_sp outputStreamDesig);
    bool cl__fresh_line(T_sp outputStreamDesig);
    Str_sp cl__write_string(Str_sp str, T_sp stream, int start, T_sp end);
    String_sp cl__write_line(Str_sp str, T_sp stream, Fixnum_sp start, T_sp end);
    Integer_sp cl__write_byte(Integer_sp byte, T_sp stream);
    Character_sp cl__write_char(Character_sp chr, T_sp stream);
    void cl__clear_input(T_sp dstrm);
    void cl__clear_output(T_sp dstrm);
    bool cl__listen(T_sp strm);
    void cl__force_output(T_sp ostrm);
    void cl__finish_output(T_sp ostrm);
    void cl__unread_char(Character_sp ch, T_sp dstrm);
    T_sp core__file_column(T_sp strm);
    T_sp cl__write_sequence(T_sp seq, T_sp stream, Fixnum_sp fstart, T_sp tend);
    T_sp core__bit_array_op(T_sp o, T_sp tx, T_sp ty, T_sp tr);
    T_sp cl__boole(T_sp op, T_sp arg1, T_sp arg2);
    T_sp core__list_of_all_special_operators();
    void core__low_level_repl();
    uint core__stack_used();
    void core__stack_monitor();
    T_mv core__stack_limit();
    void core__setup_stack_monitor(T_sp warnSize, T_sp sampleSize);
    void core__exit(int exitValue);
    void core__quit(int exitValue);
    List_sp cl__acons(T_sp key, T_sp val, List_sp alist);
    List_sp cl__assoc(T_sp item, List_sp alist, T_sp key, T_sp test, T_sp test_not);
    List_sp cl__member(T_sp item, T_sp tlist, T_sp key, T_sp test, T_sp test_not);
    List_sp core__member_test(T_sp item, List_sp list, T_sp key, T_sp test, T_sp test_not);
    List_sp core__member1(T_sp item, List_sp list, T_sp test, T_sp test_not, T_sp key);
    T_mv core__getline(Str_sp prompt);
    Class_mv cl__find_class(Symbol_sp symbol, bool errorp, T_sp env);
    Class_mv core__setf_find_class(T_sp newValue, Symbol_sp name, bool errorp, T_sp env);
    T_mv core__find_file_in_lisp_path(Str_sp partialPath);
    T_sp cl__find_package(T_sp name_desig);
    void core__select_package(T_sp package_designator);
    T_mv core__mpi_enabled();
    T_mv core__mpi_rank();
    T_mv core__mpi_size();
    T_mv cl__macroexpand_1(T_sp form, T_sp env);
    T_mv cl__macroexpand(T_sp form, T_sp env);
    T_sp cl__apropos(Str_sp string_desig, T_sp package_desig);
    List_sp core__sorted(List_sp unsorted);
    T_sp cl__sort(List_sp sequence, T_sp predicate);
    T_mv core__source_file_name();
    T_mv core__source_line_column();
    Path_mv core__script_dir();
    Path_mv core__library_path(T_sp relPathDesignator);
    Path_mv core__lisp_code_path(T_sp relPathDesignator);
    Path_mv core__database_dir();
    T_mv core__set_current_working_directory(Str_sp dir);
    T_mv core__is_top_level_script();
    void core__debug_log_on();
    void core__debug_log_off();
    T_sp cl__export(T_sp symDes, T_sp packageDes);
    void core__export_to_python(T_sp symbolsDesig);
    T_mv cl__intern(Str_sp symbol_name, T_sp package_desig);
    T_mv core__universal_error_handler(T_sp continueString, T_sp datum, List_sp initializers);
    void core__invoke_internal_debugger(T_sp condition);
    HashTable_sp core__single_dispatch_generic_function_table();
    void core__invoke_internal_debugger_from_gdb();
    void cl__error(T_sp datum, List_sp initializers);
    void cl__cerror(T_sp cformat, T_sp eformat, List_sp arguments);
    T_mv core__is_assignable_to(T_sp tag, Class_sp mc);
    T_mv core__is_sub_class_of(Class_sp tag, Class_sp mc);
    T_mv core__repr(T_sp obj);
    T_mv cl__not(T_sp x);
    List_sp core__all_source_files();
    T_sp core__make_cxx_object(T_sp class_or_name, T_sp args);
    bool core__fieldsp(T_sp obj);
    T_sp core__print_cxx_object(T_sp obj, T_sp stream);
    void core__low_level_describe(T_sp obj);
    T_sp cl__copy_tree(T_sp arg);
    T_sp core__implementation_class(T_sp arg);
    Class_sp core__instance_class(T_sp arg);
    string core__class_name_as_string(T_sp arg);
    T_sp core__instance_sig(T_sp obj);
    T_sp core__instance_sig_set(T_sp arg);
    T_sp core__instance_set(T_sp obj, int idx, T_sp val);
    T_sp core__instance_ref(T_sp obj, int idx);
    T_sp core__instancep(T_sp obj);
    bool core__is_nil(T_sp arg);
    core::List_sp core__encode(T_sp arg);
    T_sp core__decode(T_sp obj, core::List_sp arg);
    bool core__sl_boundp(T_sp obj);
    T_sp core__deep_copy(T_sp obj);
    core::Bignum_mv core__clock_gettime_nanoseconds();
    core::Bignum_mv core__test_profile_timer(uint delay);
    T_sp core__write_ugly_object(T_sp obj, T_sp ostrm);
    Regex_sp core__make_regex(const string &str);
    Pointer_sp core__pointer_release(T_sp ptr);
    void core__pointer_delete(T_sp ptr);
    T_sp core__pointer_address(T_sp ptr);
    T_sp cl__set_syntax_from_char(Character_sp toChar, Character_sp fromChar, ReadTable_sp toReadTable, gc::Nilable<ReadTable_sp> fromReadTable, T_sp fromReadTableP);
    T_sp cl__make_dispatch_macro_character(Character_sp ch, T_sp nonTerminatingP, ReadTable_sp readtable);
    T_mv cl__get_macro_character(Character_sp chr, T_sp readtable);
    T_sp cl__copy_readtable(gc::Nilable<ReadTable_sp> fromReadTable, gc::Nilable<ReadTable_sp> toReadTable);
    T_sp cl__readtable_case(ReadTable_sp readTable);
    void core__readtable_case_set(ReadTable_sp readTable, T_sp mode);
    T_mv cl__set_dispatch_macro_character(Character_sp dispChar, Character_sp subChar, T_sp newFunctionDesig, ReadTable_sp readtable);
    T_mv cl__get_dispatch_macro_character(Character_sp dispChar, Character_sp subChar, ReadTable_sp readtable);
    T_mv cl__set_macro_character(Character_sp ch, T_sp func_desig, T_sp non_terminating_p, ReadTable_sp readtable);
    T_mv core__reader_double_quote_string(T_sp stream, Character_sp ch);
    T_mv core__reader_backquoted_expression(T_sp sin, Character_sp ch);
    T_sp core__reader_comma_form(T_sp sin, Character_sp ch);
    T_sp core__reader_list_allow_consing_dot(T_sp sin, Character_sp ch);
    T_mv core__reader_error_unmatched_close_parenthesis(T_sp sin, Character_sp ch);
    T_sp core__reader_quote(T_sp sin, Character_sp ch);
    T_mv core__reader_skip_semicolon_comment(T_sp sin, Character_sp ch);
    T_mv core__dispatch_macro_character(T_sp sin, Character_sp ch);
    T_mv core__sharp_backslash(T_sp sin, Character_sp ch, T_sp num);
    T_sp core__sharp_dot(T_sp sin, Character_sp ch, T_sp num);
    T_sp core__sharp_single_quote(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_left_parenthesis(T_sp sin, Character_sp ch, T_sp tnum);
    T_mv core__sharp_asterisk(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_colon(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_r(T_sp sin, Character_sp ch, gc::Nilable<Fixnum_sp> nradix);
    T_mv core__sharp_b(T_sp sin, Character_sp ch, gc::Nilable<Fixnum_sp> num);
    T_mv core__sharp_o(T_sp sin, Character_sp ch, gc::Nilable<Fixnum_sp> num);
    T_mv core__sharp_x(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_c(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_a(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_s(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_p(T_sp sin, Character_sp ch, T_sp num);
    T_sp core__reader_feature_p(T_sp feature_test);
    T_mv core__sharp_plus(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_minus(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__sharp_vertical_bar(T_sp sin, Character_sp ch, T_sp num);
    T_mv core__float_to_digits(T_sp tdigits, Float_sp number, gc::Nilable<Real_sp> position,
                          T_sp relativep);
    Pathname_sp cl__pathname(T_sp x);
    Pathname_sp cl__merge_pathnames(T_sp path, T_sp defaults, T_sp defaultVersion);
    bool cl__wild_pathname_p(T_sp tpathname, T_sp component);
    Pathname_sp core__coerce_to_file_pathname(T_sp tpathname);
    Pathname_sp core__coerce_to_physical_pathname(T_sp x);
    Str_sp core__coerce_to_filename(T_sp pathname_orig);
    T_sp cl__namestring(T_sp x);
    T_mv cl__parse_namestring(T_sp thing, T_sp host, T_sp tdefaults, Fixnum_sp start, T_sp end, bool junkAllowed);
    Pathname_sp cl__make_pathname(T_sp host, bool hostp, T_sp device, bool devicep, T_sp directory, bool directoryp, T_sp name, bool namep, T_sp type, bool typep, T_sp version, bool versionp, T_sp scase, T_sp odefaults);
    T_sp cl__pathname_host(T_sp tpname, Symbol_sp scase);
    T_sp cl__pathname_device(T_sp tpname, Symbol_sp scase);
    T_sp cl__pathname_directory(T_sp tpname, Symbol_sp scase);
    T_sp cl__pathname_name(T_sp tpname, Symbol_sp scase);
    T_sp cl__pathname_type(T_sp tpname, Symbol_sp scase);
    T_sp cl__pathname_version(T_sp tpname);
    Str_sp cl__file_namestring(T_sp tpname);
    Str_sp cl__directory_namestring(T_sp tpname);
    Str_sp cl__host_namestring(T_sp tpname);
    Str_sp cl__enough_namestring(T_sp tpath, T_sp tdefaults);
    bool cl__pathname_match_p(T_sp tpath, T_sp tmask);
    T_sp core__pathname_translations(T_sp host, T_sp hostp, T_sp set);
    Pathname_sp cl__translate_pathname(T_sp tsource, T_sp tfrom, T_sp tto, T_sp scase);
    Pathname_sp cl__translate_logical_pathname(T_sp tsource);
    T_sp core__signal_simple_error(T_sp baseCondition, T_sp continueMessage, T_sp formatControl, T_sp formatArgs, T_sp args);
    void core__wrong_type_argument(const string &sourceFile, int lineno, Symbol_sp function, T_sp value, T_sp type);
    void core__wrong_type_nth_arg(const string &sourceFile, int lineno, Symbol_sp function, int narg, T_sp value, T_sp type);
    void core__wrong_index(const string &sourceFile, int lineno, Symbol_sp function, T_sp array, int which, T_sp index, int nonincl_limit);
    void cl__reader_error(const string &sourceFile, uint lineno, Symbol_sp function,
                    Str_sp fmt, List_sp fmtargs, T_sp stream);
    void core__inherit_default_allocator(Class_sp cl, T_sp directSuperclasses);
    T_sp core__allocate_raw_class(T_sp orig, Class_sp metaClass, int slots, T_sp className);
    bool core__subclassp(T_sp low, T_sp high);
    void core__is_string(T_sp arg);
    void core__is_array(T_sp arg);
    T_sp core__test_val(T_sp v);
    bool core__base_char_p(T_sp arg);
    bool core__simple_string_p(T_sp obj);
    bool core__double_float_p(T_sp obj);
    bool cl__functionp(T_sp obj);
    bool core__interpreted_function_p(T_sp arg);
    bool cl__packagep(T_sp obj);
    bool core__built_in_class_p(T_sp obj);
    bool core__cxx_instance_p(T_sp obj);
    bool core__lambda_list_handler_p(T_sp obj);
    bool cl__numberp(T_sp obj);
    bool core__ratio_p(T_sp obj);
    bool cl__random_state_p(T_sp obj);
    bool core__long_float_p(T_sp obj);
    bool core__short_float_p(T_sp obj);
    bool core__single_float_p(T_sp obj);
    bool core__path_p(T_sp obj);
    bool cl__bit_vector_p(T_sp obj);
    bool cl__hash_table_p(T_sp obj);
    bool cl__readtablep(T_sp obj);
    bool core__structure_object_p(T_sp obj);
    bool core__single_dispatch_generic_function_p(T_sp obj);
    bool core__activation_frame_p(T_sp obj);
    bool core__external_object_p(T_sp obj);
    bool cl__simple_bit_vector_p(T_sp o);
    bool cl__simple_vector_p(T_sp o);
    bool cl__compiled_function_p(T_sp o);
    bool core__generic_function_p(T_sp o);
    bool core__proper_list_p(T_sp arg);
    bool cl__pathnamep(T_sp obj);
    bool core__logical_pathname_p(T_sp obj);
    T_sp core__search_string(Str_sp str1, Fixnum_sp start1, T_sp end1, Str_sp str2, Fixnum_sp start2, T_sp end2);
    Package_sp cl__rename_package(T_sp pkg, T_sp newNameDesig, T_sp nickNameDesigs);
    T_sp cl__package_nicknames(T_sp pkg);
    bool cl__unintern(Symbol_sp sym, T_sp packageDesig);
    T_mv cl__find_symbol(const string &symbolname, T_sp packageDesig);
    T_mv cl__make_package(T_sp package_name_desig, List_sp nick_names, List_sp use_packages);
    T_sp cl__list_all_packages();
    T_sp cl__use_package(T_sp packages_to_use_desig, T_sp package_desig);
    T_sp cl__unuse_package(T_sp packages_to_unuse_desig, T_sp package_desig);
    T_sp cl__delete_package(T_sp pobj);
    T_sp cl__package_shadowing_symbols(T_sp package_desig);
    T_mv cl__import(T_sp symbols_desig, T_sp package_desig);
    T_mv cl__shadow(List_sp symbol_names_desig, T_sp package_desig);
    T_mv cl__shadowing_import(T_sp symbol_names_desig, T_sp package_desig);
    T_mv cl__gentemp(T_sp prefix, T_sp package_designator);
    T_sp cl__package_use_list(T_sp package_designator);
    List_sp cl__package_used_by_list(T_sp pkgDesig);
    T_sp cl__package_name(T_sp pkgDesig);
    T_sp core__calculate_missing_common_lisp_symbols();
    int cl__fill_pointer(Vector_sp vec);
    T_mv cl__array_displacement(T_sp array);
    T_mv cl__upgraded_array_element_type(T_sp type);
    void core__copy_subarray(Array_sp out, Fixnum_sp outStart, Array_sp in, Fixnum_sp inStart, Fixnum_sp len);
    T_sp core__aset(Array_sp array, List_sp indices_value);
    List_sp core__put_f(List_sp place, T_sp value, T_sp indicator);
    T_sp cl__getf(List_sp plist, T_sp indicator, T_sp default_value);
    T_mv core__rem_f(List_sp plist, Symbol_sp indicator);
    Cons_sp cl__cons(T_sp obj1, T_sp obj2);
    Cons_sp cl__rplaca(Cons_sp c, T_sp o);
    Cons_sp cl__rplacd(Cons_sp c, T_sp o);
    List_sp cl__make_list(Integer_sp osize, T_sp initial_element);
    T_sp core__append2(List_sp x, List_sp y);
    List_sp cl__symbol_plist(Symbol_sp sym);
    T_sp cl__get(Symbol_sp sym, T_sp indicator, T_sp defval);
    void core__setf_symbol_plist(Symbol_sp sym, List_sp plist);
    T_sp core__putprop(Symbol_sp sym, T_sp val, T_sp indicator);
    bool cl__boundp(Symbol_sp arg);
    T_sp cl__symbol_package(Symbol_sp arg);
    Function_sp cl__symbol_function(Symbol_sp sym);
    Str_sp cl__symbol_name(Symbol_sp arg);
    T_sp cl__symbol_value(const Symbol_sp arg);
    T_sp core__symbol_value_address(const Symbol_sp arg);
    Symbol_mv cl__make_symbol(Str_sp name);
    T_sp cl__make_condition(T_sp type, List_sp slot_initializations);
    string core__condition_message(T_sp condition);
    T_sp core__iterator_unsafe_element(Iterator_sp it);
    Iterator_sp core__iterator_step(Iterator_sp it);
    T_sp core__put_sysprop(T_sp key, T_sp area, T_sp value);
    T_mv core__get_sysprop(T_sp key, T_sp area);
    T_sp core__rem_sysprop(T_sp key, T_sp area);
    T_sp core__bformat(T_sp destination, const string &control, List_sp args);
    T_sp cl__format(T_sp destination, T_sp control, List_sp args);
    T_sp core__backquote_append(List_sp lists);
    T_mv core__backquote_completely_process(T_sp x);
    T_sp core__backquote_process(T_sp ox);
    T_sp core__backquote_bracket(T_sp x);
    bool core__backquote_splicing_frob(T_sp x);
    bool core__backquote_frob(T_sp x);
    T_sp core__backquote_maptree(Function_sp op, T_sp x);
    T_sp core__backquote_simplify(T_sp x);
    T_sp core__backquote_simplify_args(T_sp x);
    T_sp core__backquote_null_or_quoted(T_sp x);
    T_sp core__backquote_attach_append(T_sp op, T_sp item, T_sp result);
    List_sp core__backquote_attach_conses(T_sp items, T_sp result);
    T_sp core__backquote_remove_tokens(T_sp x);
    T_sp core__record_cons(List_sp record, T_sp key, T_sp sub_key);
    T_sp core__record_field(List_sp record, T_sp key, T_sp sub_key);
    T_sp core__set_record_field(List_sp record, T_sp key, T_sp sub_key, Str_sp value);
    T_sp core__rem_record_field(List_sp record, T_sp key, T_sp sub_key);
    T_mv ext__annotate(T_sp object, T_sp key, T_sp sub_key, Str_sp value);
    void core__ensure_documentation(T_sp sub_key, Symbol_sp symbol, Str_sp value);
    T_mv core__nread(T_sp sin, T_sp eof_error_p, T_sp eof_value);
    T_sp core__ensure_single_dispatch_generic_function(Symbol_sp gfname, LambdaListHandler_sp llhandler);
    void core__ensure_single_dispatch_method(Symbol_sp gfname, Class_sp receiver_class, LambdaListHandler_sp lambda_list_handler, List_sp declares, gc::Nilable<Str_sp> docstring, Function_sp body);
    T_sp core__make_structure(T_sp type, List_sp slot_values);
    T_sp cl__copy_structure(T_sp arg);
    T_sp core__structure_ref(T_sp obj, Symbol_sp type, int idx);
    T_sp core__structure_set(T_sp obj, Symbol_sp type, int idx, T_sp val);
    bool core__structurep(T_sp arg);
    bool core__structure_subtypep(T_sp x, Symbol_sp y);
    bool cl__lower_case_p(Character_sp c);
    bool cl__upper_case_p(Character_sp c);
    bool cl__both_case_p(Character_sp c);
    bool cl__alphanumericp(Character_sp ch);
    char cl__char_upcase(Character_sp ch);
    char cl__char_downcase(Character_sp ch);
    T_sp cl__char_LT_(List_sp args);
    T_sp cl__char_GT_(List_sp args);
    T_sp cl__char_LE_(List_sp args);
    T_mv cl__char_GE_(List_sp args);
    T_mv cl__char_lessp(List_sp args);
    T_mv cl__char_greaterp(List_sp args);
    T_mv cl__char_not_greaterp(List_sp args);
    T_sp cl__char_not_lessp(List_sp args);
    T_sp cl__char_NE_(List_sp args);
    T_sp cl__char_EQ_(List_sp args);
    T_mv cl__char_not_equal(List_sp args);
    bool cl__char_equal(List_sp args);
    bool cl__standard_char_p(Character_sp ch);
    bool cl__alpha_char_p(Character_sp ch);
    T_sp cl__digit_char_p(Character_sp c, Fixnum_sp radix);
    T_mv cl__name_char(Str_sp sname);
    Str_sp cl__char_name(Character_sp och);
    Fixnum_sp cl__char_code(Character_sp och);
    Fixnum_sp cl__char_int(Character_sp och);
    Character_sp cl__code_char(Integer_sp ich);
    Str_sp cl__string_trim(T_sp charbag, T_sp str);
    Str_sp cl__string_left_trim(T_sp charbag, T_sp str);
    Str_sp cl__string_right_trim(T_sp charbag, T_sp str);
    Str_sp cl__string_upcase(T_sp arg);
    claspChar cl__char(T_sp ostr, int idx);
    Str_sp cl__string_downcase(T_sp arg);
    Str_sp cl__nstring_upcase(T_sp arg);
    Str_sp cl__nstring_downcase(T_sp arg);
    Str_sp cl__string(T_sp arg);
    T_sp cl__string_EQ_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_NE_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_LT_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_GT_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_LE_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_GE_(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_sp cl__string_equal(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_not_equal(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_lessp(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_greaterp(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_not_greaterp(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__string_not_lessp(T_sp strdes1, T_sp strdes2, Fixnum_sp start1, T_sp end1, Fixnum_sp start2, T_sp end2);
    T_mv cl__make_string(Fixnum_sp size, T_sp initial_element, T_sp element_type);
    claspChar cl__schar(Str_sp str, int idx);
    claspChar core__char_set(Str_sp str, int idx, claspChar c);
    claspChar core__schar_set(Str_sp str, int idx, claspChar c);
    T_mv cl__parse_integer(Str_sp str, Fixnum start, T_sp end, uint radix, T_sp junkAllowed);
    uint cl__length(T_sp arg);
    T_sp cl__elt(T_sp sequence, int index);
    T_mv cl__make_sequence(T_sp type, Fixnum_sp size, T_sp initial_element, T_sp iesp);
    T_sp cl__reverse(T_sp seq);
    T_sp cl__nreverse(T_sp seq);
    T_sp cl__subseq(T_sp seq, int start, T_sp end);
    T_sp cl__copy_seq(T_sp seq);
    T_sp core__setf_elt(T_sp sequence, int index, T_sp value);
    T_sp core__elt_set(T_sp sequence, int index, T_sp val);
    T_sp core__setf_subseq(T_sp sequence, int start, Fixnum_sp end, T_sp subseq);
    Vector_sp cl__vector(List_sp args);
    Vector_sp core__make_vector(T_sp element_type,
                           int dimension,
                           bool adjustable,
                           T_sp fill_pointer,
                           T_sp displaced_to,
                           T_sp displaced_index_offset,
                           T_sp initial_element,
                           T_sp initialContents);
    T_sp core__adjust_vector(T_sp array, int new_dimensions, T_sp initial_element, List_sp initial_contents);
    T_sp cl__vector_push(T_sp newElement, Vector_sp vec);
    Fixnum_sp cl__vector_push_extend(T_sp newElement, Vector_sp vec, int extension);
    bool core__set_run_time_values_vector(const string &name);
    LoadTimeValues_mv core__load_time_value_array(const string &name, int dataSize, int symbolSize);
    T_sp core__lookup_load_time_value(const string &name, int idx);
    Symbol_sp core__lookup_load_time_symbol(const string &name, int idx);
    void core__load_time_values_ids();
    void core__load_time_values_dump_values(T_sp nameOrLtv, T_sp indices);
    void core__load_time_values_dump_symbols(T_sp nameOrLtv, T_sp indices);
    T_mv cl__ensure_directories_exist(T_sp pathspec);
    T_sp cl__get_internal_real_time();
    T_sp cl__get_internal_run_time();
};
namespace gctools {
    Fixnum core__header_kind(core::T_sp obj);
    bool core__inherits_from_instance(core::T_sp obj);
    core::T_mv core__hardwired_kinds();
    core::T_mv cl__room(core::T_sp x, core::Fixnum_sp marker, core::T_sp tmsg);
    core::Fixnum gctools__next_header_kind();
};
namespace telemetry {
    void core__telemetry_open(core::T_sp pathname);
    void core__telemetry_search(core::List_sp addresses);
    void core__telemetry_search_labels(core::List_sp labels);
    void core__telemetry_follow(core::T_sp address);
    void core__telemetry_labels();
    void core__telemetry_dump(core::T_sp begin, core::T_sp end);
    size_t core__telemetry_count();
};
namespace sockets {
    int sockets_internal__ff_socket(int domain, int type, int protocol);
    int sockets_internal__ff_listen(int sockfd, int backlog);
    int sockets_internal__ff_close(int filedes);
    core::T_mv sockets_internal__funcName();
    int sockets_internal__ll_socket_errno();
    int sockets_internal__ll_get_name_service_h_errno();
    core::Str_sp sockets_internal__ll_getNameServiceErrorMessage(int num);
    core::T_sp sockets_internal__ll_getHostByName(const string &hostName,
                                             core::T_sp tHostEnt,
                                             core::Function_sp setf_host_ent_name,
                                             core::Function_sp setf_host_ent_aliases,
                                             core::Function_sp setf_host_ent_address_type,
                                             core::Function_sp setf_host_ent_addresses);
    core::T_sp sockets_internal__ll_getHostByAddress(core::Vector_sp address,
                            core::T_sp tHostEnt,
                            core::T_sp setf_host_ent_name,
                            core::T_sp setf_host_ent_aliases,
                            core::T_sp setf_host_ent_address_type,
                            core::T_sp setf_host_ent_addresses);
    core::T_mv sockets_internal__ll_socketReceive(int fd,
                         core::T_sp buffer,
                         int length,
                         bool oob,
                         bool peek,
                         bool waitall);
    int sockets_internal__ll_getProtocolByName(const string &name);
    int sockets_internal__ll_socketBind_inetSocket(int port, int ip0, int ip1, int ip2, int ip3, int socketFileDescriptor);
    core::T_mv sockets_internal__ll_socketAccept_inetSocket(int sfd);
    int sockets_internal__ll_socketConnect_inetSocket(int port, int ip0, int ip1, int ip2, int ip3, int socket_file_descriptor);
    int sockets_internal__ll_socketPeername_inetSocket(int fd, core::Vector_sp vector);
    int sockets_internal__ll_socketName(int fd, core::Vector_sp vector);
    core::Integer_sp sockets_internal__ll_socketSendAddress(int fd,
                                   core::Vector_sp vbuffer,
                                   int length,
                                   int secondAddress,
                                   int ip0,
                                   int ip1,
                                   int ip2,
                                   int ip3,
                                   bool oob,
                                   bool eor,
                                   bool dontroute,
                                   bool dontwait,
                                   bool nosignal,
                                   bool confirm);
    core::Integer_sp sockets_internal__socketSendNoAddress(int fb,
                                  core::Vector_sp vbuffer,
                                  int length,
                                  bool oob,
                                  bool eor,
                                  bool dontroute,
                                  bool dontwait,
                                  bool nosignal,
                                  bool confirm
                                  );
    int sockets_internal__ll_socketBind_localSocket(int fd, const string &name, int family);
    core::T_mv sockets_internal__ll_socketAccept_localSocket(int socketFileDescriptor);
    int sockets_internal__ll_socketConnect_localSocket(int fd, int family, const string &path);
    core::Str_sp sockets_internal__socketPeername_localSocket(int fd);
    int sockets_internal__ll_nonBlockingMode(int fd);
    int sockets_internal__ll_setfNonBlockingMode(int fd, int nblock);
    int sockets_internal__ll_dup(int fd);
    core::T_sp sockets_internal__ll_makeStreamFromFd(const string &name,
                            int fd,
                            int streamMode,
                            core::T_sp elementType,
                            core::T_sp externalFormat);
    void sockets_internal__ll_autoCloseTwoWayStream(core::Stream_sp stream);
    core::Str_sp sockets_internal__ll_strerror(int num);
    core::Str_sp sockets_internal__ll_strerror_errno();
    core::Integer_sp sockets_internal__ll_getSockoptInt(int fd, int level, int constant);
    core::T_sp sockets_internal__ll_getSockoptBool(int fd, int level, int constant);
    core::DoubleFloat_sp sockets_internal__ll_getSockoptTimeval(int fd, int level, int constant);
    core::Integer_sp sockets_internal__ll_getSockoptLinger(int fd, int level, int constant);
    bool sockets_internal__ll_setSockoptInt(int fd, int level, int constant, int value);
    bool sockets_internal__ll_setSockoptBool(int fd, int level, int constant, bool value);
    bool sockets_internal__ll_setSockoptTimeval(int fd, int level, int constant, double value);
    bool sockets_internal__ll_setSockoptLinger(int fd, int level, int constant, int value);
};
#endif // EXPOSE_FUNCTION_SIGNATURES
#ifdef EXPOSE_FUNCTION_BINDINGS
  expose_function("cl","eq",true,&core::cl__eq,"(x y)");
  expose_function("cl","eql",true,&core::cl__eql,"(x y)");
  expose_function("cl","equal",true,&core::cl__equal,"(x y)");
  expose_function("cl","equalp",true,&core::cl__equalp,"(x y)");
  expose_function("cl","endp",true,&core::cl__endp,"(arg)");
  expose_function("cl","atom",true,&core::cl__atom,"(arg)");
  expose_function("core","make_vector_displaced",true,&core::core__make_vector_displaced,"(dim element-type displaced-to displaced-offset)");
  expose_function("core","test_add",true,&core::core__test_add,"(x y)");
  expose_function("core","make_weak_key_hash_table",true,&core::core__make_weak_key_hash_table,"(&optional (size 16))");
  expose_function("core","weak_gethash",true,&core::core__weak_gethash,"(key hash-table &optional default-value)");
  expose_function("core","weak_setf_gethash",true,&core::core__weak_setf_gethash,"(ht key value)");
  expose_function("core","weak_remhash",true,&core::core__weak_remhash,"(ht key)");
  expose_function("core","weak_clrhash",true,&core::core__weak_clrhash,"(ht)");
  expose_function("core","weak_splat",true,&core::core__weak_splat,"(ht idx)");
  expose_function("core","weak_rehash",true,&core::core__weak_rehash,"(ht &optional sz)");
  expose_function("core","compile_form_and_eval_with_env",true,&core::core__compile_form_and_eval_with_env,"(form &optional env stepping compiler-env-p (execute t))");
  expose_function("cl","apply",true,&core::cl__apply,"(head &va-rest args)");
  expose_function("cl","eval",true,&core::cl__eval,"(form)");
  expose_function("cl","funcall",true,&core::cl__funcall,"(function_desig &va-rest args)");
  expose_function("core","coerce_to_function",true,&core::core__coerce_to_function,"(arg)");
  expose_function("core","process_declarations",true,&core::core__process_declarations,"(body expectDocString)");
  expose_function("core","extract_lambda_name_from_declares",true,&core::core__extract_lambda_name_from_declares,"(declare-list &optional default)");
  expose_function("core","extract_lambda_name",true,&core::core__extract_lambda_name,"(form &optional default)");
  expose_function("core","lookup_symbol_macro",true,&core::core__lookup_symbol_macro,"(symbol &optional env)");
  expose_function("core","classify_let_variables_and_declares",true,&core::core__classify_let_variables_and_declares,"(variables declared-specials)");
  expose_function("core","evaluate_depth",true,&core::core__evaluate_depth,"()");
  expose_function("core","evaluate_verbosity",true,&core::core__evaluate_verbosity,"(arg)");
  expose_function("core","eval_with_env_default",true,&core::core__eval_with_env_default,"(form &optional env stepping compiler-env-p (execute t))");
  expose_function("core","help_booting",true,&core::core__help_booting,"()");
  expose_function("core","test_tagged_cast",true,&core::core__test_tagged_cast,"(pow2)");
  expose_function("core","cxx_fibn",true,&core::core__cxx_fibn,"(reps num)");
  expose_function("core","mangle_name",true,&core::core__mangle_name,"(object &optional is_function)");
  expose_function("core","startup_image_pathname",true,&core::core__startup_image_pathname,"()");
  expose_function("core","load_bundle",true,&core::core__load_bundle,"(name &optional verbose print external-format)");
  expose_function("core","dlopen",true,&core::core__dlopen,"(pathDesig)");
  expose_function("core","dlsym",true,&core::core__dlsym,"(handle name)");
  expose_function("core","call_dl_main_function",true,&core::core__call_dl_main_function,"(addr)");
  expose_function("core","dladdr",true,&core::core__dladdr,"(addr)");
  expose_function("core","call_with_variable_bound",true,&core::core__call_with_variable_bound,"(sym val thunk)");
  expose_function("core","funwind_protect",true,&core::core__funwind_protect,"(protected-fn cleanup-fn)");
  expose_function("core","multiple_value_funcall",true,&core::core__multiple_value_funcall,"(function-designator &rest functions)");
  expose_function("core","multiple_value_prog1_function",true,&core::core__multiple_value_prog1_function,"(func1 func2)");
  expose_function("core","catch_function",true,&core::core__catch_function,"(tag func)");
  expose_function("core","throw_function",true,&core::core__throw_function,"(tag result)");
  expose_function("core","progv_function",true,&core::core__progv_function,"(symbols values func)");
  expose_function("core","maybe_expand_generic_function_arguments",true,&core::core__maybe_expand_generic_function_arguments,"(args)");
  expose_function("core","clear_gfun_hash",true,&core::core__clear_gfun_hash,"(what)");
  expose_function("core","instance_class_set",true,&core::core__instance_class_set,"(instance func)");
  expose_function("core","copy_instance",true,&core::core__copy_instance,"(obj)");
  expose_function("core","clear_generic_function_dispatch_cache",true,&core::core__clear_generic_function_dispatch_cache,"()");
  expose_function("cl","sleep",true,&core::cl__sleep,"(seconds)");
  expose_function("cl","lisp_implementation_type",true,&core::cl__lisp_implementation_type,"()");
  expose_function("cl","lisp_implementation_version",true,&core::cl__lisp_implementation_version,"()");
  expose_function("core","method_cache_resize",true,&core::core__method_cache_resize,"(pow)");
  expose_function("core","slot_cache_resize",true,&core::core__slot_cache_resize,"(pow)");
  expose_function("core","single_dispatch_method_cache_resize",true,&core::core__single_dispatch_method_cache_resize,"(pow)");
  expose_function("core","method_cache_status",true,&core::core__method_cache_status,"()");
  expose_function("core","slot_cache_status",true,&core::core__slot_cache_status,"()");
  expose_function("core","single_dispatch_method_cache_status",true,&core::core__single_dispatch_method_cache_status,"()");
  expose_function("core","lisp_implementation_id",true,&core::core__lisp_implementation_id,"()");
  expose_function("core","create_tagged_immediate_value_or_nil",true,&core::core__create_tagged_immediate_value_or_nil,"(obj)");
  expose_function("cl","software_type",true,&core::cl__software_type,"()");
  expose_function("cl","software_version",true,&core::cl__software_version,"()");
  expose_function("cl","machine_type",true,&core::cl__machine_type,"()");
  expose_function("cl","machine_version",true,&core::cl__machine_version,"()");
  expose_function("cl","machine_instance",true,&core::cl__machine_instance,"()");
  expose_function("core","argc",true,&core::core__argc,"()");
  expose_function("core","argv",true,&core::core__argv,"(idx)");
  expose_function("cl","set",true,&core::cl__set,"(sym value)");
  expose_function("core","dump_address_of",true,&core::core__dump_address_of,"(arg)");
  expose_function("core","incomplete_next_higher_power_of_2",true,&core::core__incomplete_next_higher_power_of_2,"(arg)");
  expose_function("core","all_registered_class_names",true,&core::core__all_registered_class_names,"()");
  expose_function("core","to_tagged_fixnum",true,&core::core__to_tagged_fixnum,"(arg)");
  expose_function("core","from_tagged_fixnum",true,&core::core__from_tagged_fixnum,"(val)");
  expose_function("core","dump_tagged_fixnum",true,&core::core__dump_tagged_fixnum,"(arg)");
  expose_function("ext","setenv",true,&core::ext__setenv,"(name value)");
  expose_function("ext","system",true,&core::ext__system,"(cmd)");
  expose_function("ext","vfork_execvp",true,&core::ext__vfork_execvp,"(call-and-arguments)");
  expose_function("ext","getenv",true,&core::ext__getenv,"(arg)");
  expose_function("ext","llvm_version",true,&core::ext__llvm_version,"");
  expose_function("core","describe_cxx_object",true,&core::core__describe_cxx_object,"(name &optional stream)");
  expose_function("core","setenv",true,&core::core__setenv,"(name arg overwrite)");
  expose_function("core","pointer",true,&core::core__pointer,"(arg)");
  expose_function("core","is_true",true,&core::core__is_true,"(arg)");
  expose_function("core","substitute",true,&core::core__substitute,"(arg)");
  expose_function("core","unbound",true,&core::core__unbound,"()");
  expose_function("core","smart_pointer_details",true,&core::core__smart_pointer_details,"()");
  expose_function("cl","values",true,&core::cl__values,"(&rest args)");
  expose_function("core","values_testing",true,&core::core__values_testing,"(&rest args)");
  expose_function("cl","values_list",true,&core::cl__values_list,"(list)");
  expose_function("core","function_block_name",true,&core::core__function_block_name,"(functionName)");
  expose_function("core","valid_function_name_p",true,&core::core__valid_function_name_p,"(arg)");
  expose_function("core","test_memory_error",true,&core::core__test_memory_error,"()");
  expose_function("core","separate_pair_list",true,&core::core__separate_pair_list,"(listOfPairs)");
  expose_function("cl","macro_function",true,&core::cl__macro_function,"(symbol &optional env)");
  expose_function("cl","special_operator_p",true,&core::cl__special_operator_p,"(symbol)");
  expose_function("cl","ash",true,&core::cl__ash,"(integer count)");
  expose_function("core","break",true,&core::core__break,"(&optional fmt-control &rest args)");
  expose_function("core","gdb",true,&core::core__gdb,"(&optional msg)");
  expose_function("core","cxx_lambda_list_handler_create_bindings_calls",true,&core::core__cxx_lambda_list_handler_create_bindings_calls,"()");
  expose_function("core","trap_execution",true,&core::core__trap_execution,"(&optional msg)");
  expose_function("core","gdb_inspect",true,&core::core__gdb_inspect,"(msg o)");
  expose_function("cl","constantp",true,&core::cl__constantp,"(obj &optional env)");
  expose_function("cl","identity",true,&core::cl__identity,"(arg)");
  expose_function("core","macroexpand_default",true,&core::core__macroexpand_default,"(macro_function form macro_env)");
  expose_function("cl","null",true,&core::cl__null,"(obj)");
  expose_function("cl","class_of",true,&core::cl__class_of,"(obj)");
  expose_function("core","STARfset",true,&core::core__STARfset,"(function-name fn &optional macro)");
  expose_function("cl","fdefinition",true,&core::cl__fdefinition,"(function-name)");
  expose_function("cl","fboundp",true,&core::cl__fboundp,"(function-name)");
  expose_function("cl","fmakunbound",true,&core::cl__fmakunbound,"(function-name)");
  expose_function("cl","read_delimited_list",true,&core::cl__read_delimited_list,"(char &optional input-stream-designator recursive-p)");
  expose_function("cl","read",true,&core::cl__read,"(&optional input-stream-designator (eof-error-p t) eof-value recursive-p)");
  expose_function("cl","read_preserving_whitespace",true,&core::cl__read_preserving_whitespace,"(&optional input-stream-designator (eof-error-p t) eof-value recursive-p)");
  expose_function("cl","every",true,&core::cl__every,"(predicate &rest sequences)");
  expose_function("cl","some",true,&core::cl__some,"(predicate &rest sequences)");
  expose_function("cl","notany",true,&core::cl__notany,"(predicate &rest sequences)");
  expose_function("cl","notevery",true,&core::cl__notevery,"(predicate &rest sequences)");
  expose_function("cl","mapcar",true,&core::cl__mapcar,"(func_desig &rest lists)");
  expose_function("cl","mapc",true,&core::cl__mapc,"(op &rest lists)");
  expose_function("cl","maplist",true,&core::cl__maplist,"(func_desig &rest lists)");
  expose_function("cl","mapl",true,&core::cl__mapl,"(op &rest lists)");
  expose_function("core","mapappend",true,&core::core__mapappend,"(fun &rest cargs)");
  expose_function("cl","mapcon",true,&core::cl__mapcon,"(op &rest lists)");
  expose_function("cl","mapcan",true,&core::cl__mapcan,"(op &rest lists)");
  expose_function("cl","append",true,&core::cl__append,"(&rest lists)");
  expose_function("core","sequence_start_end",true,&core::core__sequence_start_end,"(func sequence start end)");
  expose_function("cl","gensym",true,&core::cl__gensym,"(&optional x)");
  expose_function("core","type_to_symbol",true,&core::core__type_to_symbol,"(x)");
  expose_function("cl","type_of",true,&core::cl__type_of,"(obj)");
  expose_function("cl","sxhash",true,&core::cl__sxhash,"(obj)");
  expose_function("core","get_invocation_history_frame_search",true,&core::core__get_invocation_history_frame_search,"(idx direction)");
  expose_function("core","get_invocation_history_frame_top",true,&core::core__get_invocation_history_frame_top,"()");
  expose_function("core","get_invocation_history_frame",true,&core::core__get_invocation_history_frame,"()");
  expose_function("core","get_invocation_history_frame_prev",true,&core::core__get_invocation_history_frame_prev,"()");
  expose_function("core","get_invocation_history_frame_next",true,&core::core__get_invocation_history_frame_next,"()");
  expose_function("core","ihs_backtrace_no_args",true,&core::core__ihs_backtrace_no_args,"()");
  expose_function("core","ihs_top",true,&core::core__ihs_top,"()");
  expose_function("core","ihs_prev",true,&core::core__ihs_prev,"(cur)");
  expose_function("core","ihs_next",true,&core::core__ihs_next,"(cur)");
  expose_function("core","ihs_fun",true,&core::core__ihs_fun,"(arg)");
  expose_function("core","ihs_arguments",true,&core::core__ihs_arguments,"(arg)");
  expose_function("core","ihs_env",true,&core::core__ihs_env,"(cur)");
  expose_function("core","ihs_bds",true,&core::core__ihs_bds,"(cur)");
  expose_function("core","ihs_current_frame",true,&core::core__ihs_current_frame,"()");
  expose_function("core","set_ihs_current_frame",true,&core::core__set_ihs_current_frame,"()");
  expose_function("core","bds_top",true,&core::core__bds_top,"()");
  expose_function("core","bds_var",true,&core::core__bds_var,"(idx)");
  expose_function("core","bds_val",true,&core::core__bds_val,"(idx)");
  expose_function("core","exception_stack",true,&core::core__exception_stack,"()");
  expose_function("core","exception_stack_dump",true,&core::core__exception_stack_dump,"()");
  expose_function("core","dynamic_binding_stack_dump",true,&core::core__dynamic_binding_stack_dump,"()");
  expose_function("core","ihs_backtrace",true,&core::core__ihs_backtrace,"(&optional (out t) msg)");
  expose_function("cl","random",true,&core::cl__random,"(olimit &optional (random-state cl:*random-state*))");
  expose_function("core","low_level_backtrace",true,&core::core__low_level_backtrace,"()");
  expose_function("core","clib_backtrace",true,&core::core__clib_backtrace,"(depth)");
  expose_function("core","frame_pointers",true,&core::core__frame_pointers,"()");
  expose_function("core","print_current_ihs_frame_environment",true,&core::core__print_current_ihs_frame_environment,"()");
  expose_function("core","make_small_map",true,&core::core__make_small_map,"()");
  expose_function("core","make_small_multimap",true,&core::core__make_small_multimap,"()");
  expose_function("core","debug_hash_table",true,&core::core__debug_hash_table,"(on)");
  expose_function("cl","make_hash_table",true,&core::cl__make_hash_table,"(&key (test (function eql)) (size 16) (rehash-size 1.5) (rehash_threshold 1.0) weakness debug)");
  expose_function("core","hash_table_weakness",true,&core::core__hash_table_weakness,"(ht)");
  expose_function("cl","maphash",true,&core::cl__maphash,"(function_desig hash_table)");
  expose_function("cl","clrhash",true,&core::cl__clrhash,"(hash_table)");
  expose_function("core","hash_table_entry_deleted_p",true,&core::core__hash_table_entry_deleted_p,"(cons)");
  expose_function("core","hash_eql",true,&core::core__hash_eql,"(&rest args)");
  expose_function("core","hash_equal",true,&core::core__hash_equal,"(&rest args)");
  expose_function("core","hash_equalp",true,&core::core__hash_equalp,"(&rest args)");
  expose_function("cl","remhash",true,&core::cl__remhash,"(key hashtable)");
  expose_function("cl","gethash",true,&core::cl__gethash,"(key hash-table &optional default_value)");
  expose_function("core","hash_table_force_rehash",true,&core::core__hash_table_force_rehash,"(ht)");
  expose_function("cl","zerop",true,&core::cl__zerop,"(num)");
  expose_function("core","convert_overflow_result_to_bignum",true,&core::core__convert_overflow_result_to_bignum,"()");
  expose_function("core","fixnum_number_of_bits",true,&core::core__fixnum_number_of_bits,"()");
  expose_function("cl","min",true,&core::cl__min,"(min &rest nums)");
  expose_function("cl","max",true,&core::cl__max,"(max &rest nums)");
  expose_function("cl","logand",true,&core::cl__logand,"(&rest integers)");
  expose_function("cl","logior",true,&core::cl__logior,"(&rest integers)");
  expose_function("cl","logxor",true,&core::cl__logxor,"(&rest integers)");
  expose_function("cl","logeqv",true,&core::cl__logeqv,"(&rest integers)");
  expose_function("cl","logandc1",true,&core::cl__logandc1,"(a b)");
  expose_function("cl","logandc2",true,&core::cl__logandc2,"(a b)");
  expose_function("cl","logorc1",true,&core::cl__logorc1,"(a b)");
  expose_function("cl","logorc2",true,&core::cl__logorc2,"(a b)");
  expose_function("cl","lognot",true,&core::cl__lognot,"(a)");
  expose_function("cl","lognand",true,&core::cl__lognand,"(a b)");
  expose_function("cl","lognor",true,&core::cl__lognor,"(a b)");
  expose_function("cl","_TIMES_",true,&core::cl___TIMES_,"(&rest numbers)");
  expose_function("cl","_MINUS_",true,&core::cl___MINUS_,"(num &rest numbers)");
  expose_function("cl","_NE_",true,&core::cl___NE_,"(&rest args)");
  expose_function("cl","_EQ_",true,&core::cl___EQ_,"(&rest args)");
  expose_function("core","nan",true,&core::core__nan,"(num)");
  expose_function("cl","sqrt",true,&core::cl__sqrt,"(arg)");
  expose_function("cl","sin",true,&core::cl__sin,"(x)");
  expose_function("cl","cos",true,&core::cl__cos,"(x)");
  expose_function("cl","tan",true,&core::cl__tan,"(x)");
  expose_function("cl","sinh",true,&core::cl__sinh,"(x)");
  expose_function("cl","cosh",true,&core::cl__cosh,"(x)");
  expose_function("cl","tanh",true,&core::cl__tanh,"(x)");
  expose_function("cl","conjugate",true,&core::cl__conjugate,"(x)");
  expose_function("cl","exp",true,&core::cl__exp,"(x)");
  expose_function("cl","expt",true,&core::cl__expt,"(x y)");
  expose_function("cl","atan",true,&core::cl__atan,"(x &optional y)");
  expose_function("cl","log",true,&core::cl__log,"(number &optional base)");
  expose_function("core","log1p",true,&core::core__log1p,"(arg)");
  expose_function("cl","integer_length",true,&core::cl__integer_length,"(i)");
  expose_function("cl","get_universal_time",true,&core::cl__get_universal_time,"()");
  expose_function("core","asin",true,&core::core__asin,"(arg)");
  expose_function("core","acos",true,&core::core__acos,"(arg)");
  expose_function("core","asinh",true,&core::core__asinh,"(arg)");
  expose_function("core","acosh",true,&core::core__acosh,"(arg)");
  expose_function("core","atanh",true,&core::core__atanh,"(arg)");
  expose_function("cl","gcd",true,&core::cl__gcd,"(&rest nums)");
  expose_function("cl","lcm",true,&core::cl__lcm,"(&rest args)");
  expose_function("core","bignum_to_string",true,&core::core__bignum_to_string,"(buffer x base)");
  expose_function("core","integer_to_string",true,&core::core__integer_to_string,"(buffer integer base radix decimalp)");
  expose_function("cl","float",true,&core::cl__float,"(x &optional y)");
  expose_function("cl","numerator",true,&core::cl__numerator,"(x)");
  expose_function("cl","denominator",true,&core::cl__denominator,"(x)");
  expose_function("cl","floor",true,&core::cl__floor,"(x &optional y)");
  expose_function("cl","ceiling",true,&core::cl__ceiling,"(x &optional y)");
  expose_function("cl","truncate",true,&core::cl__truncate,"(x &optional y)");
  expose_function("cl","round",true,&core::cl__round,"(x &optional y)");
  expose_function("cl","mod",true,&core::cl__mod,"(x y)");
  expose_function("cl","rem",true,&core::cl__rem,"(x y)");
  expose_function("cl","decode_float",true,&core::cl__decode_float,"(x)");
  expose_function("cl","scale_float",true,&core::cl__scale_float,"(x y)");
  expose_function("cl","float_sign",true,&core::cl__float_sign,"(x &optional (y x yp))");
  expose_function("cl","float_digits",true,&core::cl__float_digits,"(x)");
  expose_function("cl","float_precision",true,&core::cl__float_precision,"(Float_sp x)");
  expose_function("cl","integer_decode_float",true,&core::cl__integer_decode_float,"(x)");
  expose_function("cl","complex",true,&core::cl__complex,"(r &optional (i 0))");
  expose_function("cl","realpart",true,&core::cl__realpart,"(x)");
  expose_function("cl","imagpart",true,&core::cl__imagpart,"(x)");
  expose_function("core","load_source",true,&core::core__load_source,"(source &optional verbose print external-format)");
  expose_function("cl","load",true,&core::cl__load,"(source &key (verbose *load-verbose*) (print *load-print*) (if-does-not-exist :error) (external-format :default) (search-list core::*load-search-list*))");
  expose_function("core","write_object",true,&core::core__write_object,"(obj &optional strm)");
  expose_function("cl","write",true,&core::cl__write,"(x &key ((:stream strm) nil) (array *print-array*) (base *print-base*) ((:case cas) *print-case*) (circle *print-circle*) (escape *print-escape*) (gensym *print-gensym*) (length *print-length*) (level *print-level*) (lines *print-lines*) (miser_width *print-miser-width*) (pprint_dispatch *print-pprint-dispatch*) (pretty *print-pretty*) (radix *print-radix*) (readably *print-readably*) (right_margin *print-right-margin*))");
  expose_function("core","print_unreadable_object_function",true,&core::core__print_unreadable_object_function,"(o stream type id function)");
  expose_function("cl","pprint",true,&core::cl__pprint,"(obj &optional stream)");
  expose_function("cl","princ",true,&core::cl__princ,"(obj &optional output-stream-desig)");
  expose_function("cl","prin1",true,&core::cl__prin1,"(obj &optional output-stream-desig)");
  expose_function("cl","print",true,&core::cl__print,"(obj &optional output-stream-desig)");
  expose_function("core","source_file_info",true,&core::core__source_file_info,"(name &optional source-debug-namestring (source-debug-offset 0) (use-lineno t))");
  expose_function("core","source_pos_info_filepos",true,&core::core__source_pos_info_filepos,"(source-pos-info)");
  expose_function("core","source_pos_info_lineno",true,&core::core__source_pos_info_lineno,"(source-pos-info)");
  expose_function("core","source_pos_info_column",true,&core::core__source_pos_info_column,"(source-pos-info)");
  expose_function("core","walk_to_find_source_info",true,&core::core__walk_to_find_source_info,"(arg)");
  expose_function("core","walk_to_assign_source_pos_info",true,&core::core__walk_to_assign_source_pos_info,"(obj top &optional stream)");
  expose_function("core","walk_to_find_source_pos_info",true,&core::core__walk_to_find_source_pos_info,"(arg &optional default-spi)");
  expose_function("core","dump_source_manager",true,&core::core__dump_source_manager,"(dumpAll)");
  expose_function("core","make_source_manager",true,&core::core__make_source_manager,"()");
  expose_function("core","fork",true,&core::core__fork,"()");
  expose_function("core","waitpid",true,&core::core__waitpid,"(pid options)");
  expose_function("core","getpid",true,&core::core__getpid,"()");
  expose_function("core","getppid",true,&core::core__getppid,"()");
  expose_function("ext","chdir",true,&core::ext__chdir,"(pathname)");
  expose_function("core","current_dir",true,&core::core__current_dir,"()");
  expose_function("core","file_kind",true,&core::core__file_kind,"(filename follow-links)");
  expose_function("core","readlink",true,&core::core__readlink,"(filename)");
  expose_function("core","file_truename",true,&core::core__file_truename,"(pathname filename follow-links)");
  expose_function("cl","truename",true,&core::cl__truename,"(orig-pathname)");
  expose_function("cl","rename_file",true,&core::cl__rename_file,"(oldn newn &key (if-exists :error))");
  expose_function("cl","delete_file",true,&core::cl__delete_file,"(file)");
  expose_function("cl","probe_file",true,&core::cl__probe_file,"(filespec)");
  expose_function("cl","file_write_date",true,&core::cl__file_write_date,"(pathspec)");
  expose_function("cl","file_author",true,&core::cl__file_author,"(file)");
  expose_function("cl","user_homedir_pathname",true,&core::cl__user_homedir_pathname,"(&optional host)");
  expose_function("core","mkstemp",true,&core::core__mkstemp,"(template)");
  expose_function("core","rmdir",true,&core::core__rmdir,"(directory)");
  expose_function("core","chmod",true,&core::core__chmod,"(file mode)");
  expose_function("core","copy_file",true,&core::core__copy_file,"(orig dest)");
  expose_function("cl","directory",true,&core::cl__directory,"(mask &key (resolve-symlinks t) &allow-other-keys)");
  expose_function("core","unix_daylight_saving_time",true,&core::core__unix_daylight_saving_time,"(unix-time)");
  expose_function("core","unix_get_local_time_zone",true,&core::core__unix_get_local_time_zone,"()");
  expose_function("core","mkdir",true,&core::core__mkdir,"(dir mode)");
  expose_function("core","function_lambda_list",true,&core::core__function_lambda_list,"(function)");
  expose_function("core","function_source_pos_info",true,&core::core__function_source_pos_info,"(function)");
  expose_function("core","set_kind",true,&core::core__set_kind,"(fn kind)");
  expose_function("cl","function_lambda_expression",true,&core::cl__function_lambda_expression,"(fn)");
  expose_function("core","function_source_code",true,&core::core__function_source_code,"(fn)");
  expose_function("cl","rassoc",true,&core::cl__rassoc,"(item a-list &key test test-not key)");
  expose_function("cl","nth",true,&core::cl__nth,"(idx arg)");
  expose_function("cl","nthcdr",true,&core::cl__nthcdr,"(idx arg)");
  expose_function("cl","copy_list",true,&core::cl__copy_list,"(arg)");
  expose_function("cl","butlast",true,&core::cl__butlast,"(list &optional (n 1))");
  expose_function("cl","nbutlast",true,&core::cl__nbutlast,"(list &optional (n 1))");
  expose_function("cl","list",true,&core::cl__list,"(&rest objects)");
  expose_function("cl","listSTAR",true,&core::cl__listSTAR,"(&rest objects)");
  expose_function("cl","last",true,&core::cl__last,"(list &optional (on 1))");
  expose_function("cl","nconc",true,&core::cl__nconc,"(&rest lists)");
  expose_function("cl","revappend",true,&core::cl__revappend,"(list tail)");
  expose_function("cl","nreconc",true,&core::cl__nreconc,"(list tail)");
  expose_function("core","classify_return_from_symbol",true,&core::core__classify_return_from_symbol,"(env sym)");
  expose_function("core","environment_length",true,&core::core__environment_length,"(frame)");
  expose_function("core","environment_debug_names",true,&core::core__environment_debug_names,"(frame)");
  expose_function("core","environment_debug_values",true,&core::core__environment_debug_values,"(frame)");
  expose_function("core","lexical_function",true,&core::core__lexical_function,"(name env)");
  expose_function("core","lexical_macro_function",true,&core::core__lexical_macro_function,"(name env)");
  expose_function("core","environment_activation_frame",true,&core::core__environment_activation_frame,"(env)");
  expose_function("core","environment_list",true,&core::core__environment_list,"(env)");
  expose_function("core","environment_type_list",true,&core::core__environment_type_list,"(env)");
  expose_function("core","runtime_environment",true,&core::core__runtime_environment,"(env)");
  expose_function("core","environment_id",true,&core::core__environment_id,"(env)");
  expose_function("core","lispify_name",true,&core::core__lispify_name,"(name)");
  expose_function("core","process_macro_lambda_list",true,&core::core__process_macro_lambda_list,"(lambda-list)");
  expose_function("core","process_single_dispatch_lambda_list",true,&core::core__process_single_dispatch_lambda_list,"(lambda-list)");
  expose_function("core","process_lambda_list",true,&core::core__process_lambda_list,"(vl context)");
  expose_function("core","make_string_output_stream_from_string",true,&core::core__make_string_output_stream_from_string,"(s)");
  expose_function("cl","make_string_output_stream",true,&core::cl__make_string_output_stream,"(&key (element-type 'character))");
  expose_function("cl","get_output_stream_string",true,&core::cl__get_output_stream_string,"(strm)");
  expose_function("cl","make_string_input_stream",true,&core::cl__make_string_input_stream,"(strng &optional (istart 0) iend)");
  expose_function("cl","make_two_way_stream",true,&core::cl__make_two_way_stream,"(istrm ostrm)");
  expose_function("cl","two_way_stream_input_stream",true,&core::cl__two_way_stream_input_stream,"(strm)");
  expose_function("cl","two_way_stream_output_stream",true,&core::cl__two_way_stream_output_stream,"(strm)");
  expose_function("cl","make_broadcast_stream",true,&core::cl__make_broadcast_stream,"(&rest ap)");
  expose_function("cl","make_echo_stream",true,&core::cl__make_echo_stream,"(strm1 strm2)");
  expose_function("cl","make_concatenated_stream",true,&core::cl__make_concatenated_stream,"(&rest ap)");
  expose_function("cl","make_synonym_stream",true,&core::cl__make_synonym_stream,"(strm1)");
  expose_function("cl","synonym_stream_symbol",true,&core::cl__synonym_stream_symbol,"(s)");
  expose_function("core","set_buffering_mode",true,&core::core__set_buffering_mode,"(stream mode)");
  expose_function("core","file_stream_fd",true,&core::core__file_stream_fd,"(s)");
  expose_function("core","do_write_sequence",true,&core::core__do_write_sequence,"(seq stream start end)");
  expose_function("cl","read_sequence",true,&core::cl__read_sequence,"(sequence stream &key (start 0) end)");
  expose_function("cl","file_length",true,&core::cl__file_length,"(strm)");
  expose_function("cl","file_position",true,&core::cl__file_position,"(file-stream &optional position)");
  expose_function("cl","input_stream_p",true,&core::cl__input_stream_p,"(strm)");
  expose_function("cl","output_stream_p",true,&core::cl__output_stream_p,"(arg)");
  expose_function("cl","interactive_stream_p",true,&core::cl__interactive_stream_p,"(arg)");
  expose_function("cl","streamp",true,&core::cl__streamp,"(arg)");
  expose_function("cl","open",true,&core::cl__open,"(filename &key (direction :input) (element-type 'base-char) (if-exists nil iesp) (if-does-not-exist nil idnesp) (external-format :default) (cstream T))");
  expose_function("cl","close",true,&core::cl__close,"(strm &key abort)");
  expose_function("core","stream_linenumber",true,&core::core__stream_linenumber,"(stream)");
  expose_function("core","stream_column",true,&core::core__stream_column,"(stream)");
  expose_function("core","input_stream_source_pos_info",true,&core::core__input_stream_source_pos_info,"(arg)");
  expose_function("cl","read_byte",true,&core::cl__read_byte,"(&optional strm (eof_error_p t) eof_value)");
  expose_function("cl","peek_char",true,&core::cl__peek_char,"(&optional peek_type strm (eof_errorp t) eof_value recursivep)");
  expose_function("cl","read_char",true,&core::cl__read_char,"(&optional strm (eof_error_p t) eof_value recursive_p)");
  expose_function("cl","read_char_no_hang",true,&core::cl__read_char_no_hang,"(&optional strm (eof_error_p t) eof_value recursive_p)");
  expose_function("cl","read_from_string",true,&core::cl__read_from_string,"(content &optional (eof-error-p t) eof-value &key (start 0) end preserve-whitespace)");
  expose_function("cl","read_line",true,&core::cl__read_line,"(&optional input-stream (eof-error-p t) eof-value recursive-p)");
  expose_function("cl","terpri",true,&core::cl__terpri,"(&optional output-stream)");
  expose_function("cl","fresh_line",true,&core::cl__fresh_line,"(&optional outputStream)");
  expose_function("cl","write_string",true,&core::cl__write_string,"(string &optional output-stream &key (start 0) end)");
  expose_function("cl","write_line",true,&core::cl__write_line,"(string &optional output-stream &key (start 0) end)");
  expose_function("cl","write_byte",true,&core::cl__write_byte,"(byte &optional output-stream)");
  expose_function("cl","write_char",true,&core::cl__write_char,"(string &optional output-stream)");
  expose_function("cl","clear_input",true,&core::cl__clear_input,"(&optional dstrm)");
  expose_function("cl","clear_output",true,&core::cl__clear_output,"(&optional dstrm)");
  expose_function("cl","listen",true,&core::cl__listen,"(&optional dstrm)");
  expose_function("cl","force_output",true,&core::cl__force_output,"(&optional strm)");
  expose_function("cl","finish_output",true,&core::cl__finish_output,"(&optional strm)");
  expose_function("cl","unread_char",true,&core::cl__unread_char,"(char &optional strm)");
  expose_function("core","file_column",true,&core::core__file_column,"(arg)");
  expose_function("cl","write_sequence",true,&core::cl__write_sequence,"(seq stream &key (start 0) end)");
  expose_function("core","bit_array_op",true,&core::core__bit_array_op,"(op x y &optional r)");
  expose_function("cl","boole",true,&core::cl__boole,"(op arg1 arg2)");
  expose_function("core","list_of_all_special_operators",true,&core::core__list_of_all_special_operators,"()");
  expose_function("core","low_level_repl",true,&core::core__low_level_repl,"()");
  expose_function("core","stack_used",true,&core::core__stack_used,"()");
  expose_function("core","stack_monitor",true,&core::core__stack_monitor,"()");
  expose_function("core","stack_limit",true,&core::core__stack_limit,"()");
  expose_function("core","setup_stack_monitor",true,&core::core__setup_stack_monitor,"(&key warn-size sample-size)");
  expose_function("core","exit",true,&core::core__exit,"(&optional (exit-value 0))");
  expose_function("core","quit",true,&core::core__quit,"(&optional (exit-value 0))");
  expose_function("cl","acons",true,&core::cl__acons,"(key datum alist)");
  expose_function("cl","assoc",true,&core::cl__assoc,"(item alist &key key test test-not)");
  expose_function("cl","member",true,&core::cl__member,"(item list &key key test test-not)");
  expose_function("core","member_test",true,&core::core__member_test,"(item list &key key test test-not)");
  expose_function("core","member1",true,&core::core__member1,"(item list test test-not key)");
  expose_function("core","getline",true,&core::core__getline,"(&optional (prompt \"\"))");
  expose_function("cl","find_class",true,&core::cl__find_class,"(symbol &optional (errorp t) environment)");
  expose_function("core","setf_find_class",true,&core::core__setf_find_class,"(new-value name)");
  expose_function("core","find_file_in_lisp_path",true,&core::core__find_file_in_lisp_path,"(partialPath)");
  expose_function("cl","find_package",true,&core::cl__find_package,"(name_desig)");
  expose_function("core","select_package",true,&core::core__select_package,"(package-designator)");
  expose_function("core","mpi_enabled",true,&core::core__mpi_enabled,"()");
  expose_function("core","mpi_rank",true,&core::core__mpi_rank,"()");
  expose_function("core","mpi_size",true,&core::core__mpi_size,"()");
  expose_function("cl","macroexpand_1",true,&core::cl__macroexpand_1,"(form &optional env)");
  expose_function("cl","macroexpand",true,&core::cl__macroexpand,"(form &optional env)");
  expose_function("cl","apropos",true,&core::cl__apropos,"(string_desig &optional package_desig)");
  expose_function("core","sorted",true,&core::core__sorted,"(unsorted)");
  expose_function("cl","sort",true,&core::cl__sort,"(sequence predicate)");
  expose_function("core","source_file_name",true,&core::core__source_file_name,"()");
  expose_function("core","source_line_column",true,&core::core__source_line_column,"()");
  expose_function("core","script_dir",true,&core::core__script_dir,"()");
  expose_function("core","library_path",true,&core::core__library_path,"(&optional rel-path)");
  expose_function("core","lisp_code_path",true,&core::core__lisp_code_path,"(&optional rel-path)");
  expose_function("core","database_dir",true,&core::core__database_dir,"()");
  expose_function("core","set_current_working_directory",true,&core::core__set_current_working_directory,"(dir)");
  expose_function("core","is_top_level_script",true,&core::core__is_top_level_script,"()");
  expose_function("core","debug_log_on",true,&core::core__debug_log_on,"()");
  expose_function("core","debug_log_off",true,&core::core__debug_log_off,"()");
  expose_function("cl","export",true,&core::cl__export,"(symDes &optional (packageDes *package*))");
  expose_function("core","export_to_python",true,&core::core__export_to_python,"(symbolsDesig)");
  expose_function("cl","intern",true,&core::cl__intern,"(symbol_name &optional (package-desig *package*))");
  expose_function("core","universal_error_handler",true,&core::core__universal_error_handler,"(continue-string datum initializers)");
  expose_function("core","invoke_internal_debugger",true,&core::core__invoke_internal_debugger,"(&optional condition)");
  expose_function("core","single_dispatch_generic_function_table",true,&core::core__single_dispatch_generic_function_table,"()");
  expose_function("core","invoke_internal_debugger_from_gdb",true,&core::core__invoke_internal_debugger_from_gdb,"()");
  expose_function("cl","error",true,&core::cl__error,"(datum &rest arguments)");
  expose_function("cl","cerror",true,&core::cl__cerror,"(cformat eformat &rest arguments)");
  expose_function("core","is_assignable_to",true,&core::core__is_assignable_to,"(tag secondArgument)");
  expose_function("core","is_sub_class_of",true,&core::core__is_sub_class_of,"(tag mc)");
  expose_function("core","repr",true,&core::core__repr,"(arg)");
  expose_function("cl","not",true,&core::cl__not,"(arg)");
  expose_function("core","all_source_files",true,&core::core__all_source_files,"()");
  expose_function("core","make_cxx_object",true,&core::core__make_cxx_object,"(class-name &rest args)");
  expose_function("core","fieldsp",true,&core::core__fieldsp,"(obj)");
  expose_function("core","print_cxx_object",true,&core::core__print_cxx_object,"(obj stream)");
  expose_function("core","low_level_describe",true,&core::core__low_level_describe,"(arg)");
  expose_function("cl","copy_tree",true,&core::cl__copy_tree,"(arg)");
  expose_function("core","implementation_class",true,&core::core__implementation_class,"(arg)");
  expose_function("core","instance_class",true,&core::core__instance_class,"(arg)");
  expose_function("core","class_name_as_string",true,&core::core__class_name_as_string,"(arg)");
  expose_function("core","instance_sig",true,&core::core__instance_sig,"(arg)");
  expose_function("core","instance_sig_set",true,&core::core__instance_sig_set,"(arg)");
  expose_function("core","instance_set",true,&core::core__instance_set,"(obj idx val)");
  expose_function("core","instance_ref",true,&core::core__instance_ref,"(obj idx)");
  expose_function("core","instancep",true,&core::core__instancep,"(obj)");
  expose_function("core","is_nil",true,&core::core__is_nil,"(arg)");
  expose_function("core","encode",true,&core::core__encode,"(arg)");
  expose_function("core","decode",true,&core::core__decode,"(obj arg)");
  expose_function("core","sl_boundp",true,&core::core__sl_boundp,"(arg)");
  expose_function("core","deep_copy",true,&core::core__deep_copy,"(obj)");
  expose_function("core","clock_gettime_nanoseconds",true,&core::core__clock_gettime_nanoseconds,"()");
  expose_function("core","test_profile_timer",true,&core::core__test_profile_timer,"(delay)");
  expose_function("core","write_ugly_object",true,&core::core__write_ugly_object,"(obj &optional strm)");
  expose_function("core","make_regex",true,&core::core__make_regex,"(regex-str)");
  expose_function("core","pointer_release",true,&core::core__pointer_release,"(arg)");
  expose_function("core","pointer_delete",true,&core::core__pointer_delete,"(arg)");
  expose_function("core","pointer_address",true,&core::core__pointer_address,"(arg)");
  expose_function("cl","set_syntax_from_char",true,&core::cl__set_syntax_from_char,"(tochar fromchar &optional (toreadtable *readtable*) (fromreadtable nil fromreadtablep))");
  expose_function("cl","make_dispatch_macro_character",true,&core::cl__make_dispatch_macro_character,"(char &optional non-terminating-p (readtable *readtable*))");
  expose_function("cl","get_macro_character",true,&core::cl__get_macro_character,"(char &optional readtable)");
  expose_function("cl","copy_readtable",true,&core::cl__copy_readtable,"(&optional (from-readtable cl:*readtable*) to-readtable)");
  expose_function("cl","readtable_case",true,&core::cl__readtable_case,"(readtable)");
  expose_function("core","readtable_case_set",true,&core::core__readtable_case_set,"(readtable mode)");
  expose_function("cl","set_dispatch_macro_character",true,&core::cl__set_dispatch_macro_character,"(dispChar subChar newFunction &optional (readtable *readtable*))");
  expose_function("cl","get_dispatch_macro_character",true,&core::cl__get_dispatch_macro_character,"(dispChar subChar &optional (readtable *readtable*))");
  expose_function("cl","set_macro_character",true,&core::cl__set_macro_character,"(ch func_desig &optional non-terminating-p (readtable *readtable*))");
  expose_function("core","reader_double_quote_string",true,&core::core__reader_double_quote_string,"(stream chr)");
  expose_function("core","reader_backquoted_expression",true,&core::core__reader_backquoted_expression,"(sin ch)");
  expose_function("core","reader_comma_form",true,&core::core__reader_comma_form,"(sin ch)");
  expose_function("core","reader_list_allow_consing_dot",true,&core::core__reader_list_allow_consing_dot,"(sin ch)");
  expose_function("core","reader_error_unmatched_close_parenthesis",true,&core::core__reader_error_unmatched_close_parenthesis,"(sin ch)");
  expose_function("core","reader_quote",true,&core::core__reader_quote,"(sin ch)");
  expose_function("core","reader_skip_semicolon_comment",true,&core::core__reader_skip_semicolon_comment,"(sin ch)");
  expose_function("core","dispatch_macro_character",true,&core::core__dispatch_macro_character,"(sin ch)");
  expose_function("core","sharp_backslash",true,&core::core__sharp_backslash,"(stream ch num)");
  expose_function("core","sharp_dot",true,&core::core__sharp_dot,"(stream ch num)");
  expose_function("core","sharp_single_quote",true,&core::core__sharp_single_quote,"(stream ch num)");
  expose_function("core","sharp_left_parenthesis",true,&core::core__sharp_left_parenthesis,"(stream ch num)");
  expose_function("core","sharp_asterisk",true,&core::core__sharp_asterisk,"(stream ch num)");
  expose_function("core","sharp_colon",true,&core::core__sharp_colon,"(stream ch num)");
  expose_function("core","sharp_r",true,&core::core__sharp_r,"(stream subchar radix)");
  expose_function("core","sharp_b",true,&core::core__sharp_b,"(stream ch num)");
  expose_function("core","sharp_o",true,&core::core__sharp_o,"(stream ch num)");
  expose_function("core","sharp_x",true,&core::core__sharp_x,"(stream ch num)");
  expose_function("core","sharp_c",true,&core::core__sharp_c,"(stream ch num)");
  expose_function("core","sharp_a",true,&core::core__sharp_a,"(stream ch num)");
  expose_function("core","sharp_s",true,&core::core__sharp_s,"(stream ch num)");
  expose_function("core","sharp_p",true,&core::core__sharp_p,"(stream ch num)");
  expose_function("core","reader_feature_p",true,&core::core__reader_feature_p,"(feature-test)");
  expose_function("core","sharp_plus",true,&core::core__sharp_plus,"(stream ch num)");
  expose_function("core","sharp_minus",true,&core::core__sharp_minus,"(stream ch num)");
  expose_function("core","sharp_vertical_bar",true,&core::core__sharp_vertical_bar,"(stream ch num)");
  expose_function("core","float_to_digits",true,&core::core__float_to_digits,"(digits number position relativep)");
  expose_function("cl","pathname",true,&core::cl__pathname,"(arg)");
  expose_function("cl","merge_pathnames",true,&core::cl__merge_pathnames,"(arg &optional (default-pathname *default-pathname-defaults*) (default-version :newest))");
  expose_function("cl","wild_pathname_p",true,&core::cl__wild_pathname_p,"(pathname &optional component)");
  expose_function("core","coerce_to_file_pathname",true,&core::core__coerce_to_file_pathname,"(tpathname)");
  expose_function("core","coerce_to_physical_pathname",true,&core::core__coerce_to_physical_pathname,"(x)");
  expose_function("core","coerce_to_filename",true,&core::core__coerce_to_filename,"(pathname-orig)");
  expose_function("cl","namestring",true,&core::cl__namestring,"(pathname)");
  expose_function("cl","parse_namestring",true,&core::cl__parse_namestring,"(thing &optional host defaults &key (start 0) end junk-allowed)");
  expose_function("cl","make_pathname",true,&core::cl__make_pathname,"(&key (host nil hostp) (device nil devicep) (directory nil directoryp) (name nil namep) (type nil typep) (version nil versionp) ((:case scase) :local) defaults)");
  expose_function("cl","pathname_host",true,&core::cl__pathname_host,"(pname &key ((:case scase) :local))");
  expose_function("cl","pathname_device",true,&core::cl__pathname_device,"(pname &key ((:case scase) :local))");
  expose_function("cl","pathname_directory",true,&core::cl__pathname_directory,"(pname &key ((:case scase) :local))");
  expose_function("cl","pathname_name",true,&core::cl__pathname_name,"(pname &key ((:case scase) :local))");
  expose_function("cl","pathname_type",true,&core::cl__pathname_type,"(pname &key ((:case scase) :local))");
  expose_function("cl","pathname_version",true,&core::cl__pathname_version,"(pname)");
  expose_function("cl","file_namestring",true,&core::cl__file_namestring,"(tpname)");
  expose_function("cl","directory_namestring",true,&core::cl__directory_namestring,"(tpname)");
  expose_function("cl","host_namestring",true,&core::cl__host_namestring,"(tpname)");
  expose_function("cl","enough_namestring",true,&core::cl__enough_namestring,"(tpath &optional defaults)");
  expose_function("cl","pathname_match_p",true,&core::cl__pathname_match_p,"(tpath tmask)");
  expose_function("core","pathname_translations",true,&core::core__pathname_translations,"(&optional (host nil hostp) set)");
  expose_function("cl","translate_pathname",true,&core::cl__translate_pathname,"(source from to &key ((:case scase) :local))");
  expose_function("cl","translate_logical_pathname",true,&core::cl__translate_logical_pathname,"(source &key)");
  expose_function("core","signal_simple_error",true,&core::core__signal_simple_error,"(base-condition continue-message format-control format-args &rest args)");
  expose_function("core","wrong_type_argument",true,&core::core__wrong_type_argument,"(source-file lineno function narg value type)");
  expose_function("core","wrong_type_nth_arg",true,&core::core__wrong_type_nth_arg,"(source-file lineno function narg value type)");
  expose_function("core","wrong_index",true,&core::core__wrong_index,"(source-file lineno function narg value type)");
  expose_function("cl","reader_error",true,&core::cl__reader_error,"(sourceFileName lineno functionName fmt fmtargs stream)");
  expose_function("core","inherit_default_allocator",true,&core::core__inherit_default_allocator,"(class directSuperclasses)");
  expose_function("core","allocate_raw_class",true,&core::core__allocate_raw_class,"(original meta-class slots &optional name)");
  expose_function("core","subclassp",true,&core::core__subclassp,"(low high)");
  expose_function("core","is_string",true,&core::core__is_string,"(arg)");
  expose_function("core","is_array",true,&core::core__is_array,"(arg)");
  expose_function("core","test_val",true,&core::core__test_val,"(arg)");
  expose_function("core","base_char_p",true,&core::core__base_char_p,"(arg)");
  expose_function("core","simple_string_p",true,&core::core__simple_string_p,"(arg)");
  expose_function("core","double_float_p",true,&core::core__double_float_p,"(arg)");
  expose_function("cl","functionp",true,&core::cl__functionp,"(arg)");
  expose_function("core","interpreted_function_p",true,&core::core__interpreted_function_p,"(arg)");
  expose_function("cl","packagep",true,&core::cl__packagep,"(arg)");
  expose_function("core","built_in_class_p",true,&core::core__built_in_class_p,"(arg)");
  expose_function("core","cxx_instance_p",true,&core::core__cxx_instance_p,"(arg)");
  expose_function("core","lambda_list_handler_p",true,&core::core__lambda_list_handler_p,"(arg)");
  expose_function("cl","numberp",true,&core::cl__numberp,"(arg)");
  expose_function("core","ratio_p",true,&core::core__ratio_p,"(arg)");
  expose_function("cl","random_state_p",true,&core::cl__random_state_p,"(arg)");
  expose_function("core","long_float_p",true,&core::core__long_float_p,"(arg)");
  expose_function("core","short_float_p",true,&core::core__short_float_p,"(arg)");
  expose_function("core","single_float_p",true,&core::core__single_float_p,"(arg)");
  expose_function("core","path_p",true,&core::core__path_p,"(arg)");
  expose_function("cl","bit_vector_p",true,&core::cl__bit_vector_p,"(arg)");
  expose_function("cl","hash_table_p",true,&core::cl__hash_table_p,"(arg)");
  expose_function("cl","readtablep",true,&core::cl__readtablep,"(arg)");
  expose_function("core","structure_object_p",true,&core::core__structure_object_p,"(arg)");
  expose_function("core","single_dispatch_generic_function_p",true,&core::core__single_dispatch_generic_function_p,"(arg)");
  expose_function("core","activation_frame_p",true,&core::core__activation_frame_p,"(arg)");
  expose_function("core","external_object_p",true,&core::core__external_object_p,"(arg)");
  expose_function("cl","simple_bit_vector_p",true,&core::cl__simple_bit_vector_p,"(arg)");
  expose_function("cl","simple_vector_p",true,&core::cl__simple_vector_p,"(arg)");
  expose_function("cl","compiled_function_p",true,&core::cl__compiled_function_p,"(arg)");
  expose_function("core","generic_function_p",true,&core::core__generic_function_p,"(arg)");
  expose_function("core","proper_list_p",true,&core::core__proper_list_p,"(arg)");
  expose_function("cl","pathnamep",true,&core::cl__pathnamep,"(arg)");
  expose_function("core","logical_pathname_p",true,&core::core__logical_pathname_p,"(arg)");
  expose_function("core","search_string",true,&core::core__search_string,"(str1 start1 end1 str2 start2 end2)");
  expose_function("cl","rename_package",true,&core::cl__rename_package,"(package new-name &optional nick-names)");
  expose_function("cl","package_nicknames",true,&core::cl__package_nicknames,"(pkg)");
  expose_function("cl","unintern",true,&core::cl__unintern,"(symbol &optional (package *package*))");
  expose_function("cl","find_symbol",true,&core::cl__find_symbol,"(sym &optional (package *package*))");
  expose_function("cl","make_package",true,&core::cl__make_package,"(package-name &key nicknames (use (list \"CL\")))");
  expose_function("cl","list_all_packages",true,&core::cl__list_all_packages,"()");
  expose_function("cl","use_package",true,&core::cl__use_package,"(packages-to-use-desig &optional (package-desig *package*))");
  expose_function("cl","unuse_package",true,&core::cl__unuse_package,"(packages-to-unuse-desig &optional (package-desig *package*))");
  expose_function("cl","delete_package",true,&core::cl__delete_package,"(packages-to-unuse-desig &optional (package-desig *package*))");
  expose_function("cl","package_shadowing_symbols",true,&core::cl__package_shadowing_symbols,"(package_desig)");
  expose_function("cl","import",true,&core::cl__import,"(symbols-desig &optional (package-desig *package*))");
  expose_function("cl","shadow",true,&core::cl__shadow,"(symbol-names-desig &optional (package_desig *package*))");
  expose_function("cl","shadowing_import",true,&core::cl__shadowing_import,"(symbol-names-desig &optional (package-desig *package*))");
  expose_function("cl","gentemp",true,&core::cl__gentemp,"(&optional prefix (package *package*))");
  expose_function("cl","package_use_list",true,&core::cl__package_use_list,"(package-designator)");
  expose_function("cl","package_used_by_list",true,&core::cl__package_used_by_list,"(pkg)");
  expose_function("cl","package_name",true,&core::cl__package_name,"(pkg)");
  expose_function("core","calculate_missing_common_lisp_symbols",true,&core::core__calculate_missing_common_lisp_symbols,"()");
  expose_function("cl","fill_pointer",true,&core::cl__fill_pointer,"(vec)");
  expose_function("cl","array_displacement",true,&core::cl__array_displacement,"(core::array)");
  expose_function("cl","upgraded_array_element_type",true,&core::cl__upgraded_array_element_type,"(core::type &optional core::env)");
  expose_function("core","copy_subarray",true,&core::core__copy_subarray,"(out outStart in inStart len)");
  expose_function("core","aset",true,&core::core__aset,"(array &rest indices-value)");
  expose_function("core","put_f",true,&core::core__put_f,"(plist value indicator)");
  expose_function("cl","getf",true,&core::cl__getf,"(plist indicator &optional default-value)");
  expose_function("core","rem_f",true,&core::core__rem_f,"(plist indicator)");
  expose_function("cl","cons",true,&core::cl__cons,"(object1 object2)");
  expose_function("cl","rplaca",true,&core::cl__rplaca,"(c o)");
  expose_function("cl","rplacd",true,&core::cl__rplacd,"(c o)");
  expose_function("cl","make_list",true,&core::cl__make_list,"(osize &key initial_element)");
  expose_function("core","append2",true,&core::core__append2,"(l1 l2)");
  expose_function("cl","symbol_plist",true,&core::cl__symbol_plist,"(sym)");
  expose_function("cl","get",true,&core::cl__get,"(sym indicator &optional default)");
  expose_function("core","setf_symbol_plist",true,&core::core__setf_symbol_plist,"(sym plist)");
  expose_function("core","putprop",true,&core::core__putprop,"(sym val indicator)");
  expose_function("cl","boundp",true,&core::cl__boundp,"(arg)");
  expose_function("cl","symbol_package",true,&core::cl__symbol_package,"(arg)");
  expose_function("cl","symbol_function",true,&core::cl__symbol_function,"(arg)");
  expose_function("cl","symbol_name",true,&core::cl__symbol_name,"(arg)");
  expose_function("cl","symbol_value",true,&core::cl__symbol_value,"(arg)");
  expose_function("core","symbol_value_address",true,&core::core__symbol_value_address,"(arg)");
  expose_function("cl","make_symbol",true,&core::cl__make_symbol,"(name)");
  expose_function("cl","make_condition",true,&core::cl__make_condition,"(type &rest slot-initializations)");
  expose_function("core","condition_message",true,&core::core__condition_message,"(c)");
  expose_function("core","iterator_unsafe_element",true,&core::core__iterator_unsafe_element,"(it)");
  expose_function("core","iterator_step",true,&core::core__iterator_step,"(it)");
  expose_function("core","put_sysprop",true,&core::core__put_sysprop,"(key area value)");
  expose_function("core","get_sysprop",true,&core::core__get_sysprop,"(key area)");
  expose_function("core","rem_sysprop",true,&core::core__rem_sysprop,"(key area)");
  expose_function("core","bformat",true,&core::core__bformat,"(destination control &rest args)");
  expose_function("cl","format",true,&core::cl__format,"(destination control &rest args)");
  expose_function("core","backquote_append",true,&core::core__backquote_append,"(&rest lists)");
  expose_function("core","backquote_completely_process",true,&core::core__backquote_completely_process,"(x)");
  expose_function("core","backquote_process",true,&core::core__backquote_process,"(ox)");
  expose_function("core","backquote_bracket",true,&core::core__backquote_bracket,"(x)");
  expose_function("core","backquote_splicing_frob",true,&core::core__backquote_splicing_frob,"(x)");
  expose_function("core","backquote_frob",true,&core::core__backquote_frob,"(x)");
  expose_function("core","backquote_maptree",true,&core::core__backquote_maptree,"(op x)");
  expose_function("core","backquote_simplify",true,&core::core__backquote_simplify,"(x)");
  expose_function("core","backquote_simplify_args",true,&core::core__backquote_simplify_args,"(x)");
  expose_function("core","backquote_null_or_quoted",true,&core::core__backquote_null_or_quoted,"(x)");
  expose_function("core","backquote_attach_append",true,&core::core__backquote_attach_append,"(op item result)");
  expose_function("core","backquote_attach_conses",true,&core::core__backquote_attach_conses,"(items result)");
  expose_function("core","backquote_remove_tokens",true,&core::core__backquote_remove_tokens,"(x)");
  expose_function("core","record_cons",true,&core::core__record_cons,"(record key sub-key)");
  expose_function("core","record_field",true,&core::core__record_field,"(record key sub-key)");
  expose_function("core","set_record_field",true,&core::core__set_record_field,"(record key sub-key value)");
  expose_function("core","rem_record_field",true,&core::core__rem_record_field,"(record key sub-key)");
  expose_function("ext","annotate",true,&core::ext__annotate,"(object key sub-key value)");
  expose_function("core","ensure_documentation",true,&core::core__ensure_documentation,"(sub-key symbol value)");
  expose_function("core","nread",true,&core::core__nread,"(sin &optional (eof-error-p t) eof-value)");
  expose_function("core","ensure_single_dispatch_generic_function",true,&core::core__ensure_single_dispatch_generic_function,"(gfname llhandler)");
  expose_function("core","ensure_single_dispatch_method",true,&core::core__ensure_single_dispatch_method,"(gfname receiver-class &key lambda-list-handler declares (docstring \"\") body )");
  expose_function("core","make_structure",true,&core::core__make_structure,"(type &rest slot_values)");
  expose_function("cl","copy_structure",true,&core::cl__copy_structure,"(arg)");
  expose_function("core","structure_ref",true,&core::core__structure_ref,"(obj name idx)");
  expose_function("core","structure_set",true,&core::core__structure_set,"(struct type idx val)");
  expose_function("core","structurep",true,&core::core__structurep,"(arg)");
  expose_function("core","structure_subtypep",true,&core::core__structure_subtypep,"(x y)");
  expose_function("cl","lower_case_p",true,&core::cl__lower_case_p,"(arg)");
  expose_function("cl","upper_case_p",true,&core::cl__upper_case_p,"(arg)");
  expose_function("cl","both_case_p",true,&core::cl__both_case_p,"(arg)");
  expose_function("cl","alphanumericp",true,&core::cl__alphanumericp,"(char)");
  expose_function("cl","char_upcase",true,&core::cl__char_upcase,"(char)");
  expose_function("cl","char_downcase",true,&core::cl__char_downcase,"(char)");
  expose_function("cl","char_LT_",true,&core::cl__char_LT_,"(&rest args)");
  expose_function("cl","char_GT_",true,&core::cl__char_GT_,"(&rest args)");
  expose_function("cl","char_LE_",true,&core::cl__char_LE_,"(&rest args)");
  expose_function("cl","char_GE_",true,&core::cl__char_GE_,"(&rest args)");
  expose_function("cl","char_lessp",true,&core::cl__char_lessp,"(&rest args)");
  expose_function("cl","char_greaterp",true,&core::cl__char_greaterp,"(&rest args)");
  expose_function("cl","char_not_greaterp",true,&core::cl__char_not_greaterp,"(&rest args)");
  expose_function("cl","char_not_lessp",true,&core::cl__char_not_lessp,"(&rest args)");
  expose_function("cl","char_NE_",true,&core::cl__char_NE_,"(&rest args)");
  expose_function("cl","char_EQ_",true,&core::cl__char_EQ_,"(&rest args)");
  expose_function("cl","char_not_equal",true,&core::cl__char_not_equal,"(&rest args)");
  expose_function("cl","char_equal",true,&core::cl__char_equal,"(&rest args)");
  expose_function("cl","standard_char_p",true,&core::cl__standard_char_p,"(ch)");
  expose_function("cl","alpha_char_p",true,&core::cl__alpha_char_p,"(ch)");
  expose_function("cl","digit_char_p",true,&core::cl__digit_char_p,"(c &optional (radix 10))");
  expose_function("cl","name_char",true,&core::cl__name_char,"(sname)");
  expose_function("cl","char_name",true,&core::cl__char_name,"(och)");
  expose_function("cl","char_code",true,&core::cl__char_code,"(och)");
  expose_function("cl","char_int",true,&core::cl__char_int,"(och)");
  expose_function("cl","code_char",true,&core::cl__code_char,"(och)");
  expose_function("cl","string_trim",true,&core::cl__string_trim,"(charbag str)");
  expose_function("cl","string_left_trim",true,&core::cl__string_left_trim,"(charbag str)");
  expose_function("cl","string_right_trim",true,&core::cl__string_right_trim,"(charbag str)");
  expose_function("cl","string_upcase",true,&core::cl__string_upcase,"(arg)");
  expose_function("cl","char",true,&core::cl__char,"(str idx)");
  expose_function("cl","string_downcase",true,&core::cl__string_downcase,"(arg)");
  expose_function("cl","nstring_upcase",true,&core::cl__nstring_upcase,"(arg)");
  expose_function("cl","nstring_downcase",true,&core::cl__nstring_downcase,"(arg)");
  expose_function("cl","string",true,&core::cl__string,"(arg)");
  expose_function("cl","string_EQ_",true,&core::cl__string_EQ_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_NE_",true,&core::cl__string_NE_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_LT_",true,&core::cl__string_LT_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_GT_",true,&core::cl__string_GT_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_LE_",true,&core::cl__string_LE_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_GE_",true,&core::cl__string_GE_,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_equal",true,&core::cl__string_equal,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_not_equal",true,&core::cl__string_not_equal,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_lessp",true,&core::cl__string_lessp,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_greaterp",true,&core::cl__string_greaterp,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_not_greaterp",true,&core::cl__string_not_greaterp,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","string_not_lessp",true,&core::cl__string_not_lessp,"(strdes1 strdes2 &key (start1 0) end1 (start2 0) end2)");
  expose_function("cl","make_string",true,&core::cl__make_string,"(size &key initial-element (element-type 'character))");
  expose_function("cl","schar",true,&core::cl__schar,"(str index)");
  expose_function("core","char_set",true,&core::core__char_set,"(str index c)");
  expose_function("core","schar_set",true,&core::core__schar_set,"(str index c)");
  expose_function("cl","parse_integer",true,&core::cl__parse_integer,"(string &key (start 0) end (radix 10) junk-allowed)");
  expose_function("cl","length",true,&core::cl__length,"(arg)");
  expose_function("cl","elt",true,&core::cl__elt,"(sequence index)");
  expose_function("cl","make_sequence",true,&core::cl__make_sequence,"(type size &key (initial-element nil iesp))");
  expose_function("cl","reverse",true,&core::cl__reverse,"(seq)");
  expose_function("cl","nreverse",true,&core::cl__nreverse,"(seq)");
  expose_function("cl","subseq",true,&core::cl__subseq,"(sequence start &optional end)");
  expose_function("cl","copy_seq",true,&core::cl__copy_seq,"(seq)");
  expose_function("core","setf_elt",true,&core::core__setf_elt,"(sequence index value)");
  expose_function("core","elt_set",true,&core::core__elt_set,"(seq index val)");
  expose_function("core","setf_subseq",true,&core::core__setf_subseq,"(sequence start end subseq)");
  expose_function("cl","vector",true,&core::cl__vector,"(&rest args)");
  expose_function("core","make_vector",true,&core::core__make_vector,"(element-type dimension &optional adjustable (fill-pointer t) displaced-to displaced-index-offset initial-element initial-contents)");
  expose_function("core","adjust_vector",true,&core::core__adjust_vector,"(array dimensions initial-element initial-contents)");
  expose_function("cl","vector_push",true,&core::cl__vector_push,"(newElement vector)");
  expose_function("cl","vector_push_extend",true,&core::cl__vector_push_extend,"(newElement vector &optional (exension 16))");
  expose_function("core","set_run_time_values_vector",true,&core::core__set_run_time_values_vector,"(name)");
  expose_function("core","load_time_value_array",true,&core::core__load_time_value_array,"(name &optional (data-size 0) (symbol-size 0))");
  expose_function("core","lookup_load_time_value",true,&core::core__lookup_load_time_value,"(name idx)");
  expose_function("core","lookup_load_time_symbol",true,&core::core__lookup_load_time_symbol,"(name idx)");
  expose_function("core","load_time_values_ids",true,&core::core__load_time_values_ids,"()");
  expose_function("core","load_time_values_dump_values",true,&core::core__load_time_values_dump_values,"(name-or-ltv &optional indices)");
  expose_function("core","load_time_values_dump_symbols",true,&core::core__load_time_values_dump_symbols,"(name-or-ltv &optional indices)");
  expose_function("cl","ensure_directories_exist",true,&core::cl__ensure_directories_exist,"(pathspec)");
  expose_function("cl","get_internal_real_time",true,&core::cl__get_internal_real_time,"()");
  expose_function("cl","get_internal_run_time",true,&core::cl__get_internal_run_time,"()");
  expose_function("core","header_kind",true,&gctools::core__header_kind,"()");
  expose_function("core","inherits_from_instance",true,&gctools::core__inherits_from_instance,"(obj)");
  expose_function("core","hardwired_kinds",true,&gctools::core__hardwired_kinds,"()");
  expose_function("cl","room",true,&gctools::cl__room,"(&optional x (marker 0) msg)");
  expose_function("gctools","next_header_kind",true,&gctools::gctools__next_header_kind,"()");
  expose_function("core","telemetry_open",true,&telemetry::core__telemetry_open,"(pathname)");
  expose_function("core","telemetry_search",true,&telemetry::core__telemetry_search,"(addresses)");
  expose_function("core","telemetry_search_labels",true,&telemetry::core__telemetry_search_labels,"(label &optional (begin 0) end)");
  expose_function("core","telemetry_follow",true,&telemetry::core__telemetry_follow,"(address)");
  expose_function("core","telemetry_labels",true,&telemetry::core__telemetry_labels,"()");
  expose_function("core","telemetry_dump",true,&telemetry::core__telemetry_dump,"(&optional (begin 0) end)");
  expose_function("core","telemetry_count",true,&telemetry::core__telemetry_count,"()");
  expose_function("sockets_internal","ff_socket",true,&sockets::sockets_internal__ff_socket,"(domain type protocol)");
  expose_function("sockets_internal","ff_listen",true,&sockets::sockets_internal__ff_listen,"(sockfd backlog)");
  expose_function("sockets_internal","ff_close",true,&sockets::sockets_internal__ff_close,"(filedes)");
  expose_function("sockets_internal","funcName",true,&sockets::sockets_internal__funcName,"(arg)");
  expose_function("sockets_internal","ll_socket_errno",true,&sockets::sockets_internal__ll_socket_errno,"()");
  expose_function("sockets_internal","ll_get_name_service_h_errno",true,&sockets::sockets_internal__ll_get_name_service_h_errno,"()");
  expose_function("sockets_internal","ll_getNameServiceErrorMessage",true,&sockets::sockets_internal__ll_getNameServiceErrorMessage,"(num)");
  expose_function("sockets_internal","ll_getHostByName",true,&sockets::sockets_internal__ll_getHostByName,"(host-name host-ent setf_host_ent_name setf_host_ent_aliases setf_host_ent_address_type setf_host_ent_addresses)");
  expose_function("sockets_internal","ll_getHostByAddress",true,&sockets::sockets_internal__ll_getHostByAddress,"(address host-ent stf_host_ent_name setf_host_ent_aliases setf_host_ent_address_type setf_host_ent_addresses)");
  expose_function("sockets_internal","ll_socketReceive",true,&sockets::sockets_internal__ll_socketReceive,"(fd buffer length oob peek waitall)");
  expose_function("sockets_internal","ll_getProtocolByName",true,&sockets::sockets_internal__ll_getProtocolByName,"(name)");
  expose_function("sockets_internal","ll_socketBind_inetSocket",true,&sockets::sockets_internal__ll_socketBind_inetSocket,"(port ip0 ip1 ip2 ip3 socketFileDescriptor)");
  expose_function("sockets_internal","ll_socketAccept_inetSocket",true,&sockets::sockets_internal__ll_socketAccept_inetSocket,"(sfd)");
  expose_function("sockets_internal","ll_socketConnect_inetSocket",true,&sockets::sockets_internal__ll_socketConnect_inetSocket,"(port ip0 ip1 ip2 ip3 socket-file-descriptor)");
  expose_function("sockets_internal","ll_socketPeername_inetSocket",true,&sockets::sockets_internal__ll_socketPeername_inetSocket,"(fd vector)");
  expose_function("sockets_internal","ll_socketName",true,&sockets::sockets_internal__ll_socketName,"(fd vector)");
  expose_function("sockets_internal","ll_socketSendAddress",true,&sockets::sockets_internal__ll_socketSendAddress,"(arg)");
  expose_function("sockets_internal","socketSendNoAddress",true,&sockets::sockets_internal__socketSendNoAddress,"(fb buffer length oob eor dontroute dontwait nosignal confirm)");
  expose_function("sockets_internal","ll_socketBind_localSocket",true,&sockets::sockets_internal__ll_socketBind_localSocket,"(fd name family)");
  expose_function("sockets_internal","ll_socketAccept_localSocket",true,&sockets::sockets_internal__ll_socketAccept_localSocket,"(socket-file-descriptor)");
  expose_function("sockets_internal","ll_socketConnect_localSocket",true,&sockets::sockets_internal__ll_socketConnect_localSocket,"(fd family path)");
  expose_function("sockets_internal","socketPeername_localSocket",true,&sockets::sockets_internal__socketPeername_localSocket,"(fd)");
  expose_function("sockets_internal","ll_nonBlockingMode",true,&sockets::sockets_internal__ll_nonBlockingMode,"(fd)");
  expose_function("sockets_internal","ll_setfNonBlockingMode",true,&sockets::sockets_internal__ll_setfNonBlockingMode,"(fd nblock)");
  expose_function("sockets_internal","ll_dup",true,&sockets::sockets_internal__ll_dup,"(fd)");
  expose_function("sockets_internal","ll_makeStreamFromFd",true,&sockets::sockets_internal__ll_makeStreamFromFd,"(name fd stream-mode element-type external-format)");
  expose_function("sockets_internal","ll_autoCloseTwoWayStream",true,&sockets::sockets_internal__ll_autoCloseTwoWayStream,"(stream)");
  expose_function("sockets_internal","ll_strerror",true,&sockets::sockets_internal__ll_strerror,"(num)");
  expose_function("sockets_internal","ll_strerror_errno",true,&sockets::sockets_internal__ll_strerror_errno,"()");
  expose_function("sockets_internal","ll_getSockoptInt",true,&sockets::sockets_internal__ll_getSockoptInt,"(fd level constant)");
  expose_function("sockets_internal","ll_getSockoptBool",true,&sockets::sockets_internal__ll_getSockoptBool,"(fd level constant)");
  expose_function("sockets_internal","ll_getSockoptTimeval",true,&sockets::sockets_internal__ll_getSockoptTimeval,"(fd level constant)");
  expose_function("sockets_internal","ll_getSockoptLinger",true,&sockets::sockets_internal__ll_getSockoptLinger,"(fd level constant)");
  expose_function("sockets_internal","ll_setSockoptInt",true,&sockets::sockets_internal__ll_setSockoptInt,"(fd level constant value)");
  expose_function("sockets_internal","ll_setSockoptBool",true,&sockets::sockets_internal__ll_setSockoptBool,"(fd level constant value)");
  expose_function("sockets_internal","ll_setSockoptTimeval",true,&sockets::sockets_internal__ll_setSockoptTimeval,"(fd level constant value)");
  expose_function("sockets_internal","ll_setSockoptLinger",true,&sockets::sockets_internal__ll_setSockoptLinger,"(fd level constant value)");
#endif // EXPOSE_FUNCTION_BINDINGS
